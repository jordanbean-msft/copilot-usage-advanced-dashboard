# Run when commits are pushed to ado-pipeline
on:
  workflow_dispatch:
  push:
    # Run when commits are pushed to mainline branch (main or master)
    # Set this to the mainline branch you are using
    branches:
      - main

# Set up permissions for deploying with secretless Azure federated credentials
# https://learn.microsoft.com/en-us/azure/developer/github/connect-from-azure?tabs=azure-portal%2Clinux#set-up-azure-login-with-openid-connect-authentication
permissions:
  id-token: write
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      AZURE_USER_PRINCIPAL_ID: ${{ secrets.AZURE_USER_PRINCIPAL_ID }}
      GITHUB_ORGANIZATION_SLUGS: ${{ vars.GH_ORGANIZATION_SLUGS }}
      GITHUB_PAT: ${{ secrets.GH_PAT }}
      AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      ASSIGN_PERMISSIONS_TO_PRINCIPAL: false

      # Optional: Enable Entra ID SSO
      # Uncomment the following lines if you want to enable Entra ID SSO
      # AZURE_AUTHENTICATION_ENABLED: ${{ vars.AZURE_AUTHENTICATION_ENABLED }}
      # AZURE_AUTHENTICATION_CLIENT_ID: ${{ secrets.AZURE_AUTHENTICATION_CLIENT_ID }}
      # AZURE_AUTHENTICATION_OPEN_ID_ISSUER: ${{ vars.AZURE_AUTHENTICATION_OPEN_ID_ISSUER }}

      # Optional: Enable private networking
      # Uncomment the following lines if you want to enable private networking
      # AZURE_VIRTUAL_NETWORK_PROVISION_PRIVATE_ENDPOINTS: ${{ vars.AZURE_VIRTUAL_NETWORK_PROVISION_PRIVATE_ENDPOINTS }}
      # AZURE_VIRTUAL_NETWORK_PUBLIC_NETWORK_ACCESS: ${{ vars.AZURE_VIRTUAL_NETWORK_PUBLIC_NETWORK_ACCESS }}
      # AZURE_VIRTUAL_NETWORK_NAME: ${{ vars.AZURE_VIRTUAL_NETWORK_NAME }}
      # AZURE_VIRTUAL_NETWORK_RESOURCE_GROUP_NAME: ${{ vars.AZURE_VIRTUAL_NETWORK_RESOURCE_GROUP_NAME }}
      # AZURE_VIRTUAL_NETWORK_ADDRESS_PREFIXES: ${{ vars.AZURE_VIRTUAL_NETWORK_ADDRESS_PREFIXES }}
      # AZURE_VIRTUAL_NETWORK_CONTAINER_APPS_SUBNET_NAME: ${{ vars.AZURE_VIRTUAL_NETWORK_CONTAINER_APPS_SUBNET_NAME }}
      # AZURE_VIRTUAL_NETWORK_CONTAINER_APPS_SUBNET_ADDRESS_PREFIX: ${{ vars.AZURE_VIRTUAL_NETWORK_CONTAINER_APPS_SUBNET_ADDRESS_PREFIX }}
      # AZURE_VIRTUAL_NETWORK_PRIVATE_ENDPOINT_SUBNET_NAME: ${{ vars.AZURE_VIRTUAL_NETWORK_PRIVATE_ENDPOINT_SUBNET_NAME }}
      # AZURE_VIRTUAL_NETWORK_PRIVATE_ENDPOINT_SUBNET_ADDRESS_PREFIX: ${{ vars.AZURE_VIRTUAL_NETWORK_PRIVATE_ENDPOINT_SUBNET_ADDRESS_PREFIX }}
      # AZURE_VIRTUAL_NETWORK_PRIVATE_ENDPOINT_SUBNET_NSG_NAME: ${{ vars.AZURE_VIRTUAL_NETWORK_PRIVATE_ENDPOINT_SUBNET_NSG_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install azd
        uses: Azure/setup-azd@v2
      - name: Log in with Azure (Federated Credentials)
        run: |
          azd auth login `
            --client-id "$Env:AZURE_CLIENT_ID" `
            --federated-credential-provider "github" `
            --tenant-id "$Env:AZURE_TENANT_ID"
        shell: pwsh

      - name: Azure CLI Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Provision Infrastructure
        run: azd provision --no-prompt
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

      - name: Deploy Application
        run: azd deploy --no-prompt
        env:
          GITHUB_PAT: ${{ secrets.GH_PAT }}

