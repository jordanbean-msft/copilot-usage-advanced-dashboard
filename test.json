{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.33.93.31351",
      "templateHash": "8666626946633002236"
    }
  },
  "parameters": {
    "environmentName": {
      "type": "string",
      "minLength": 1,
      "maxLength": 64,
      "metadata": {
        "description": "Name of the environment that can be used as part of naming resource convention"
      }
    },
    "location": {
      "type": "string",
      "minLength": 1,
      "metadata": {
        "description": "Primary location for all resources"
      }
    },
    "cpuAdUpdaterExists": {
      "type": "bool"
    },
    "cpuAdUpdaterDefinition": {
      "type": "secureObject"
    },
    "elasticSearchExists": {
      "type": "bool"
    },
    "elasticSearchDefinition": {
      "type": "secureObject"
    },
    "grafanaExists": {
      "type": "bool"
    },
    "grafanaDefinition": {
      "type": "secureObject"
    },
    "principalId": {
      "type": "string",
      "metadata": {
        "description": "Id of the user or app to assign application roles"
      }
    }
  },
  "variables": {
    "tags": {
      "azd-env-name": "[parameters('environmentName')]"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-04-01",
      "name": "[format('rg-{0}', parameters('environmentName'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tags')]"
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "resources",
      "resourceGroup": "[format('rg-{0}', parameters('environmentName'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "tags": {
            "value": "[variables('tags')]"
          },
          "principalId": {
            "value": "[parameters('principalId')]"
          },
          "cpuAdUpdaterExists": {
            "value": "[parameters('cpuAdUpdaterExists')]"
          },
          "cpuAdUpdaterDefinition": {
            "value": "[parameters('cpuAdUpdaterDefinition')]"
          },
          "elasticSearchExists": {
            "value": "[parameters('elasticSearchExists')]"
          },
          "elasticSearchDefinition": {
            "value": "[parameters('elasticSearchDefinition')]"
          },
          "grafanaExists": {
            "value": "[parameters('grafanaExists')]"
          },
          "grafanaDefinition": {
            "value": "[parameters('grafanaDefinition')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.33.93.31351",
              "templateHash": "15827561184056480151"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "The location used for all deployed resources"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags that will be applied to all resources"
              }
            },
            "cpuAdUpdaterExists": {
              "type": "bool"
            },
            "cpuAdUpdaterDefinition": {
              "type": "secureObject"
            },
            "elasticSearchExists": {
              "type": "bool"
            },
            "elasticSearchDefinition": {
              "type": "secureObject"
            },
            "grafanaExists": {
              "type": "bool"
            },
            "grafanaDefinition": {
              "type": "secureObject"
            },
            "principalId": {
              "type": "string",
              "metadata": {
                "description": "Id of the user or app to assign application roles"
              }
            }
          },
          "variables": {
            "$fxv#0": {
              "analysisServicesServers": "as",
              "apiManagementService": "apim-",
              "appConfigurationStores": "appcs-",
              "appManagedEnvironments": "cae-",
              "appContainerApps": "ca-",
              "authorizationPolicyDefinitions": "policy-",
              "automationAutomationAccounts": "aa-",
              "blueprintBlueprints": "bp-",
              "blueprintBlueprintsArtifacts": "bpa-",
              "cacheRedis": "redis-",
              "cdnProfiles": "cdnp-",
              "cdnProfilesEndpoints": "cdne-",
              "cognitiveServicesAccounts": "cog-",
              "cognitiveServicesFormRecognizer": "cog-fr-",
              "cognitiveServicesTextAnalytics": "cog-ta-",
              "computeAvailabilitySets": "avail-",
              "computeCloudServices": "cld-",
              "computeDiskEncryptionSets": "des",
              "computeDisks": "disk",
              "computeDisksOs": "osdisk",
              "computeGalleries": "gal",
              "computeSnapshots": "snap-",
              "computeVirtualMachines": "vm",
              "computeVirtualMachineScaleSets": "vmss-",
              "containerInstanceContainerGroups": "ci",
              "containerRegistryRegistries": "cr",
              "containerServiceManagedClusters": "aks-",
              "databricksWorkspaces": "dbw-",
              "dataFactoryFactories": "adf-",
              "dataLakeAnalyticsAccounts": "dla",
              "dataLakeStoreAccounts": "dls",
              "dataMigrationServices": "dms-",
              "dBforMySQLServers": "mysql-",
              "dBforPostgreSQLServers": "psql-",
              "devicesIotHubs": "iot-",
              "devicesProvisioningServices": "provs-",
              "devicesProvisioningServicesCertificates": "pcert-",
              "documentDBDatabaseAccounts": "cosmos-",
              "documentDBMongoDatabaseAccounts": "cosmon-",
              "eventGridDomains": "evgd-",
              "eventGridDomainsTopics": "evgt-",
              "eventGridEventSubscriptions": "evgs-",
              "eventHubNamespaces": "evhns-",
              "eventHubNamespacesEventHubs": "evh-",
              "hdInsightClustersHadoop": "hadoop-",
              "hdInsightClustersHbase": "hbase-",
              "hdInsightClustersKafka": "kafka-",
              "hdInsightClustersMl": "mls-",
              "hdInsightClustersSpark": "spark-",
              "hdInsightClustersStorm": "storm-",
              "hybridComputeMachines": "arcs-",
              "insightsActionGroups": "ag-",
              "insightsComponents": "appi-",
              "keyVaultVaults": "kv-",
              "kubernetesConnectedClusters": "arck",
              "kustoClusters": "dec",
              "kustoClustersDatabases": "dedb",
              "logicIntegrationAccounts": "ia-",
              "logicWorkflows": "logic-",
              "machineLearningServicesWorkspaces": "mlw-",
              "managedIdentityUserAssignedIdentities": "id-",
              "managementManagementGroups": "mg-",
              "migrateAssessmentProjects": "migr-",
              "networkApplicationGateways": "agw-",
              "networkApplicationSecurityGroups": "asg-",
              "networkAzureFirewalls": "afw-",
              "networkBastionHosts": "bas-",
              "networkConnections": "con-",
              "networkDnsZones": "dnsz-",
              "networkExpressRouteCircuits": "erc-",
              "networkFirewallPolicies": "afwp-",
              "networkFirewallPoliciesWebApplication": "waf",
              "networkFirewallPoliciesRuleGroups": "wafrg",
              "networkFrontDoors": "fd-",
              "networkFrontdoorWebApplicationFirewallPolicies": "fdfp-",
              "networkLoadBalancersExternal": "lbe-",
              "networkLoadBalancersInternal": "lbi-",
              "networkLoadBalancersInboundNatRules": "rule-",
              "networkLocalNetworkGateways": "lgw-",
              "networkNatGateways": "ng-",
              "networkNetworkInterfaces": "nic-",
              "networkNetworkSecurityGroups": "nsg-",
              "networkNetworkSecurityGroupsSecurityRules": "nsgsr-",
              "networkNetworkWatchers": "nw-",
              "networkPrivateDnsZones": "pdnsz-",
              "networkPrivateLinkServices": "pl-",
              "networkPublicIPAddresses": "pip-",
              "networkPublicIPPrefixes": "ippre-",
              "networkRouteFilters": "rf-",
              "networkRouteTables": "rt-",
              "networkRouteTablesRoutes": "udr-",
              "networkTrafficManagerProfiles": "traf-",
              "networkVirtualNetworkGateways": "vgw-",
              "networkVirtualNetworks": "vnet-",
              "networkVirtualNetworksSubnets": "snet-",
              "networkVirtualNetworksVirtualNetworkPeerings": "peer-",
              "networkVirtualWans": "vwan-",
              "networkVpnGateways": "vpng-",
              "networkVpnGatewaysVpnConnections": "vcn-",
              "networkVpnGatewaysVpnSites": "vst-",
              "notificationHubsNamespaces": "ntfns-",
              "notificationHubsNamespacesNotificationHubs": "ntf-",
              "operationalInsightsWorkspaces": "log-",
              "portalDashboards": "dash-",
              "powerBIDedicatedCapacities": "pbi-",
              "purviewAccounts": "pview-",
              "recoveryServicesVaults": "rsv-",
              "resourcesResourceGroups": "rg-",
              "searchSearchServices": "srch-",
              "serviceBusNamespaces": "sb-",
              "serviceBusNamespacesQueues": "sbq-",
              "serviceBusNamespacesTopics": "sbt-",
              "serviceEndPointPolicies": "se-",
              "serviceFabricClusters": "sf-",
              "signalRServiceSignalR": "sigr",
              "sqlManagedInstances": "sqlmi-",
              "sqlServers": "sql-",
              "sqlServersDataWarehouse": "sqldw-",
              "sqlServersDatabases": "sqldb-",
              "sqlServersDatabasesStretch": "sqlstrdb-",
              "storageStorageAccounts": "st",
              "storageStorageAccountsVm": "stvm",
              "storSimpleManagers": "ssimp",
              "streamAnalyticsCluster": "asa-",
              "synapseWorkspaces": "syn",
              "synapseWorkspacesAnalyticsWorkspaces": "synw",
              "synapseWorkspacesSqlPoolsDedicated": "syndp",
              "synapseWorkspacesSqlPoolsSpark": "synsp",
              "timeSeriesInsightsEnvironments": "tsi-",
              "webServerFarms": "plan-",
              "webSitesAppService": "app-",
              "webSitesAppServiceEnvironment": "ase-",
              "webSitesFunctions": "func-",
              "webStaticSites": "stapp-"
            },
            "abbrs": "[variables('$fxv#0')]",
            "resourceToken": "[uniqueString(subscription().id, resourceGroup().id, parameters('location'))]",
            "elasticSearchFileShareName": "elastic-search",
            "grafanaFileShareName": "grafana"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "monitoring",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "abbrs": {
                    "value": "[variables('abbrs')]"
                  },
                  "resourceToken": {
                    "value": "[variables('resourceToken')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "13382915188927170868"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "abbrs": {
                      "type": "object"
                    },
                    "resourceToken": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "monitoring",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsName": {
                            "value": "[format('{0}{1}', parameters('abbrs').operationalInsightsWorkspaces, parameters('resourceToken'))]"
                          },
                          "applicationInsightsName": {
                            "value": "[format('{0}{1}', parameters('abbrs').insightsComponents, parameters('resourceToken'))]"
                          },
                          "applicationInsightsDashboardName": {
                            "value": "[format('{0}{1}', parameters('abbrs').portalDashboards, parameters('resourceToken'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.30.23.60470",
                              "templateHash": "10958835295881470966"
                            },
                            "name": "Azd Azure Monitoring",
                            "description": "Creates an Application Insights instance and a Log Analytics workspace.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
                            "owner": "Azure/module-maintainers"
                          },
                          "parameters": {
                            "logAnalyticsName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource operational insights workspaces name."
                              }
                            },
                            "applicationInsightsName": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. The resource insights components name."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "applicationInsightsDashboardName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The resource portal dashboards name."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                "description": "Optional. Tags of the resource."
                              }
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.ptn.azd-monitoring.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalytics": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "loganalytics",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[parameters('logAnalyticsName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "dataRetention": {
                                    "value": 30
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "11627784326487264389"
                                    },
                                    "name": "Log Analytics Workspaces",
                                    "description": "This module deploys a Log Analytics Workspace.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "managedIdentitiesType": {
                                      "type": "object",
                                      "properties": {
                                        "systemAssigned": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enables system assigned managed identity on the resource."
                                          }
                                        },
                                        "userAssignedResourceIds": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The resource ID(s) to assign to the resource."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                            }
                                          },
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "diagnosticSettingType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of diagnostic setting."
                                            }
                                          },
                                          "logCategoriesAndGroups": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                  }
                                                },
                                                "categoryGroup": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                            }
                                          },
                                          "metricCategories": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "category": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                  }
                                                },
                                                "enabled": {
                                                  "type": "bool",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                  }
                                                }
                                              }
                                            },
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                            }
                                          },
                                          "logAnalyticsDestinationType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "AzureDiagnostics",
                                              "Dedicated"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                            }
                                          },
                                          "useThisWorkspace": {
                                            "type": "bool",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Instead of using an external reference, use the deployed instance as the target for its diagnostic settings. If set to `true`, the `workspaceResourceId` property is ignored."
                                            }
                                          },
                                          "workspaceResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "storageAccountResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "eventHubAuthorizationRuleResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                            }
                                          },
                                          "eventHubName": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                            }
                                          },
                                          "marketplacePartnerResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the Log Analytics workspace."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "skuName": {
                                      "type": "string",
                                      "defaultValue": "PerGB2018",
                                      "allowedValues": [
                                        "CapacityReservation",
                                        "Free",
                                        "LACluster",
                                        "PerGB2018",
                                        "PerNode",
                                        "Premium",
                                        "Standalone",
                                        "Standard"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The name of the SKU."
                                      }
                                    },
                                    "skuCapacityReservationLevel": {
                                      "type": "int",
                                      "defaultValue": 100,
                                      "minValue": 100,
                                      "maxValue": 5000,
                                      "metadata": {
                                        "description": "Optional. The capacity reservation level in GB for this workspace, when CapacityReservation sku is selected. Must be in increments of 100 between 100 and 5000."
                                      }
                                    },
                                    "storageInsightsConfigs": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of storage accounts to be read by the workspace."
                                      }
                                    },
                                    "linkedServices": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of services to be linked."
                                      }
                                    },
                                    "linkedStorageAccounts": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Conditional. List of Storage Accounts to be linked. Required if 'forceCmkForQuery' is set to 'true' and 'savedSearches' is not empty."
                                      }
                                    },
                                    "savedSearches": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. Kusto Query Language searches to save."
                                      }
                                    },
                                    "dataExports": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. LAW data export instances to be deployed."
                                      }
                                    },
                                    "dataSources": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. LAW data sources to configure."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. LAW custom tables to be deployed."
                                      }
                                    },
                                    "gallerySolutions": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. List of gallerySolutions to be created in the log analytics workspace."
                                      }
                                    },
                                    "dataRetention": {
                                      "type": "int",
                                      "defaultValue": 365,
                                      "minValue": 0,
                                      "maxValue": 730,
                                      "metadata": {
                                        "description": "Optional. Number of days data will be retained for."
                                      }
                                    },
                                    "dailyQuotaGb": {
                                      "type": "int",
                                      "defaultValue": -1,
                                      "minValue": -1,
                                      "metadata": {
                                        "description": "Optional. The workspace daily quota for ingestion."
                                      }
                                    },
                                    "publicNetworkAccessForIngestion": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The network access type for accessing Log Analytics ingestion."
                                      }
                                    },
                                    "publicNetworkAccessForQuery": {
                                      "type": "string",
                                      "defaultValue": "Enabled",
                                      "allowedValues": [
                                        "Enabled",
                                        "Disabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The network access type for accessing Log Analytics query."
                                      }
                                    },
                                    "managedIdentities": {
                                      "$ref": "#/definitions/managedIdentitiesType",
                                      "metadata": {
                                        "description": "Optional. The managed identity definition for this resource. Only one type of identity is supported: system-assigned or user-assigned, but not both."
                                      }
                                    },
                                    "useResourcePermissions": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Set to 'true' to use resource or workspace permissions and 'false' (or leave empty) to require workspace permissions."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "$ref": "#/definitions/diagnosticSettingType",
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "forceCmkForQuery": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Indicates whether customer managed storage is mandatory for query management."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                                    "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), 'SystemAssigned', if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                      "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                      "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                      "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "Security Admin": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'fb1c8493-542b-48eb-b624-b4c8fea62acd')]",
                                      "Security Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '39bc4728-0917-49c7-9d2c-d95423bc2eb4')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.operationalinsights-workspace.{0}.{1}', replace('0.7.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "logAnalyticsWorkspace": {
                                      "type": "Microsoft.OperationalInsights/workspaces",
                                      "apiVersion": "2022-10-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "features": {
                                          "searchVersion": 1,
                                          "enableLogAccessUsingOnlyResourcePermissions": "[parameters('useResourcePermissions')]"
                                        },
                                        "sku": {
                                          "name": "[parameters('skuName')]",
                                          "capacityReservationLevel": "[if(equals(parameters('skuName'), 'CapacityReservation'), parameters('skuCapacityReservationLevel'), null())]"
                                        },
                                        "retentionInDays": "[parameters('dataRetention')]",
                                        "workspaceCapping": {
                                          "dailyQuotaGb": "[parameters('dailyQuotaGb')]"
                                        },
                                        "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                        "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                        "forceCmkForQuery": "[parameters('forceCmkForQuery')]"
                                      },
                                      "identity": "[variables('identity')]"
                                    },
                                    "logAnalyticsWorkspace_diagnosticSettings": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[if(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'useThisWorkspace'), false()), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId'))]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_roleAssignments": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_storageInsightConfigs": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_storageInsightConfigs",
                                        "count": "[length(parameters('storageInsightsConfigs'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-StorageInsightsConfig-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "logAnalyticsWorkspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "containers": {
                                            "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'containers')]"
                                          },
                                          "tables": {
                                            "value": "[tryGet(parameters('storageInsightsConfigs')[copyIndex()], 'tables')]"
                                          },
                                          "storageAccountResourceId": {
                                            "value": "[parameters('storageInsightsConfigs')[copyIndex()].storageAccountResourceId]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "1745671120474305926"
                                            },
                                            "name": "Log Analytics Workspace Storage Insight Configs",
                                            "description": "This module deploys a Log Analytics Workspace Storage Insight Config.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "logAnalyticsWorkspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "[format('{0}-stinsconfig', last(split(parameters('storageAccountResourceId'), '/')))]",
                                              "metadata": {
                                                "description": "Optional. The name of the storage insights config."
                                              }
                                            },
                                            "storageAccountResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The Azure Resource Manager ID of the storage account resource."
                                              }
                                            },
                                            "containers": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. The names of the blob containers that the workspace should read."
                                              }
                                            },
                                            "tables": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. The names of the Azure tables that the workspace should read."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags to configure in the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2022-09-01",
                                              "name": "[last(split(parameters('storageAccountResourceId'), '/'))]"
                                            },
                                            "workspace": {
                                              "existing": true,
                                              "type": "Microsoft.OperationalInsights/workspaces",
                                              "apiVersion": "2022-10-01",
                                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                                            },
                                            "storageinsightconfig": {
                                              "type": "Microsoft.OperationalInsights/workspaces/storageInsightConfigs",
                                              "apiVersion": "2020-08-01",
                                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "containers": "[parameters('containers')]",
                                                "tables": "[parameters('tables')]",
                                                "storageAccount": {
                                                  "id": "[parameters('storageAccountResourceId')]",
                                                  "key": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', last(split(parameters('storageAccountResourceId'), '/'))), '2022-09-01').keys[0].value]"
                                                }
                                              },
                                              "dependsOn": [
                                                "storageAccount",
                                                "workspace"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed storage insights configuration."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/storageInsightConfigs', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group where the storage insight configuration is deployed."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the storage insights configuration."
                                              },
                                              "value": "[parameters('name')]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_linkedServices": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_linkedServices",
                                        "count": "[length(parameters('linkedServices'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-LinkedService-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "logAnalyticsWorkspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('linkedServices')[copyIndex()].name]"
                                          },
                                          "resourceId": {
                                            "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'resourceId')]"
                                          },
                                          "writeAccessResourceId": {
                                            "value": "[tryGet(parameters('linkedServices')[copyIndex()], 'writeAccessResourceId')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "12032441371027552374"
                                            },
                                            "name": "Log Analytics Workspace Linked Services",
                                            "description": "This module deploys a Log Analytics Workspace Linked Service.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "logAnalyticsWorkspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the link."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                              }
                                            },
                                            "writeAccessResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require write access."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags to configure in the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "workspace": {
                                              "existing": true,
                                              "type": "Microsoft.OperationalInsights/workspaces",
                                              "apiVersion": "2022-10-01",
                                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                                            },
                                            "linkedService": {
                                              "type": "Microsoft.OperationalInsights/workspaces/linkedServices",
                                              "apiVersion": "2020-08-01",
                                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "resourceId": "[parameters('resourceId')]",
                                                "writeAccessResourceId": "[if(empty(parameters('writeAccessResourceId')), null(), parameters('writeAccessResourceId'))]"
                                              },
                                              "dependsOn": [
                                                "workspace"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed linked service."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed linked service."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedServices', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group where the linked service is deployed."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_linkedStorageAccounts": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_linkedStorageAccounts",
                                        "count": "[length(parameters('linkedStorageAccounts'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-LinkedStorageAccount-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "logAnalyticsWorkspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].name]"
                                          },
                                          "resourceId": {
                                            "value": "[parameters('linkedStorageAccounts')[copyIndex()].resourceId]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "12623216644328477682"
                                            },
                                            "name": "Log Analytics Workspace Linked Storage Accounts",
                                            "description": "This module deploys a Log Analytics Workspace Linked Storage Account.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "logAnalyticsWorkspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "allowedValues": [
                                                "Query",
                                                "Alerts",
                                                "CustomLogs",
                                                "AzureWatson"
                                              ],
                                              "metadata": {
                                                "description": "Required. Name of the link."
                                              }
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource ID of the resource that will be linked to the workspace. This should be used for linking resources which require read access."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.OperationalInsights/workspaces/linkedStorageAccounts",
                                              "apiVersion": "2020-08-01",
                                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                              "properties": {
                                                "storageAccountIds": [
                                                  "[parameters('resourceId')]"
                                                ]
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed linked storage account."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed linked storage account."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/linkedStorageAccounts', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group where the linked storage account is deployed."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_savedSearches": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_savedSearches",
                                        "count": "[length(parameters('savedSearches'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-SavedSearch-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "logAnalyticsWorkspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[format('{0}{1}', parameters('savedSearches')[copyIndex()].name, uniqueString(deployment().name))]"
                                          },
                                          "etag": {
                                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'etag')]"
                                          },
                                          "displayName": {
                                            "value": "[parameters('savedSearches')[copyIndex()].displayName]"
                                          },
                                          "category": {
                                            "value": "[parameters('savedSearches')[copyIndex()].category]"
                                          },
                                          "query": {
                                            "value": "[parameters('savedSearches')[copyIndex()].query]"
                                          },
                                          "functionAlias": {
                                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionAlias')]"
                                          },
                                          "functionParameters": {
                                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'functionParameters')]"
                                          },
                                          "version": {
                                            "value": "[tryGet(parameters('savedSearches')[copyIndex()], 'version')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "7683333179440464721"
                                            },
                                            "name": "Log Analytics Workspace Saved Searches",
                                            "description": "This module deploys a Log Analytics Workspace Saved Search.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "logAnalyticsWorkspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the saved search."
                                              }
                                            },
                                            "displayName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Display name for the search."
                                              }
                                            },
                                            "category": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Query category."
                                              }
                                            },
                                            "query": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Kusto Query to be stored."
                                              }
                                            },
                                            "tags": {
                                              "type": "array",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags to configure in the resource."
                                              }
                                            },
                                            "functionAlias": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The function alias if query serves as a function."
                                              }
                                            },
                                            "functionParameters": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The optional function parameters if query serves as a function. Value should be in the following format: \"param-name1:type1 = default_value1, param-name2:type2 = default_value2\". For more examples and proper syntax please refer to /azure/kusto/query/functions/user-defined-functions."
                                              }
                                            },
                                            "version": {
                                              "type": "int",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. The version number of the query language."
                                              }
                                            },
                                            "etag": {
                                              "type": "string",
                                              "defaultValue": "*",
                                              "metadata": {
                                                "description": "Optional. The ETag of the saved search. To override an existing saved search, use \"*\" or specify the current Etag."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "workspace": {
                                              "existing": true,
                                              "type": "Microsoft.OperationalInsights/workspaces",
                                              "apiVersion": "2022-10-01",
                                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                                            },
                                            "savedSearch": {
                                              "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
                                              "apiVersion": "2020-08-01",
                                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                              "properties": {
                                                "etag": "[parameters('etag')]",
                                                "tags": "[coalesce(parameters('tags'), createArray())]",
                                                "displayName": "[parameters('displayName')]",
                                                "category": "[parameters('category')]",
                                                "query": "[parameters('query')]",
                                                "functionAlias": "[parameters('functionAlias')]",
                                                "functionParameters": "[parameters('functionParameters')]",
                                                "version": "[parameters('version')]"
                                              },
                                              "dependsOn": [
                                                "workspace"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed saved search."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/savedSearches', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group where the saved search is deployed."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed saved search."
                                              },
                                              "value": "[parameters('name')]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace",
                                        "logAnalyticsWorkspace_linkedStorageAccounts"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_dataExports": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_dataExports",
                                        "count": "[length(parameters('dataExports'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-DataExport-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "workspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('dataExports')[copyIndex()].name]"
                                          },
                                          "destination": {
                                            "value": "[tryGet(parameters('dataExports')[copyIndex()], 'destination')]"
                                          },
                                          "enable": {
                                            "value": "[tryGet(parameters('dataExports')[copyIndex()], 'enable')]"
                                          },
                                          "tableNames": {
                                            "value": "[tryGet(parameters('dataExports')[copyIndex()], 'tableNames')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "5765609820817623497"
                                            },
                                            "name": "Log Analytics Workspace Data Exports",
                                            "description": "This module deploys a Log Analytics Workspace Data Export.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "minLength": 4,
                                              "maxLength": 63,
                                              "metadata": {
                                                "description": "Required. The data export rule name."
                                              }
                                            },
                                            "workspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "destination": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Destination properties."
                                              }
                                            },
                                            "enable": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Active when enabled."
                                              }
                                            },
                                            "tableNames": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. An array of tables to export, for example: ['Heartbeat', 'SecurityEvent']."
                                              }
                                            }
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.OperationalInsights/workspaces/dataExports",
                                              "apiVersion": "2020-08-01",
                                              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                              "properties": {
                                                "destination": "[parameters('destination')]",
                                                "enable": "[parameters('enable')]",
                                                "tableNames": "[parameters('tableNames')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the data export."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the data export."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataExports', parameters('workspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the data export was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_dataSources": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_dataSources",
                                        "count": "[length(parameters('dataSources'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-DataSource-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "logAnalyticsWorkspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('dataSources')[copyIndex()].name]"
                                          },
                                          "kind": {
                                            "value": "[parameters('dataSources')[copyIndex()].kind]"
                                          },
                                          "linkedResourceId": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'linkedResourceId')]"
                                          },
                                          "eventLogName": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventLogName')]"
                                          },
                                          "eventTypes": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'eventTypes')]"
                                          },
                                          "objectName": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'objectName')]"
                                          },
                                          "instanceName": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'instanceName')]"
                                          },
                                          "intervalSeconds": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'intervalSeconds')]"
                                          },
                                          "counterName": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'counterName')]"
                                          },
                                          "state": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'state')]"
                                          },
                                          "syslogName": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogName')]"
                                          },
                                          "syslogSeverities": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'syslogSeverities')]"
                                          },
                                          "performanceCounters": {
                                            "value": "[tryGet(parameters('dataSources')[copyIndex()], 'performanceCounters')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "13460038983765020046"
                                            },
                                            "name": "Log Analytics Workspace Datasources",
                                            "description": "This module deploys a Log Analytics Workspace Data Source.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "logAnalyticsWorkspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Log Analytics workspace. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the solution."
                                              }
                                            },
                                            "kind": {
                                              "type": "string",
                                              "defaultValue": "AzureActivityLog",
                                              "allowedValues": [
                                                "AzureActivityLog",
                                                "WindowsEvent",
                                                "WindowsPerformanceCounter",
                                                "IISLogs",
                                                "LinuxSyslog",
                                                "LinuxSyslogCollection",
                                                "LinuxPerformanceObject",
                                                "LinuxPerformanceCollection"
                                              ],
                                              "metadata": {
                                                "description": "Required. The kind of the DataSource."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags to configure in the resource."
                                              }
                                            },
                                            "linkedResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Resource ID of the resource to be linked."
                                              }
                                            },
                                            "eventLogName": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Windows event log name to configure when kind is WindowsEvent."
                                              }
                                            },
                                            "eventTypes": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. Windows event types to configure when kind is WindowsEvent."
                                              }
                                            },
                                            "objectName": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Name of the object to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                              }
                                            },
                                            "instanceName": {
                                              "type": "string",
                                              "defaultValue": "*",
                                              "metadata": {
                                                "description": "Optional. Name of the instance to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                              }
                                            },
                                            "intervalSeconds": {
                                              "type": "int",
                                              "defaultValue": 60,
                                              "metadata": {
                                                "description": "Optional. Interval in seconds to configure when kind is WindowsPerformanceCounter or LinuxPerformanceObject."
                                              }
                                            },
                                            "performanceCounters": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. List of counters to configure when the kind is LinuxPerformanceObject."
                                              }
                                            },
                                            "counterName": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Counter name to configure when kind is WindowsPerformanceCounter."
                                              }
                                            },
                                            "state": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. State to configure when kind is IISLogs or LinuxSyslogCollection or LinuxPerformanceCollection."
                                              }
                                            },
                                            "syslogName": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. System log to configure when kind is LinuxSyslog."
                                              }
                                            },
                                            "syslogSeverities": {
                                              "type": "array",
                                              "defaultValue": [],
                                              "metadata": {
                                                "description": "Optional. Severities to configure when kind is LinuxSyslog."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "workspace": {
                                              "existing": true,
                                              "type": "Microsoft.OperationalInsights/workspaces",
                                              "apiVersion": "2022-10-01",
                                              "name": "[parameters('logAnalyticsWorkspaceName')]"
                                            },
                                            "dataSource": {
                                              "type": "Microsoft.OperationalInsights/workspaces/dataSources",
                                              "apiVersion": "2020-08-01",
                                              "name": "[format('{0}/{1}', parameters('logAnalyticsWorkspaceName'), parameters('name'))]",
                                              "kind": "[parameters('kind')]",
                                              "tags": "[parameters('tags')]",
                                              "properties": {
                                                "linkedResourceId": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'AzureActivityLog')), parameters('linkedResourceId'), null())]",
                                                "eventLogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventLogName'), null())]",
                                                "eventTypes": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsEvent')), parameters('eventTypes'), null())]",
                                                "objectName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('objectName'), null())]",
                                                "instanceName": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('instanceName'), null())]",
                                                "intervalSeconds": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'WindowsPerformanceCounter'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('intervalSeconds'), null())]",
                                                "counterName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'WindowsPerformanceCounter')), parameters('counterName'), null())]",
                                                "state": "[if(and(not(empty(parameters('kind'))), or(or(equals(parameters('kind'), 'IISLogs'), equals(parameters('kind'), 'LinuxSyslogCollection')), equals(parameters('kind'), 'LinuxPerformanceCollection'))), parameters('state'), null())]",
                                                "syslogName": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxSyslog')), parameters('syslogName'), null())]",
                                                "syslogSeverities": "[if(and(not(empty(parameters('kind'))), or(equals(parameters('kind'), 'LinuxSyslog'), equals(parameters('kind'), 'LinuxPerformanceObject'))), parameters('syslogSeverities'), null())]",
                                                "performanceCounters": "[if(and(not(empty(parameters('kind'))), equals(parameters('kind'), 'LinuxPerformanceObject')), parameters('performanceCounters'), null())]"
                                              },
                                              "dependsOn": [
                                                "workspace"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed data source."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/dataSources', parameters('logAnalyticsWorkspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group where the data source is deployed."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed data source."
                                              },
                                              "value": "[parameters('name')]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_tables": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_tables",
                                        "count": "[length(parameters('tables'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-Table-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "workspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[parameters('tables')[copyIndex()].name]"
                                          },
                                          "plan": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'plan')]"
                                          },
                                          "schema": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'schema')]"
                                          },
                                          "retentionInDays": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'retentionInDays')]"
                                          },
                                          "totalRetentionInDays": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'totalRetentionInDays')]"
                                          },
                                          "restoredLogs": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'restoredLogs')]"
                                          },
                                          "searchResults": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'searchResults')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "10380077652898392916"
                                            },
                                            "name": "Log Analytics Workspace Tables",
                                            "description": "This module deploys a Log Analytics Workspace Table.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the table."
                                              }
                                            },
                                            "workspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent workspaces. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "plan": {
                                              "type": "string",
                                              "defaultValue": "Analytics",
                                              "allowedValues": [
                                                "Basic",
                                                "Analytics"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Instruct the system how to handle and charge the logs ingested to this table."
                                              }
                                            },
                                            "restoredLogs": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Restore parameters."
                                              }
                                            },
                                            "retentionInDays": {
                                              "type": "int",
                                              "defaultValue": -1,
                                              "minValue": -1,
                                              "maxValue": 730,
                                              "metadata": {
                                                "description": "Optional. The table retention in days, between 4 and 730. Setting this property to -1 will default to the workspace retention."
                                              }
                                            },
                                            "schema": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Table's schema."
                                              }
                                            },
                                            "searchResults": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. Parameters of the search job that initiated this table."
                                              }
                                            },
                                            "totalRetentionInDays": {
                                              "type": "int",
                                              "defaultValue": -1,
                                              "minValue": -1,
                                              "maxValue": 2555,
                                              "metadata": {
                                                "description": "Optional. The table total retention in days, between 4 and 2555. Setting this property to -1 will default to table retention."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Log Analytics Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
                                              "Log Analytics Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '73c42c96-874c-492b-b04d-ab87d138a893')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
                                              "Monitoring Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "workspace": {
                                              "existing": true,
                                              "type": "Microsoft.OperationalInsights/workspaces",
                                              "apiVersion": "2022-10-01",
                                              "name": "[parameters('workspaceName')]"
                                            },
                                            "table": {
                                              "type": "Microsoft.OperationalInsights/workspaces/tables",
                                              "apiVersion": "2022-10-01",
                                              "name": "[format('{0}/{1}', parameters('workspaceName'), parameters('name'))]",
                                              "properties": {
                                                "plan": "[parameters('plan')]",
                                                "restoredLogs": "[parameters('restoredLogs')]",
                                                "retentionInDays": "[parameters('retentionInDays')]",
                                                "schema": "[parameters('schema')]",
                                                "searchResults": "[parameters('searchResults')]",
                                                "totalRetentionInDays": "[parameters('totalRetentionInDays')]"
                                              },
                                              "dependsOn": [
                                                "workspace"
                                              ]
                                            },
                                            "table_roleAssignments": {
                                              "copy": {
                                                "name": "table_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.OperationalInsights/workspaces/{0}/tables/{1}', parameters('workspaceName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "table"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the table."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the table."
                                              },
                                              "value": "[resourceId('Microsoft.OperationalInsights/workspaces/tables', parameters('workspaceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the resource group the table was created in."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    },
                                    "logAnalyticsWorkspace_solutions": {
                                      "copy": {
                                        "name": "logAnalyticsWorkspace_solutions",
                                        "count": "[length(parameters('gallerySolutions'))]"
                                      },
                                      "condition": "[not(empty(parameters('gallerySolutions')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-LAW-Solution-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('gallerySolutions')[copyIndex()].name]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "logAnalyticsWorkspaceName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "product": {
                                            "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'product')]"
                                          },
                                          "publisher": {
                                            "value": "[tryGet(parameters('gallerySolutions')[copyIndex()], 'publisher')]"
                                          },
                                          "enableTelemetry": {
                                            "value": "[coalesce(tryGet(parameters('gallerySolutions')[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.23.1.45101",
                                              "templateHash": "18444780972506374592"
                                            },
                                            "name": "Operations Management Solutions",
                                            "description": "This module deploys an Operations Management Solution.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the solution. For Microsoft published gallery solution the target solution resource name will be composed as `{name}({logAnalyticsWorkspaceName})`."
                                              }
                                            },
                                            "logAnalyticsWorkspaceName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the Log Analytics workspace where the solution will be deployed/enabled."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all resources."
                                              }
                                            },
                                            "product": {
                                              "type": "string",
                                              "defaultValue": "OMSGallery",
                                              "metadata": {
                                                "description": "Optional. The product of the deployed solution. For Microsoft published gallery solution it should be `OMSGallery` and the target solution resource product will be composed as `OMSGallery/{name}`. For third party solution, it can be anything. This is case sensitive."
                                              }
                                            },
                                            "publisher": {
                                              "type": "string",
                                              "defaultValue": "Microsoft",
                                              "metadata": {
                                                "description": "Optional. The publisher name of the deployed solution. For Microsoft published gallery solution, it is `Microsoft`."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "solutionName": "[if(equals(parameters('publisher'), 'Microsoft'), format('{0}({1})', parameters('name'), parameters('logAnalyticsWorkspaceName')), parameters('name'))]",
                                            "solutionProduct": "[if(equals(parameters('publisher'), 'Microsoft'), format('OMSGallery/{0}', parameters('name')), parameters('product'))]"
                                          },
                                          "resources": [
                                            {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2023-07-01",
                                              "name": "[format('46d3xbcp.res.operationsmanagement-solution.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "Microsoft.OperationsManagement/solutions",
                                              "apiVersion": "2015-11-01-preview",
                                              "name": "[variables('solutionName')]",
                                              "location": "[parameters('location')]",
                                              "properties": {
                                                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
                                              },
                                              "plan": {
                                                "name": "[variables('solutionName')]",
                                                "promotionCode": "",
                                                "product": "[variables('solutionProduct')]",
                                                "publisher": "[parameters('publisher')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed solution."
                                              },
                                              "value": "[variables('solutionName')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed solution."
                                              },
                                              "value": "[resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group where the solution is deployed."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference(resourceId('Microsoft.OperationsManagement/solutions', variables('solutionName')), '2015-11-01-preview', 'full').location]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "logAnalyticsWorkspace"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed log analytics workspace."
                                      },
                                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed log analytics workspace."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed log analytics workspace."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "logAnalyticsWorkspaceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The ID associated with the workspace."
                                      },
                                      "value": "[reference('logAnalyticsWorkspace').customerId]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('logAnalyticsWorkspace', '2022-10-01', 'full').location]"
                                    },
                                    "systemAssignedMIPrincipalId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The principal ID of the system assigned identity."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(reference('logAnalyticsWorkspace', '2022-10-01', 'full'), 'identity'), 'principalId'), '')]"
                                    }
                                  }
                                }
                              }
                            },
                            "applicationInsights": {
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "applicationinsights",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "logAnalyticsWorkspaceResourceId": {
                                    "value": "[reference('logAnalytics').outputs.resourceId.value]"
                                  },
                                  "name": {
                                    "value": "[parameters('applicationInsightsName')]"
                                  },
                                  "location": {
                                    "value": "[parameters('location')]"
                                  },
                                  "tags": {
                                    "value": "[parameters('tags')]"
                                  },
                                  "dashboardName": {
                                    "value": "[parameters('applicationInsightsDashboardName')]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[parameters('enableTelemetry')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.29.47.4906",
                                      "templateHash": "17156187352453961206"
                                    },
                                    "name": "Application Insights Components",
                                    "description": "Creates an Application Insights instance based on an existing Log Analytics workspace.\n\n**Note:** This module is not intended for broad, generic use, as it was designed to cater for the requirements of the AZD CLI product. Feature requests and bug fix requests are welcome if they support the development of the AZD CLI but may not be incorporated if they aim to make this module more generic than what it needs to be for its primary use case.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource insights components name."
                                      }
                                    },
                                    "dashboardName": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The resource portal dashboards name."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "logAnalyticsWorkspaceResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The resource ID of the loganalytics workspace."
                                      }
                                    },
                                    "kind": {
                                      "type": "string",
                                      "defaultValue": "web",
                                      "metadata": {
                                        "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                                      }
                                    },
                                    "applicationType": {
                                      "type": "string",
                                      "defaultValue": "web",
                                      "allowedValues": [
                                        "web",
                                        "other"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Application type."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                        "description": "Optional. Tags of the resource."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.ptn.azd-insightsdashboard.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "applicationInsights": {
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-appinsights', uniqueString(deployment().name, parameters('location')))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('name')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "tags": {
                                            "value": "[parameters('tags')]"
                                          },
                                          "kind": {
                                            "value": "[parameters('kind')]"
                                          },
                                          "applicationType": {
                                            "value": "[parameters('applicationType')]"
                                          },
                                          "workspaceResourceId": {
                                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "10653241142071426932"
                                            },
                                            "name": "Application Insights",
                                            "description": "This component deploys an Application Insights instance.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                    }
                                                  },
                                                  "roleDefinitionIdOrName": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                    }
                                                  },
                                                  "principalId": {
                                                    "type": "string",
                                                    "metadata": {
                                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                    }
                                                  },
                                                  "principalType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "Device",
                                                      "ForeignGroup",
                                                      "Group",
                                                      "ServicePrincipal",
                                                      "User"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The principal type of the assigned principal ID."
                                                    }
                                                  },
                                                  "description": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The description of the role assignment."
                                                    }
                                                  },
                                                  "condition": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                    }
                                                  },
                                                  "conditionVersion": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "2.0"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Version of the condition."
                                                    }
                                                  },
                                                  "delegatedManagedIdentityResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            },
                                            "diagnosticSettingType": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "name": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of diagnostic setting."
                                                    }
                                                  },
                                                  "logCategoriesAndGroups": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                          }
                                                        },
                                                        "categoryGroup": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                                    }
                                                  },
                                                  "metricCategories": {
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "category": {
                                                          "type": "string",
                                                          "metadata": {
                                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                          }
                                                        },
                                                        "enabled": {
                                                          "type": "bool",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                                    }
                                                  },
                                                  "logAnalyticsDestinationType": {
                                                    "type": "string",
                                                    "allowedValues": [
                                                      "AzureDiagnostics",
                                                      "Dedicated"
                                                    ],
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                                    }
                                                  },
                                                  "workspaceResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "storageAccountResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "eventHubAuthorizationRuleResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                                    }
                                                  },
                                                  "eventHubName": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                                    }
                                                  },
                                                  "marketplacePartnerResourceId": {
                                                    "type": "string",
                                                    "nullable": true,
                                                    "metadata": {
                                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                                    }
                                                  }
                                                }
                                              },
                                              "nullable": true
                                            }
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the Application Insights."
                                              }
                                            },
                                            "applicationType": {
                                              "type": "string",
                                              "defaultValue": "web",
                                              "allowedValues": [
                                                "web",
                                                "other"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Application type."
                                              }
                                            },
                                            "workspaceResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Resource ID of the log analytics workspace which the data will be ingested to. This property is required to create an application with this API version. Applications from older versions will not have this property."
                                              }
                                            },
                                            "disableIpMasking": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Disable IP masking. Default value is set to true."
                                              }
                                            },
                                            "disableLocalAuth": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Disable Non-AAD based Auth. Default value is set to false."
                                              }
                                            },
                                            "forceCustomerStorageForProfiler": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Force users to create their own storage account for profiler and debugger."
                                              }
                                            },
                                            "linkedStorageAccountResourceId": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Linked storage account resource ID."
                                              }
                                            },
                                            "publicNetworkAccessForIngestion": {
                                              "type": "string",
                                              "defaultValue": "Enabled",
                                              "allowedValues": [
                                                "Enabled",
                                                "Disabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The network access type for accessing Application Insights ingestion. - Enabled or Disabled."
                                              }
                                            },
                                            "publicNetworkAccessForQuery": {
                                              "type": "string",
                                              "defaultValue": "Enabled",
                                              "allowedValues": [
                                                "Enabled",
                                                "Disabled"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The network access type for accessing Application Insights query. - Enabled or Disabled."
                                              }
                                            },
                                            "retentionInDays": {
                                              "type": "int",
                                              "defaultValue": 365,
                                              "allowedValues": [
                                                30,
                                                60,
                                                90,
                                                120,
                                                180,
                                                270,
                                                365,
                                                550,
                                                730
                                              ],
                                              "metadata": {
                                                "description": "Optional. Retention period in days."
                                              }
                                            },
                                            "samplingPercentage": {
                                              "type": "int",
                                              "defaultValue": 100,
                                              "minValue": 0,
                                              "maxValue": 100,
                                              "metadata": {
                                                "description": "Optional. Percentage of the data produced by the application being monitored that is being sampled for Application Insights telemetry."
                                              }
                                            },
                                            "kind": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. The kind of application that this component refers to, used to customize UI. This value is a freeform string, values should typically be one of the following: web, ios, other, store, java, phone."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            },
                                            "roleAssignments": {
                                              "$ref": "#/definitions/roleAssignmentType",
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Tags of the resource."
                                              }
                                            },
                                            "enableTelemetry": {
                                              "type": "bool",
                                              "defaultValue": true,
                                              "metadata": {
                                                "description": "Optional. Enable/Disable usage telemetry for module."
                                              }
                                            },
                                            "diagnosticSettings": {
                                              "$ref": "#/definitions/diagnosticSettingType",
                                              "metadata": {
                                                "description": "Optional. The diagnostic settings of the service."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
                                              "Monitoring Metrics Publisher": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '3913510d-42f4-4e42-8a64-420c390055eb')]",
                                              "Application Insights Component Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ae349356-3a1b-4a5e-921d-050484c6347e')]",
                                              "Application Insights Snapshot Debugger": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '08954f03-6346-4c2e-81c0-ec3a5cfae23b')]",
                                              "Monitoring Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]"
                                            }
                                          },
                                          "resources": {
                                            "avmTelemetry": {
                                              "condition": "[parameters('enableTelemetry')]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2024-03-01",
                                              "name": "[format('46d3xbcp.res.insights-component.{0}.{1}', replace('0.4.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                              "properties": {
                                                "mode": "Incremental",
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "resources": [],
                                                  "outputs": {
                                                    "telemetry": {
                                                      "type": "String",
                                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "appInsights": {
                                              "type": "Microsoft.Insights/components",
                                              "apiVersion": "2020-02-02",
                                              "name": "[parameters('name')]",
                                              "location": "[parameters('location')]",
                                              "tags": "[parameters('tags')]",
                                              "kind": "[parameters('kind')]",
                                              "properties": {
                                                "Application_Type": "[parameters('applicationType')]",
                                                "DisableIpMasking": "[parameters('disableIpMasking')]",
                                                "DisableLocalAuth": "[parameters('disableLocalAuth')]",
                                                "ForceCustomerStorageForProfiler": "[parameters('forceCustomerStorageForProfiler')]",
                                                "WorkspaceResourceId": "[parameters('workspaceResourceId')]",
                                                "publicNetworkAccessForIngestion": "[parameters('publicNetworkAccessForIngestion')]",
                                                "publicNetworkAccessForQuery": "[parameters('publicNetworkAccessForQuery')]",
                                                "RetentionInDays": "[parameters('retentionInDays')]",
                                                "SamplingPercentage": "[parameters('samplingPercentage')]"
                                              }
                                            },
                                            "appInsights_roleAssignments": {
                                              "copy": {
                                                "name": "appInsights_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Insights/components', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "appInsights"
                                              ]
                                            },
                                            "appInsights_diagnosticSettings": {
                                              "copy": {
                                                "name": "appInsights_diagnosticSettings",
                                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                              },
                                              "type": "Microsoft.Insights/diagnosticSettings",
                                              "apiVersion": "2021-05-01-preview",
                                              "scope": "[format('Microsoft.Insights/components/{0}', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                              "properties": {
                                                "copy": [
                                                  {
                                                    "name": "metrics",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                                    "input": {
                                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                                      "timeGrain": null
                                                    }
                                                  },
                                                  {
                                                    "name": "logs",
                                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                                    "input": {
                                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                                    }
                                                  }
                                                ],
                                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                              },
                                              "dependsOn": [
                                                "appInsights"
                                              ]
                                            },
                                            "linkedStorageAccount": {
                                              "condition": "[not(empty(parameters('linkedStorageAccountResourceId')))]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-appInsights-linkedStorageAccount', uniqueString(deployment().name, parameters('location')))]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "appInsightsName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "storageAccountResourceId": {
                                                    "value": "[parameters('linkedStorageAccountResourceId')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.29.47.4906",
                                                      "templateHash": "216781367921725873"
                                                    },
                                                    "name": "Application Insights Linked Storage Account",
                                                    "description": "This component deploys an Application Insights Linked Storage Account.",
                                                    "owner": "Azure/module-maintainers"
                                                  },
                                                  "parameters": {
                                                    "appInsightsName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Application Insights instance. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "storageAccountResourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. Linked storage account resource ID."
                                                      }
                                                    }
                                                  },
                                                  "resources": [
                                                    {
                                                      "type": "microsoft.insights/components/linkedStorageAccounts",
                                                      "apiVersion": "2020-03-01-preview",
                                                      "name": "[format('{0}/{1}', parameters('appInsightsName'), 'ServiceProfiler')]",
                                                      "properties": {
                                                        "linkedStorageAccount": "[parameters('storageAccountResourceId')]"
                                                      }
                                                    }
                                                  ],
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the Linked Storage Account."
                                                      },
                                                      "value": "ServiceProfiler"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the Linked Storage Account."
                                                      },
                                                      "value": "[resourceId('microsoft.insights/components/linkedStorageAccounts', parameters('appInsightsName'), 'ServiceProfiler')]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group the agent pool was deployed into."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "appInsights"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the application insights component."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the application insights component."
                                              },
                                              "value": "[resourceId('Microsoft.Insights/components', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the application insights component was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            },
                                            "applicationId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The application ID of the application insights component."
                                              },
                                              "value": "[reference('appInsights').AppId]"
                                            },
                                            "location": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The location the resource was deployed into."
                                              },
                                              "value": "[reference('appInsights', '2020-02-02', 'full').location]"
                                            },
                                            "instrumentationKey": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Application Insights Instrumentation key. A read-only value that applications can use to identify the destination for all telemetry sent to Azure Application Insights. This value will be supplied upon construction of each new Application Insights component."
                                              },
                                              "value": "[reference('appInsights').InstrumentationKey]"
                                            },
                                            "connectionString": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Application Insights Connection String."
                                              },
                                              "value": "[reference('appInsights').ConnectionString]"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "applicationInsightsDashboard": {
                                      "condition": "[not(empty(parameters('dashboardName')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "application-insights-dashboard",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('dashboardName')]"
                                          },
                                          "location": {
                                            "value": "[parameters('location')]"
                                          },
                                          "applicationInsightsName": {
                                            "value": "[reference('applicationInsights').outputs.name.value]"
                                          },
                                          "applicationInsightsResourceId": {
                                            "value": "[reference('applicationInsights').outputs.resourceId.value]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.29.47.4906",
                                              "templateHash": "9856731218551847403"
                                            },
                                            "name": "Azure Portal Dashboard",
                                            "description": "Creates a dashboard for an Application Insights instance.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The portal dashboard name."
                                              }
                                            },
                                            "applicationInsightsName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource insights components name."
                                              }
                                            },
                                            "applicationInsightsResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource insights components ID."
                                              }
                                            },
                                            "location": {
                                              "type": "string",
                                              "defaultValue": "[resourceGroup().location]",
                                              "metadata": {
                                                "description": "Optional. Location for all Resources."
                                              }
                                            },
                                            "tags": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "example": "  {\n      \"key1\": \"value1\"\n      \"key2\": \"value2\"\n  }\n  ",
                                                "description": "Optional. Tags of the resource."
                                              }
                                            }
                                          },
                                          "resources": {
                                            "dashboard": {
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "dashboard-deployment",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "name": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "location": {
                                                    "value": "[parameters('location')]"
                                                  },
                                                  "tags": {
                                                    "value": "[parameters('tags')]"
                                                  },
                                                  "lenses": {
                                                    "value": [
                                                      {
                                                        "order": 0,
                                                        "parts": [
                                                          {
                                                            "position": {
                                                              "x": 0,
                                                              "y": 0,
                                                              "colSpan": 2,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "id",
                                                                  "value": "[parameters('applicationInsightsResourceId')]"
                                                                },
                                                                {
                                                                  "name": "Version",
                                                                  "value": "1.0"
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/AspNetOverviewPinnedPart",
                                                              "asset": {
                                                                "idInputName": "id",
                                                                "type": "ApplicationInsights"
                                                              },
                                                              "defaultMenuItemId": "overview"
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 2,
                                                              "y": 0,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ComponentId",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "Version",
                                                                  "value": "1.0"
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/ProactiveDetectionAsyncPart",
                                                              "asset": {
                                                                "idInputName": "ComponentId",
                                                                "type": "ApplicationInsights"
                                                              },
                                                              "defaultMenuItemId": "ProactiveDetection"
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 3,
                                                              "y": 0,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ComponentId",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "ResourceId",
                                                                  "value": "[parameters('applicationInsightsResourceId')]"
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/QuickPulseButtonSmallPart",
                                                              "asset": {
                                                                "idInputName": "ComponentId",
                                                                "type": "ApplicationInsights"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 4,
                                                              "y": 0,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ComponentId",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "TimeContext",
                                                                  "value": {
                                                                    "durationMs": 86400000,
                                                                    "endTime": null,
                                                                    "createdTime": "2018-05-04T01:20:33.345Z",
                                                                    "isInitialTime": true,
                                                                    "grain": 1,
                                                                    "useDashboardTimeRange": false
                                                                  }
                                                                },
                                                                {
                                                                  "name": "Version",
                                                                  "value": "1.0"
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/AvailabilityNavButtonPart",
                                                              "asset": {
                                                                "idInputName": "ComponentId",
                                                                "type": "ApplicationInsights"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 5,
                                                              "y": 0,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ComponentId",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "TimeContext",
                                                                  "value": {
                                                                    "durationMs": 86400000,
                                                                    "endTime": null,
                                                                    "createdTime": "2018-05-08T18:47:35.237Z",
                                                                    "isInitialTime": true,
                                                                    "grain": 1,
                                                                    "useDashboardTimeRange": false
                                                                  }
                                                                },
                                                                {
                                                                  "name": "ConfigurationId",
                                                                  "value": "78ce933e-e864-4b05-a27b-71fd55a6afad"
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/AppMapButtonPart",
                                                              "asset": {
                                                                "idInputName": "ComponentId",
                                                                "type": "ApplicationInsights"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 0,
                                                              "y": 1,
                                                              "colSpan": 3,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [],
                                                              "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                              "settings": {
                                                                "content": {
                                                                  "settings": {
                                                                    "content": "# Usage",
                                                                    "title": "",
                                                                    "subtitle": ""
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 3,
                                                              "y": 1,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ComponentId",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "TimeContext",
                                                                  "value": {
                                                                    "durationMs": 86400000,
                                                                    "endTime": null,
                                                                    "createdTime": "2018-05-04T01:22:35.782Z",
                                                                    "isInitialTime": true,
                                                                    "grain": 1,
                                                                    "useDashboardTimeRange": false
                                                                  }
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/UsageUsersOverviewPart",
                                                              "asset": {
                                                                "idInputName": "ComponentId",
                                                                "type": "ApplicationInsights"
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 4,
                                                              "y": 1,
                                                              "colSpan": 3,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [],
                                                              "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                              "settings": {
                                                                "content": {
                                                                  "settings": {
                                                                    "content": "# Reliability",
                                                                    "title": "",
                                                                    "subtitle": ""
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 7,
                                                              "y": 1,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ResourceId",
                                                                  "value": "[parameters('applicationInsightsResourceId')]"
                                                                },
                                                                {
                                                                  "name": "DataModel",
                                                                  "value": {
                                                                    "version": "1.0.0",
                                                                    "timeContext": {
                                                                      "durationMs": 86400000,
                                                                      "createdTime": "2018-05-04T23:42:40.072Z",
                                                                      "isInitialTime": false,
                                                                      "grain": 1,
                                                                      "useDashboardTimeRange": false
                                                                    }
                                                                  },
                                                                  "isOptional": true
                                                                },
                                                                {
                                                                  "name": "ConfigurationId",
                                                                  "value": "8a02f7bf-ac0f-40e1-afe9-f0e72cfee77f",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/CuratedBladeFailuresPinnedPart",
                                                              "isAdapter": true,
                                                              "asset": {
                                                                "idInputName": "ResourceId",
                                                                "type": "ApplicationInsights"
                                                              },
                                                              "defaultMenuItemId": "failures"
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 8,
                                                              "y": 1,
                                                              "colSpan": 3,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [],
                                                              "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                              "settings": {
                                                                "content": {
                                                                  "settings": {
                                                                    "content": "# Responsiveness\r\n",
                                                                    "title": "",
                                                                    "subtitle": ""
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 11,
                                                              "y": 1,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ResourceId",
                                                                  "value": "[parameters('applicationInsightsResourceId')]"
                                                                },
                                                                {
                                                                  "name": "DataModel",
                                                                  "value": {
                                                                    "version": "1.0.0",
                                                                    "timeContext": {
                                                                      "durationMs": 86400000,
                                                                      "createdTime": "2018-05-04T23:43:37.804Z",
                                                                      "isInitialTime": false,
                                                                      "grain": 1,
                                                                      "useDashboardTimeRange": false
                                                                    }
                                                                  },
                                                                  "isOptional": true
                                                                },
                                                                {
                                                                  "name": "ConfigurationId",
                                                                  "value": "2a8ede4f-2bee-4b9c-aed9-2db0e8a01865",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/CuratedBladePerformancePinnedPart",
                                                              "isAdapter": true,
                                                              "asset": {
                                                                "idInputName": "ResourceId",
                                                                "type": "ApplicationInsights"
                                                              },
                                                              "defaultMenuItemId": "performance"
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 12,
                                                              "y": 1,
                                                              "colSpan": 3,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [],
                                                              "type": "Extension/HubsExtension/PartType/MarkdownPart",
                                                              "settings": {
                                                                "content": {
                                                                  "settings": {
                                                                    "content": "# Browser",
                                                                    "title": "",
                                                                    "subtitle": ""
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 15,
                                                              "y": 1,
                                                              "colSpan": 1,
                                                              "rowSpan": 1
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "ComponentId",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "MetricsExplorerJsonDefinitionId",
                                                                  "value": "BrowserPerformanceTimelineMetrics"
                                                                },
                                                                {
                                                                  "name": "TimeContext",
                                                                  "value": {
                                                                    "durationMs": 86400000,
                                                                    "createdTime": "2018-05-08T12:16:27.534Z",
                                                                    "isInitialTime": false,
                                                                    "grain": 1,
                                                                    "useDashboardTimeRange": false
                                                                  }
                                                                },
                                                                {
                                                                  "name": "CurrentFilter",
                                                                  "value": {
                                                                    "eventTypes": [
                                                                      4,
                                                                      1,
                                                                      3,
                                                                      5,
                                                                      2,
                                                                      6,
                                                                      13
                                                                    ],
                                                                    "typeFacets": {},
                                                                    "isPermissive": false
                                                                  }
                                                                },
                                                                {
                                                                  "name": "id",
                                                                  "value": {
                                                                    "Name": "[parameters('applicationInsightsName')]",
                                                                    "SubscriptionId": "[subscription().subscriptionId]",
                                                                    "ResourceGroup": "[resourceGroup().name]"
                                                                  }
                                                                },
                                                                {
                                                                  "name": "Version",
                                                                  "value": "1.0"
                                                                }
                                                              ],
                                                              "type": "Extension/AppInsightsExtension/PartType/MetricsExplorerBladePinnedPart",
                                                              "asset": {
                                                                "idInputName": "ComponentId",
                                                                "type": "ApplicationInsights"
                                                              },
                                                              "defaultMenuItemId": "browser"
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 0,
                                                              "y": 2,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "sessions/count",
                                                                          "aggregationType": 5,
                                                                          "namespace": "microsoft.insights/components/kusto",
                                                                          "metricVisualization": {
                                                                            "displayName": "Sessions",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        },
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "users/count",
                                                                          "aggregationType": 5,
                                                                          "namespace": "microsoft.insights/components/kusto",
                                                                          "metricVisualization": {
                                                                            "displayName": "Users",
                                                                            "color": "#7E58FF"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Unique sessions and users",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      },
                                                                      "openBladeOnClick": {
                                                                        "openBlade": true,
                                                                        "destinationBlade": {
                                                                          "extensionName": "HubsExtension",
                                                                          "bladeName": "ResourceMenuBlade",
                                                                          "parameters": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]",
                                                                            "menuid": "segmentationUsers"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 4,
                                                              "y": 2,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "requests/failed",
                                                                          "aggregationType": 7,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Failed requests",
                                                                            "color": "#EC008C"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Failed requests",
                                                                      "visualization": {
                                                                        "chartType": 3,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      },
                                                                      "openBladeOnClick": {
                                                                        "openBlade": true,
                                                                        "destinationBlade": {
                                                                          "extensionName": "HubsExtension",
                                                                          "bladeName": "ResourceMenuBlade",
                                                                          "parameters": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]",
                                                                            "menuid": "failures"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 8,
                                                              "y": 2,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "requests/duration",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Server response time",
                                                                            "color": "#00BCF2"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Server response time",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      },
                                                                      "openBladeOnClick": {
                                                                        "openBlade": true,
                                                                        "destinationBlade": {
                                                                          "extensionName": "HubsExtension",
                                                                          "bladeName": "ResourceMenuBlade",
                                                                          "parameters": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]",
                                                                            "menuid": "performance"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 12,
                                                              "y": 2,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "browserTimings/networkDuration",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Page load network connect time",
                                                                            "color": "#7E58FF"
                                                                          }
                                                                        },
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "browserTimings/processingDuration",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Client processing time",
                                                                            "color": "#44F1C8"
                                                                          }
                                                                        },
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "browserTimings/sendDuration",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Send request time",
                                                                            "color": "#EB9371"
                                                                          }
                                                                        },
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "browserTimings/receiveDuration",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Receiving response time",
                                                                            "color": "#0672F1"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Average page load time breakdown",
                                                                      "visualization": {
                                                                        "chartType": 3,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 0,
                                                              "y": 5,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "availabilityResults/availabilityPercentage",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Availability",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Average availability",
                                                                      "visualization": {
                                                                        "chartType": 3,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      },
                                                                      "openBladeOnClick": {
                                                                        "openBlade": true,
                                                                        "destinationBlade": {
                                                                          "extensionName": "HubsExtension",
                                                                          "bladeName": "ResourceMenuBlade",
                                                                          "parameters": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]",
                                                                            "menuid": "availability"
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 4,
                                                              "y": 5,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "exceptions/server",
                                                                          "aggregationType": 7,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Server exceptions",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        },
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "dependencies/failed",
                                                                          "aggregationType": 7,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Dependency failures",
                                                                            "color": "#7E58FF"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Server exceptions and Dependency failures",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 8,
                                                              "y": 5,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "performanceCounters/processorCpuPercentage",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Processor time",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        },
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "performanceCounters/processCpuPercentage",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Process CPU",
                                                                            "color": "#7E58FF"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Average processor and process CPU utilization",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 12,
                                                              "y": 5,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "exceptions/browser",
                                                                          "aggregationType": 7,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Browser exceptions",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Browser exceptions",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 0,
                                                              "y": 8,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "availabilityResults/count",
                                                                          "aggregationType": 7,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Availability test results count",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Availability test results count",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 4,
                                                              "y": 8,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "performanceCounters/processIOBytesPerSecond",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Process IO rate",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Average process I/O rate",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          },
                                                          {
                                                            "position": {
                                                              "x": 8,
                                                              "y": 8,
                                                              "colSpan": 4,
                                                              "rowSpan": 3
                                                            },
                                                            "metadata": {
                                                              "inputs": [
                                                                {
                                                                  "name": "options",
                                                                  "value": {
                                                                    "chart": {
                                                                      "metrics": [
                                                                        {
                                                                          "resourceMetadata": {
                                                                            "id": "[parameters('applicationInsightsResourceId')]"
                                                                          },
                                                                          "name": "performanceCounters/memoryAvailableBytes",
                                                                          "aggregationType": 4,
                                                                          "namespace": "microsoft.insights/components",
                                                                          "metricVisualization": {
                                                                            "displayName": "Available memory",
                                                                            "color": "#47BDF5"
                                                                          }
                                                                        }
                                                                      ],
                                                                      "title": "Average available memory",
                                                                      "visualization": {
                                                                        "chartType": 2,
                                                                        "legendVisualization": {
                                                                          "isVisible": true,
                                                                          "position": 2,
                                                                          "hideSubtitle": false
                                                                        },
                                                                        "axisVisualization": {
                                                                          "x": {
                                                                            "isVisible": true,
                                                                            "axisType": 2
                                                                          },
                                                                          "y": {
                                                                            "isVisible": true,
                                                                            "axisType": 1
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                },
                                                                {
                                                                  "name": "sharedTimeRange",
                                                                  "isOptional": true
                                                                }
                                                              ],
                                                              "type": "Extension/HubsExtension/PartType/MonitorChartPart",
                                                              "settings": {}
                                                            }
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "languageVersion": "2.0",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.28.1.47646",
                                                      "templateHash": "12676032921679464791"
                                                    },
                                                    "name": "Portal Dashboards",
                                                    "description": "This module deploys a Portal Dashboard.",
                                                    "owner": "Azure/module-maintainers"
                                                  },
                                                  "definitions": {
                                                    "roleAssignmentType": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "roleDefinitionIdOrName": {
                                                            "type": "string",
                                                            "metadata": {
                                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                            }
                                                          },
                                                          "principalId": {
                                                            "type": "string",
                                                            "metadata": {
                                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                            }
                                                          },
                                                          "principalType": {
                                                            "type": "string",
                                                            "allowedValues": [
                                                              "Device",
                                                              "ForeignGroup",
                                                              "Group",
                                                              "ServicePrincipal",
                                                              "User"
                                                            ],
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The principal type of the assigned principal ID."
                                                            }
                                                          },
                                                          "description": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The description of the role assignment."
                                                            }
                                                          },
                                                          "condition": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                            }
                                                          },
                                                          "conditionVersion": {
                                                            "type": "string",
                                                            "allowedValues": [
                                                              "2.0"
                                                            ],
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. Version of the condition."
                                                            }
                                                          },
                                                          "delegatedManagedIdentityResourceId": {
                                                            "type": "string",
                                                            "nullable": true,
                                                            "metadata": {
                                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                            }
                                                          }
                                                        }
                                                      },
                                                      "nullable": true
                                                    },
                                                    "lockType": {
                                                      "type": "object",
                                                      "properties": {
                                                        "name": {
                                                          "type": "string",
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Specify the name of lock."
                                                          }
                                                        },
                                                        "kind": {
                                                          "type": "string",
                                                          "allowedValues": [
                                                            "CanNotDelete",
                                                            "None",
                                                            "ReadOnly"
                                                          ],
                                                          "nullable": true,
                                                          "metadata": {
                                                            "description": "Optional. Specify the type of lock."
                                                          }
                                                        }
                                                      },
                                                      "nullable": true
                                                    }
                                                  },
                                                  "parameters": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. Name of the dashboard to create."
                                                      }
                                                    },
                                                    "location": {
                                                      "type": "string",
                                                      "defaultValue": "[resourceGroup().location]",
                                                      "metadata": {
                                                        "description": "Optional. Location for all Resources."
                                                      }
                                                    },
                                                    "enableTelemetry": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                                      }
                                                    },
                                                    "tags": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. Tags of the resource."
                                                      }
                                                    },
                                                    "roleAssignments": {
                                                      "$ref": "#/definitions/roleAssignmentType",
                                                      "metadata": {
                                                        "description": "Optional. Array of role assignments to create."
                                                      }
                                                    },
                                                    "lock": {
                                                      "$ref": "#/definitions/lockType",
                                                      "metadata": {
                                                        "description": "Optional. The lock settings of the service."
                                                      }
                                                    },
                                                    "lenses": {
                                                      "type": "array",
                                                      "items": {
                                                        "type": "object"
                                                      },
                                                      "defaultValue": [],
                                                      "metadata": {
                                                        "description": "Optional. The dashboard lenses."
                                                      }
                                                    },
                                                    "metadata": {
                                                      "type": "object",
                                                      "nullable": true,
                                                      "metadata": {
                                                        "description": "Optional. The dashboard metadata."
                                                      }
                                                    }
                                                  },
                                                  "variables": {
                                                    "builtInRoleNames": {
                                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                                    }
                                                  },
                                                  "resources": {
                                                    "avmTelemetry": {
                                                      "condition": "[parameters('enableTelemetry')]",
                                                      "type": "Microsoft.Resources/deployments",
                                                      "apiVersion": "2023-07-01",
                                                      "name": "[format('46d3xbcp.res.portal-dashboard.{0}.{1}', replace('0.1.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                                      "properties": {
                                                        "mode": "Incremental",
                                                        "template": {
                                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                          "contentVersion": "1.0.0.0",
                                                          "resources": [],
                                                          "outputs": {
                                                            "telemetry": {
                                                              "type": "String",
                                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                                            }
                                                          }
                                                        }
                                                      }
                                                    },
                                                    "dashboard": {
                                                      "type": "Microsoft.Portal/dashboards",
                                                      "apiVersion": "2020-09-01-preview",
                                                      "name": "[parameters('name')]",
                                                      "location": "[parameters('location')]",
                                                      "tags": "[parameters('tags')]",
                                                      "properties": {
                                                        "lenses": "[parameters('lenses')]",
                                                        "metadata": "[parameters('metadata')]"
                                                      }
                                                    },
                                                    "dashboard_roleAssignments": {
                                                      "copy": {
                                                        "name": "dashboard_roleAssignments",
                                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                                      },
                                                      "type": "Microsoft.Authorization/roleAssignments",
                                                      "apiVersion": "2022-04-01",
                                                      "scope": "[format('Microsoft.Portal/dashboards/{0}', parameters('name'))]",
                                                      "name": "[guid(resourceId('Microsoft.Portal/dashboards', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                                      "properties": {
                                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                                      },
                                                      "dependsOn": [
                                                        "dashboard"
                                                      ]
                                                    },
                                                    "dashboard_lock": {
                                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                                      "type": "Microsoft.Authorization/locks",
                                                      "apiVersion": "2020-05-01",
                                                      "scope": "[format('Microsoft.Portal/dashboards/{0}', parameters('name'))]",
                                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                                      "properties": {
                                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                                      },
                                                      "dependsOn": [
                                                        "dashboard"
                                                      ]
                                                    }
                                                  },
                                                  "outputs": {
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the dashboard."
                                                      },
                                                      "value": "[resourceId('Microsoft.Portal/dashboards', parameters('name'))]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the resource group the dashboard was created in."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the dashboard."
                                                      },
                                                      "value": "[parameters('name')]"
                                                    },
                                                    "location": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The location the dashboard was deployed into."
                                                      },
                                                      "value": "[reference('dashboard', '2020-09-01-preview', 'full').location]"
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "dashboardResourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the dashboard."
                                              },
                                              "value": "[reference('dashboard').outputs.resourceId.value]"
                                            },
                                            "dashboardName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource name of the dashboard."
                                              },
                                              "value": "[reference('dashboard').outputs.name.value]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "applicationInsights"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the application insights components were deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "applicationInsightsName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the application insights."
                                      },
                                      "value": "[reference('applicationInsights').outputs.name.value]"
                                    },
                                    "dashboardName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource name of the dashboard."
                                      },
                                      "value": "[if(not(empty(parameters('dashboardName'))), reference('applicationInsightsDashboard').outputs.dashboardName.value, '')]"
                                    },
                                    "applicationInsightsResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the application insights."
                                      },
                                      "value": "[reference('applicationInsights').outputs.resourceId.value]"
                                    },
                                    "dashboardResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the dashboard."
                                      },
                                      "value": "[if(not(empty(parameters('dashboardName'))), reference('applicationInsightsDashboard').outputs.dashboardResourceId.value, '')]"
                                    },
                                    "applicationInsightsConnectionString": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The connection string of the application insights."
                                      },
                                      "value": "[reference('applicationInsights').outputs.connectionString.value]"
                                    },
                                    "applicationInsightsInstrumentationKey": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The instrumentation key of the application insights."
                                      },
                                      "value": "[reference('applicationInsights').outputs.instrumentationKey.value]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "logAnalytics"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the operational-insights monitoring was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "applicationInsightsConnectionString": {
                              "type": "string",
                              "metadata": {
                                "description": "The connection string of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.applicationInsightsConnectionString.value]"
                            },
                            "applicationInsightsResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.applicationInsightsResourceId.value]"
                            },
                            "applicationInsightsInstrumentationKey": {
                              "type": "string",
                              "metadata": {
                                "description": "The instrumentation key for the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.applicationInsightsInstrumentationKey.value]"
                            },
                            "applicationInsightsName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the application insights."
                              },
                              "value": "[reference('applicationInsights').outputs.applicationInsightsName.value]"
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the loganalytics workspace."
                              },
                              "value": "[reference('logAnalytics').outputs.resourceId.value]"
                            },
                            "logAnalyticsWorkspaceName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the log analytics workspace."
                              },
                              "value": "[reference('logAnalytics').outputs.name.value]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_MONITORING_LOG_ANALYTICS_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.logAnalyticsWorkspaceResourceId.value]"
                    },
                    "AZURE_RESOURCE_MONITORING_APP_INSIGHTS_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsResourceId.value]"
                    },
                    "AZURE_RESOURCE_MONITORING_APP_INSIGHTS_CONNECTION_STRING": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
                    },
                    "AZURE_RESOURCE_MONITORING_APP_INSIGHTS_NAME": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.applicationInsightsName.value]"
                    },
                    "AZURE_RESOURCE_MONITORING_LOG_ANALYTICS_WORKSPACE_NAME": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.logAnalyticsWorkspaceName.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "identity",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "abbrs": {
                    "value": "[variables('abbrs')]"
                  },
                  "resourceToken": {
                    "value": "[variables('resourceToken')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "12164821854730396940"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "abbrs": {
                      "type": "object"
                    },
                    "resourceToken": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "identity",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}-{1}', parameters('abbrs').managedIdentityUserAssignedIdentities, parameters('resourceToken'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.54.24096",
                              "templateHash": "998408512764899332"
                            },
                            "name": "User Assigned Identities",
                            "description": "This module deploys a User Assigned Identity.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "federatedIdentityCredentialsType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The name of the federated identity credential."
                                    }
                                  },
                                  "audiences": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "metadata": {
                                      "description": "Required. The list of audiences that can appear in the issued token."
                                    }
                                  },
                                  "issuer": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The URL of the issuer to be trusted."
                                    }
                                  },
                                  "subject": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The identifier of the external identity."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the User Assigned Identity."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "federatedIdentityCredentials": {
                              "$ref": "#/definitions/federatedIdentityCredentialsType",
                              "metadata": {
                                "description": "Optional. The federated identity credentials list to indicate which token from the external IdP should be trusted by your application. Federated identity credentials are supported on applications only. A maximum of 20 federated identity credentials can be added per application object."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Managed Identity Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e40ec5ca-96e0-45a2-b4ff-59039f2c2b59')]",
                              "Managed Identity Operator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f1a07417-d97a-45cb-824c-7a7467783830')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.managedidentity-userassignedidentity.{0}.{1}', replace('0.2.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "userAssignedIdentity": {
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]"
                            },
                            "userAssignedIdentity_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_roleAssignments": {
                              "copy": {
                                "name": "userAssignedIdentity_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ManagedIdentity/userAssignedIdentities/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            },
                            "userAssignedIdentity_federatedIdentityCredentials": {
                              "copy": {
                                "name": "userAssignedIdentity_federatedIdentityCredentials",
                                "count": "[length(coalesce(parameters('federatedIdentityCredentials'), createArray()))]",
                                "mode": "serial",
                                "batchSize": 1
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-UserMSI-FederatedIdentityCredential-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].name]"
                                  },
                                  "userAssignedIdentityName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "audiences": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].audiences]"
                                  },
                                  "issuer": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].issuer]"
                                  },
                                  "subject": {
                                    "value": "[coalesce(parameters('federatedIdentityCredentials'), createArray())[copyIndex()].subject]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.26.54.24096",
                                      "templateHash": "4317497001099502136"
                                    },
                                    "name": "User Assigned Identity Federated Identity Credential",
                                    "description": "This module deploys a User Assigned Identity Federated Identity Credential.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "userAssignedIdentityName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent user assigned identity. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "audiences": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The list of audiences that can appear in the issued token. Should be set to api://AzureADTokenExchange for Azure AD. It says what Microsoft identity platform should accept in the aud claim in the incoming token. This value represents Azure AD in your external identity provider and has no fixed value across identity providers - you might need to create a new application registration in your IdP to serve as the audience of this token."
                                      }
                                    },
                                    "issuer": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The URL of the issuer to be trusted. Must match the issuer claim of the external token being exchanged."
                                      }
                                    },
                                    "subject": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The identifier of the external software workload within the external identity provider. Like the audience value, it has no fixed format, as each IdP uses their own - sometimes a GUID, sometimes a colon delimited identifier, sometimes arbitrary strings. The value here must match the sub claim within the token presented to Azure AD."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials",
                                      "apiVersion": "2023-01-31",
                                      "name": "[format('{0}/{1}', parameters('userAssignedIdentityName'), parameters('name'))]",
                                      "properties": {
                                        "audiences": "[parameters('audiences')]",
                                        "issuer": "[parameters('issuer')]",
                                        "subject": "[parameters('subject')]"
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the federated identity credential."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the federated identity credential."
                                      },
                                      "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/federatedIdentityCredentials', parameters('userAssignedIdentityName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the federated identity credential was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "userAssignedIdentity"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the user assigned identity."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the user assigned identity."
                              },
                              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
                            },
                            "principalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID (object ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').principalId]"
                            },
                            "clientId": {
                              "type": "string",
                              "metadata": {
                                "description": "The client ID (application ID) of the user assigned identity."
                              },
                              "value": "[reference('userAssignedIdentity').clientId]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group the user assigned identity was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('userAssignedIdentity', '2023-01-31', 'full').location]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.resourceId.value]"
                    },
                    "AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_CLIENT_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.clientId.value]"
                    },
                    "AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_PRINCIPAL_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.principalId.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "containerRegistry",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "abbrs": {
                    "value": "[variables('abbrs')]"
                  },
                  "resourceToken": {
                    "value": "[variables('resourceToken')]"
                  },
                  "principalId": {
                    "value": "[parameters('principalId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "15592093546578996946"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "abbrs": {
                      "type": "object"
                    },
                    "resourceToken": {
                      "type": "string"
                    },
                    "principalId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "registry",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('abbrs').containerRegistryRegistries, parameters('resourceToken'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "publicNetworkAccess": {
                            "value": "Enabled"
                          },
                          "roleAssignments": {
                            "value": [
                              {
                                "principalId": "[parameters('principalId')]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionIdOrName": "AcrPull"
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.25.53.49325",
                              "templateHash": "14346813384269118868"
                            },
                            "name": "Azure Container Registries (ACR)",
                            "description": "This module deploys an Azure Container Registry (ACR).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "privateEndpointType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private endpoint."
                                    }
                                  },
                                  "location": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The location to deploy the private endpoint to."
                                    }
                                  },
                                  "service": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The service (sub-) type to deploy the private endpoint for. For example \"vault\" or \"blob\"."
                                    }
                                  },
                                  "subnetResourceId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                    }
                                  },
                                  "privateDnsZoneGroupName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of the private DNS zone group to create if privateDnsZoneResourceIds were provided."
                                    }
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The private DNS zone groups to associate the private endpoint with. A DNS zone group can support up to 5 DNS zones."
                                    }
                                  },
                                  "customDnsConfigs": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Required. Fqdn that resolves to private endpoint ip address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private ip addresses of the private endpoint."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Custom DNS configurations."
                                    }
                                  },
                                  "ipConfigurations": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private ip address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                    }
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                    }
                                  },
                                  "customNetworkInterfaceName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                    }
                                  },
                                  "lock": {
                                    "$ref": "#/definitions/lockType",
                                    "metadata": {
                                      "description": "Optional. Specify the type of lock."
                                    }
                                  },
                                  "roleAssignments": {
                                    "$ref": "#/definitions/roleAssignmentType",
                                    "metadata": {
                                      "description": "Optional. Array of role assignments to create."
                                    }
                                  },
                                  "tags": {
                                    "type": "object",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                    }
                                  },
                                  "manualPrivateLinkServiceConnections": {
                                    "type": "array",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Manual PrivateLink Service Connections."
                                    }
                                  },
                                  "enableTelemetry": {
                                    "type": "bool",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Enable/Disable usage telemetry for module."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "diagnosticSettingType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of diagnostic setting."
                                    }
                                  },
                                  "logCategoriesAndGroups": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                          }
                                        },
                                        "categoryGroup": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                    }
                                  },
                                  "metricCategories": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "category": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                          }
                                        },
                                        "enabled": {
                                          "type": "bool",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                          }
                                        }
                                      }
                                    },
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                    }
                                  },
                                  "logAnalyticsDestinationType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "AzureDiagnostics",
                                      "Dedicated"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                    }
                                  },
                                  "workspaceResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "storageAccountResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "eventHubAuthorizationRuleResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                    }
                                  },
                                  "eventHubName": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                    }
                                  },
                                  "marketplacePartnerResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "customerManagedKeyType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                                  }
                                },
                                "keyName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the customer managed key to use for encryption."
                                  }
                                },
                                "keyVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using 'latest'."
                                  }
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "minLength": 5,
                              "maxLength": 50,
                              "metadata": {
                                "description": "Required. Name of your Azure Container Registry."
                              }
                            },
                            "acrAdminUserEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable admin user that have push / pull permission to the registry."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "acrSku": {
                              "type": "string",
                              "defaultValue": "Basic",
                              "allowedValues": [
                                "Basic",
                                "Premium",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Tier of your Azure container registry."
                              }
                            },
                            "exportPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the export policy is enabled or not."
                              }
                            },
                            "quarantinePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the quarantine policy is enabled or not."
                              }
                            },
                            "trustPolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the trust policy is enabled or not."
                              }
                            },
                            "retentionPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the retention policy is enabled or not."
                              }
                            },
                            "retentionPolicyDays": {
                              "type": "int",
                              "defaultValue": 15,
                              "metadata": {
                                "description": "Optional. The number of days to retain an untagged manifest after which it gets purged."
                              }
                            },
                            "azureADAuthenticationAsArmPolicyStatus": {
                              "type": "string",
                              "defaultValue": "enabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. The value that indicates whether the policy for using ARM audience token for a container registr is enabled or not. Default is enabled."
                              }
                            },
                            "softDeletePolicyStatus": {
                              "type": "string",
                              "defaultValue": "disabled",
                              "allowedValues": [
                                "disabled",
                                "enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Soft Delete policy status. Default is disabled."
                              }
                            },
                            "softDeletePolicyDays": {
                              "type": "int",
                              "defaultValue": 7,
                              "metadata": {
                                "description": "Optional. The number of days after which a soft-deleted item is permanently deleted."
                              }
                            },
                            "dataEndpointEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enable a single data endpoint per region for serving data. Not relevant in case of disabled public access. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkRuleSetIpRules are not set.  Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "networkRuleBypassOptions": {
                              "type": "string",
                              "defaultValue": "AzureServices",
                              "allowedValues": [
                                "AzureServices",
                                "None"
                              ],
                              "metadata": {
                                "description": "Optional. Whether to allow trusted Azure services to access a network restricted registry."
                              }
                            },
                            "networkRuleSetDefaultAction": {
                              "type": "string",
                              "defaultValue": "Deny",
                              "allowedValues": [
                                "Allow",
                                "Deny"
                              ],
                              "metadata": {
                                "description": "Optional. The default action of allow or deny when no other rules match."
                              }
                            },
                            "networkRuleSetIpRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The IP ACL rules. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "privateEndpoints": {
                              "$ref": "#/definitions/privateEndpointType",
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible. Note, requires the 'acrSku' to be 'Premium'."
                              }
                            },
                            "zoneRedundancy": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                              }
                            },
                            "replications": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All replications to create."
                              }
                            },
                            "webhooks": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All webhooks to create."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "diagnosticSettings": {
                              "$ref": "#/definitions/diagnosticSettingType",
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "anonymousPullEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables registry-wide pull from unauthenticated clients. It's in preview and available in the Standard and Premium service tiers."
                              }
                            },
                            "customerManagedKey": {
                              "$ref": "#/definitions/customerManagedKeyType",
                              "metadata": {
                                "description": "Optional. The customer managed key definition."
                              }
                            },
                            "cacheRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of Cache Rules. Note: This is a preview feature ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache#cache-for-acr-preview))."
                              }
                            }
                          },
                          "variables": {
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', null())), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "AcrDelete": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c2f4ef07-c644-48eb-af81-4b1b4947fb11')]",
                              "AcrImageSigner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '6cef56e8-d556-48e5-a04f-b8e64114680f')]",
                              "AcrPull": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                              "AcrPush": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8311e382-0749-4cb8-b61a-304f252e45ec')]",
                              "AcrQuarantineReader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'cdda3590-29a3-44f6-95f2-9f980659eb04')]",
                              "AcrQuarantineWriter": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c8d4ff99-41c3-41a8-9f60-21dfdad59608')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/')), coalesce(tryGet(parameters('customerManagedKey'), 'keyName'), 'dummyKey'))]",
                              "dependsOn": [
                                "cMKKeyVault"
                              ]
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.containerregistry-registry.{0}.{1}', replace('0.1.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), 'dummyVault'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "subscriptionId": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '//'), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '////'), '/')[4]]",
                              "name": "[last(split(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), 'dummyMsi'), '/'))]"
                            },
                            "registry": {
                              "type": "Microsoft.ContainerRegistry/registries",
                              "apiVersion": "2023-06-01-preview",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "sku": {
                                "name": "[parameters('acrSku')]"
                              },
                              "properties": {
                                "anonymousPullEnabled": "[parameters('anonymousPullEnabled')]",
                                "adminUserEnabled": "[parameters('acrAdminUserEnabled')]",
                                "encryption": "[if(not(empty(parameters('customerManagedKey'))), createObject('status', 'enabled', 'keyVaultProperties', createObject('identity', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), ''))), reference('cMKUserAssignedIdentity').clientId, null()), 'keyIdentifier', if(not(empty(coalesce(tryGet(parameters('customerManagedKey'), 'keyVersion'), ''))), format('{0}/{1}', reference('cMKKeyVault::cMKKey').keyUri, parameters('customerManagedKey').keyVersion), reference('cMKKeyVault::cMKKey').keyUriWithVersion))), null())]",
                                "policies": {
                                  "azureADAuthenticationAsArmPolicy": {
                                    "status": "[parameters('azureADAuthenticationAsArmPolicyStatus')]"
                                  },
                                  "exportPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('status', parameters('exportPolicyStatus')), null())]",
                                  "quarantinePolicy": {
                                    "status": "[parameters('quarantinePolicyStatus')]"
                                  },
                                  "trustPolicy": {
                                    "type": "Notary",
                                    "status": "[parameters('trustPolicyStatus')]"
                                  },
                                  "retentionPolicy": "[if(equals(parameters('acrSku'), 'Premium'), createObject('days', parameters('retentionPolicyDays'), 'status', parameters('retentionPolicyStatus')), null())]",
                                  "softDeletePolicy": {
                                    "retentionDays": "[parameters('softDeletePolicyDays')]",
                                    "status": "[parameters('softDeletePolicyStatus')]"
                                  }
                                },
                                "dataEndpointEnabled": "[parameters('dataEndpointEnabled')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkRuleSetIpRules'))), 'Disabled', null()))]",
                                "networkRuleBypassOptions": "[parameters('networkRuleBypassOptions')]",
                                "networkRuleSet": "[if(not(empty(parameters('networkRuleSetIpRules'))), createObject('defaultAction', parameters('networkRuleSetDefaultAction'), 'ipRules', parameters('networkRuleSetIpRules')), null())]",
                                "zoneRedundancy": "[if(equals(parameters('acrSku'), 'Premium'), parameters('zoneRedundancy'), null())]"
                              },
                              "dependsOn": [
                                "cMKKeyVault",
                                "cMKUserAssignedIdentity"
                              ]
                            },
                            "registry_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_diagnosticSettings": {
                              "copy": {
                                "name": "registry_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_roleAssignments": {
                              "copy": {
                                "name": "registry_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_replications": {
                              "copy": {
                                "name": "registry_replications",
                                "count": "[length(coalesce(parameters('replications'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Replication-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(parameters('replications'), createArray())[copyIndex()].location]"
                                  },
                                  "regionEndpointEnabled": {
                                    "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'regionEndpointEnabled')]"
                                  },
                                  "zoneRedundancy": {
                                    "value": "[tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'zoneRedundancy')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('replications'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "10714256463183699741"
                                    },
                                    "name": "Azure Container Registry (ACR) Replications",
                                    "description": "This module deploys an Azure Container Registry (ACR) Replication.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the replication."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "regionEndpointEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Specifies whether the replication regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications."
                                      }
                                    },
                                    "zoneRedundancy": {
                                      "type": "string",
                                      "defaultValue": "Disabled",
                                      "allowedValues": [
                                        "Disabled",
                                        "Enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Whether or not zone redundancy is enabled for this container registry."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "replication": {
                                      "type": "Microsoft.ContainerRegistry/registries/replications",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "regionEndpointEnabled": "[parameters('regionEndpointEnabled')]",
                                        "zoneRedundancy": "[parameters('zoneRedundancy')]"
                                      },
                                      "dependsOn": [
                                        "registry"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the replication."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the replication."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/replications', parameters('registryName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the replication was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('replication', '2023-06-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_cacheRules": {
                              "copy": {
                                "name": "registry_cacheRules",
                                "count": "[length(coalesce(parameters('cacheRules'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Cache-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "sourceRepository": {
                                    "value": "[coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository]"
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'name'), replace(replace(coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository, '/', '-'), '.', '-'))]"
                                  },
                                  "targetRepository": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'targetRepository'), coalesce(parameters('cacheRules'), createArray())[copyIndex()].sourceRepository)]"
                                  },
                                  "credentialSetResourceId": {
                                    "value": "[tryGet(coalesce(parameters('cacheRules'), createArray())[copyIndex()], 'credentialSetResourceId')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "6942960102258463312"
                                    },
                                    "name": "Container Registries Cache",
                                    "description": "Cache for Azure Container Registry (Preview) feature allows users to cache container images in a private container registry. Cache for ACR, is a preview feature available in Basic, Standard, and Premium service tiers ([ref](https://learn.microsoft.com/en-us/azure/container-registry/tutorial-registry-cache)).",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[replace(replace(parameters('sourceRepository'), '/', '-'), '.', '-')]",
                                      "metadata": {
                                        "description": "Optional. The name of the cache rule. Will be dereived from the source repository name if not defined."
                                      }
                                    },
                                    "sourceRepository": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Source repository pulled from upstream."
                                      }
                                    },
                                    "targetRepository": {
                                      "type": "string",
                                      "defaultValue": "[parameters('sourceRepository')]",
                                      "metadata": {
                                        "description": "Optional. Target repository specified in docker pull command. E.g.: docker pull myregistry.azurecr.io/{targetRepository}:{tag}."
                                      }
                                    },
                                    "credentialSetResourceId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The resource ID of the credential store which is associated with the cache rule."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "cacheRule": {
                                      "type": "Microsoft.ContainerRegistry/registries/cacheRules",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "properties": {
                                        "sourceRepository": "[parameters('sourceRepository')]",
                                        "targetRepository": "[parameters('targetRepository')]",
                                        "credentialSetResourceId": "[parameters('credentialSetResourceId')]"
                                      },
                                      "dependsOn": [
                                        "registry"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The Name of the Cache Rule."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Cache Rule."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the Cache Rule."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/cacheRules', parameters('registryName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_webhooks": {
                              "copy": {
                                "name": "registry_webhooks",
                                "count": "[length(coalesce(parameters('webhooks'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Registry-Webhook-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].name]"
                                  },
                                  "registryName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'location'), parameters('location'))]"
                                  },
                                  "action": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'action'), createArray('chart_delete', 'chart_push', 'delete', 'push', 'quarantine'))]"
                                  },
                                  "customHeaders": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'customHeaders')]"
                                  },
                                  "scope": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'scope')]"
                                  },
                                  "status": {
                                    "value": "[tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'status')]"
                                  },
                                  "serviceUri": {
                                    "value": "[coalesce(parameters('webhooks'), createArray())[copyIndex()].serviceUri]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('webhooks'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.25.53.49325",
                                      "templateHash": "3986666280667981658"
                                    },
                                    "name": "Azure Container Registry (ACR) Webhooks",
                                    "description": "This module deploys an Azure Container Registry (ACR) Webhook.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "parameters": {
                                    "registryName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent registry. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "[format('{0}webhook', parameters('registryName'))]",
                                      "minLength": 5,
                                      "maxLength": 50,
                                      "metadata": {
                                        "description": "Optional. The name of the registry webhook."
                                      }
                                    },
                                    "serviceUri": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The service URI for the webhook to post notifications."
                                      }
                                    },
                                    "status": {
                                      "type": "string",
                                      "defaultValue": "enabled",
                                      "allowedValues": [
                                        "disabled",
                                        "enabled"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The status of the webhook at the time the operation was called."
                                      }
                                    },
                                    "action": {
                                      "type": "array",
                                      "defaultValue": [
                                        "chart_delete",
                                        "chart_push",
                                        "delete",
                                        "push",
                                        "quarantine"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The list of actions that trigger the webhook to post notifications."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all resources."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags of the resource."
                                      }
                                    },
                                    "customHeaders": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom headers that will be added to the webhook notifications."
                                      }
                                    },
                                    "scope": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "registry": {
                                      "existing": true,
                                      "type": "Microsoft.ContainerRegistry/registries",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[parameters('registryName')]"
                                    },
                                    "webhook": {
                                      "type": "Microsoft.ContainerRegistry/registries/webhooks",
                                      "apiVersion": "2023-06-01-preview",
                                      "name": "[format('{0}/{1}', parameters('registryName'), parameters('name'))]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "actions": "[parameters('action')]",
                                        "customHeaders": "[parameters('customHeaders')]",
                                        "scope": "[parameters('scope')]",
                                        "serviceUri": "[parameters('serviceUri')]",
                                        "status": "[parameters('status')]"
                                      },
                                      "dependsOn": [
                                        "registry"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the webhook."
                                      },
                                      "value": "[resourceId('Microsoft.ContainerRegistry/registries/webhooks', parameters('registryName'), parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the webhook."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the Azure container registry."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "actions": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "The actions of the webhook."
                                      },
                                      "value": "[reference('webhook').actions]"
                                    },
                                    "status": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The status of the webhook."
                                      },
                                      "value": "[reference('webhook').status]"
                                    },
                                    "provistioningState": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The provisioning state of the webhook."
                                      },
                                      "value": "[reference('webhook').provisioningState]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('webhook', '2023-06-01-preview', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            },
                            "registry_privateEndpoints": {
                              "copy": {
                                "name": "registry_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-registry-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "privateLinkServiceConnections": {
                                    "value": [
                                      {
                                        "name": "[parameters('name')]",
                                        "properties": {
                                          "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]",
                                          "groupIds": [
                                            "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry')]"
                                          ]
                                        }
                                      }
                                    ]
                                  },
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'registry'), copyIndex()))]"
                                  },
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'enableTelemetry'), parameters('enableTelemetry'))]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroupName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroupName')]"
                                  },
                                  "privateDnsZoneResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneResourceIds')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "manualPrivateLinkServiceConnections": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualPrivateLinkServiceConnections')]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.23.1.45101",
                                      "templateHash": "2821141217598568122"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint.",
                                    "owner": "Azure/module-maintainers"
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "roleDefinitionIdOrName": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                            }
                                          },
                                          "principalId": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                            }
                                          },
                                          "principalType": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Device",
                                              "ForeignGroup",
                                              "Group",
                                              "ServicePrincipal",
                                              "User"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The principal type of the assigned principal ID."
                                            }
                                          },
                                          "description": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The description of the role assignment."
                                            }
                                          },
                                          "condition": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                            }
                                          },
                                          "conditionVersion": {
                                            "type": "string",
                                            "allowedValues": [
                                              "2.0"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. Version of the condition."
                                            }
                                          },
                                          "delegatedManagedIdentityResourceId": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The Resource Id of the delegated managed identity resource."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "ipConfigurationsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the resource that is unique within a resource group."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "memberName": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateIPAddress": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private endpoint IP configurations."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "manualPrivateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "privateLinkServiceConnectionsType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "name": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. The name of the private link service connection."
                                            }
                                          },
                                          "properties": {
                                            "type": "object",
                                            "properties": {
                                              "groupIds": {
                                                "type": "array",
                                                "metadata": {
                                                  "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                                }
                                              },
                                              "privateLinkServiceId": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. The resource id of private link service."
                                                }
                                              },
                                              "requestMessage": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                                }
                                              }
                                            },
                                            "metadata": {
                                              "description": "Required. Properties of private link service connection."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    },
                                    "customDnsConfigType": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "fqdn": {
                                            "type": "string",
                                            "metadata": {
                                              "description": "Required. Fqdn that resolves to private endpoint IP address."
                                            }
                                          },
                                          "ipAddresses": {
                                            "type": "array",
                                            "items": {
                                              "type": "string"
                                            },
                                            "metadata": {
                                              "description": "Required. A list of private IP addresses of the private endpoint."
                                            }
                                          }
                                        }
                                      },
                                      "nullable": true
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "$ref": "#/definitions/ipConfigurationsType",
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroupName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The name of the private DNS zone group to create if `privateDnsZoneResourceIds` were provided."
                                      }
                                    },
                                    "privateDnsZoneResourceIds": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "$ref": "#/definitions/roleAssignmentType",
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "$ref": "#/definitions/customDnsConfigType",
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "$ref": "#/definitions/manualPrivateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "$ref": "#/definitions/privateLinkServiceConnectionsType",
                                      "metadata": {
                                        "description": "Optional. A grouping of information about the connection to the remote resource."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.3.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                                      "properties": {
                                        "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                        "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneResourceIds')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[coalesce(parameters('privateDnsZoneGroupName'), 'default')]"
                                          },
                                          "privateDNSResourceIds": {
                                            "value": "[coalesce(parameters('privateDnsZoneResourceIds'), createArray())]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.23.1.45101",
                                              "templateHash": "18168683629401652671"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group.",
                                            "owner": "Azure/module-maintainers"
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDNSResourceIds": {
                                              "type": "array",
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone resource IDs. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigs",
                                                "count": "[length(parameters('privateDNSResourceIds'))]",
                                                "input": {
                                                  "name": "[last(split(parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')], '/'))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDNSResourceIds')[copyIndex('privateDnsZoneConfigs')]]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": [
                                            {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigs')]"
                                              }
                                            }
                                          ],
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-04-01', 'full').location]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "registry"
                              ]
                            }
                          },
                          "outputs": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The Name of the Azure container registry."
                              },
                              "value": "[parameters('name')]"
                            },
                            "loginServer": {
                              "type": "string",
                              "metadata": {
                                "description": "The reference to the Azure container registry."
                              },
                              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('name')), '2019-05-01').loginServer]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Azure container registry."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Azure container registry."
                              },
                              "value": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('name'))]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('registry', '2023-06-01-preview', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('registry', '2023-06-01-preview', 'full').location]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_CONTAINER_REGISTRY_LOGIN_SERVER": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'registry'), '2022-09-01').outputs.loginServer.value]"
                    },
                    "AZURE_RESOURCE_REGISTRY_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'registry'), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "keyVault",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "abbrs": {
                    "value": "[variables('abbrs')]"
                  },
                  "resourceToken": {
                    "value": "[variables('resourceToken')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "userAssignedManagedIdentityPrincipalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_PRINCIPAL_ID.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "13384480087634425868"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "abbrs": {
                      "type": "object"
                    },
                    "resourceToken": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "userAssignedManagedIdentityPrincipalId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "vault",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('abbrs').keyVaultVaults, parameters('resourceToken'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "roleAssignments": {
                            "value": [
                              {
                                "principalId": "[parameters('userAssignedManagedIdentityPrincipalId')]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionIdOrName": "Key Vault Secrets Officer"
                              }
                            ]
                          },
                          "enablePurgeProtection": {
                            "value": false
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "17553975707245390963"
                            },
                            "name": "Key Vaults",
                            "description": "This module deploys a Key Vault."
                          },
                          "definitions": {
                            "privateEndpointOutputType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the private endpoint."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the private endpoint."
                                  }
                                },
                                "groupId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "The group Id for the private endpoint Group."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "fqdn": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "FQDN that resolves to private endpoint IP address."
                                        }
                                      },
                                      "ipAddresses": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "A list of private IP addresses of the private endpoint."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "The custom DNS configurations of the private endpoint."
                                  }
                                },
                                "networkInterfaceResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "The IDs of the network interfaces associated with the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "credentialOutputType": {
                              "type": "object",
                              "properties": {
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The item's resourceId."
                                  }
                                },
                                "uri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The item's uri."
                                  }
                                },
                                "uriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The item's uri with version."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a credential output."
                              }
                            },
                            "accessPolicyType": {
                              "type": "object",
                              "properties": {
                                "tenantId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                  }
                                },
                                "objectId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                  }
                                },
                                "applicationId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application ID of the client making request on behalf of a principal."
                                  }
                                },
                                "permissions": {
                                  "type": "object",
                                  "properties": {
                                    "keys": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "create",
                                        "decrypt",
                                        "delete",
                                        "encrypt",
                                        "get",
                                        "getrotationpolicy",
                                        "import",
                                        "list",
                                        "purge",
                                        "recover",
                                        "release",
                                        "restore",
                                        "rotate",
                                        "setrotationpolicy",
                                        "sign",
                                        "unwrapKey",
                                        "update",
                                        "verify",
                                        "wrapKey"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to keys."
                                      }
                                    },
                                    "secrets": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "delete",
                                        "get",
                                        "list",
                                        "purge",
                                        "recover",
                                        "restore",
                                        "set"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to secrets."
                                      }
                                    },
                                    "certificates": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "create",
                                        "delete",
                                        "deleteissuers",
                                        "get",
                                        "getissuers",
                                        "import",
                                        "list",
                                        "listissuers",
                                        "managecontacts",
                                        "manageissuers",
                                        "purge",
                                        "recover",
                                        "restore",
                                        "setissuers",
                                        "update"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to certificates."
                                      }
                                    },
                                    "storage": {
                                      "type": "array",
                                      "allowedValues": [
                                        "all",
                                        "backup",
                                        "delete",
                                        "deletesas",
                                        "get",
                                        "getsas",
                                        "list",
                                        "listsas",
                                        "purge",
                                        "recover",
                                        "regeneratekey",
                                        "restore",
                                        "set",
                                        "setsas",
                                        "update"
                                      ],
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Permissions to storage accounts."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for an access policy."
                              }
                            },
                            "secretType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the secret."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource tags."
                                  }
                                },
                                "attributes": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Defines whether the secret is enabled or disabled."
                                      }
                                    },
                                    "exp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Defines when the secret will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "nbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. If set, defines the date from which onwards the secret becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Contains attributes of the secret."
                                  }
                                },
                                "contentType": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The content type of the secret."
                                  }
                                },
                                "value": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a secret output."
                              }
                            },
                            "keyType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the key."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource tags."
                                  }
                                },
                                "attributes": {
                                  "type": "object",
                                  "properties": {
                                    "enabled": {
                                      "type": "bool",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Defines whether the key is enabled or disabled."
                                      }
                                    },
                                    "exp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Defines when the key will become invalid. Defined in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "nbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. If set, defines the date from which onwards the key becomes valid. Defined in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Contains attributes of the key."
                                  }
                                },
                                "curveName": {
                                  "type": "string",
                                  "allowedValues": [
                                    "P-256",
                                    "P-256K",
                                    "P-384",
                                    "P-521"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The elliptic curve name. Only works if \"keySize\" equals \"EC\" or \"EC-HSM\". Default is \"P-256\"."
                                  }
                                },
                                "keyOps": {
                                  "type": "array",
                                  "allowedValues": [
                                    "decrypt",
                                    "encrypt",
                                    "import",
                                    "release",
                                    "sign",
                                    "unwrapKey",
                                    "verify",
                                    "wrapKey"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The allowed operations on this key."
                                  }
                                },
                                "keySize": {
                                  "type": "int",
                                  "allowedValues": [
                                    2048,
                                    3072,
                                    4096
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The key size in bits. Only works if \"keySize\" equals \"RSA\" or \"RSA-HSM\". Default is \"4096\"."
                                  }
                                },
                                "kty": {
                                  "type": "string",
                                  "allowedValues": [
                                    "EC",
                                    "EC-HSM",
                                    "RSA",
                                    "RSA-HSM"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The type of the key. Default is \"EC\"."
                                  }
                                },
                                "releasePolicy": {
                                  "type": "object",
                                  "properties": {
                                    "contentType": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Content type and version of key release policy."
                                      }
                                    },
                                    "data": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Blob encoding the policy rules under which the key can be released."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Key release policy."
                                  }
                                },
                                "rotationPolicy": {
                                  "$ref": "#/definitions/rotationPolicyType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Key rotation policy."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true,
                                "description": "The type for a key."
                              }
                            },
                            "rotationPolicyType": {
                              "type": "object",
                              "properties": {
                                "attributes": {
                                  "type": "object",
                                  "properties": {
                                    "expiryTime": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The expiration time for the new key version. It should be in ISO8601 format. Eg: \"P90D\", \"P1Y\"."
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The attributes of key rotation policy."
                                  }
                                },
                                "lifetimeActions": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "action": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "allowedValues": [
                                              "Notify",
                                              "Rotate"
                                            ],
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The type of action."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The action of key rotation policy lifetimeAction."
                                        }
                                      },
                                      "trigger": {
                                        "type": "object",
                                        "properties": {
                                          "timeAfterCreate": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration after key creation to rotate the key. It only applies to rotate. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          },
                                          "timeBeforeExpiry": {
                                            "type": "string",
                                            "nullable": true,
                                            "metadata": {
                                              "description": "Optional. The time duration before key expiring to rotate or notify. It will be in ISO 8601 duration format. Eg: \"P90D\", \"P1Y\"."
                                            }
                                          }
                                        },
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The trigger of key rotation policy lifetimeAction."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The lifetimeActions for key rotation action."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "The type for a rotation policy."
                              }
                            },
                            "_1.privateEndpointCustomDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.privateEndpointIpConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.privateEndpointPrivateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the private DNS Zone Group config."
                                        }
                                      },
                                      "privateDnsZoneResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of the private DNS zone."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "privateEndpointSingleServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private Endpoint."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The location to deploy the Private Endpoint to."
                                  }
                                },
                                "privateLinkServiceConnectionName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private link connection to create."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The subresource to deploy the Private Endpoint for. For example \"vault\" for a Key Vault Private Endpoint."
                                  }
                                },
                                "subnetResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                  }
                                },
                                "resourceGroupResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                                  }
                                },
                                "privateDnsZoneGroup": {
                                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The private DNS Zone Group to configure for the Private Endpoint."
                                  }
                                },
                                "isManualConnection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If Manual Private Link Connection is required."
                                  }
                                },
                                "manualConnectionRequestMessage": {
                                  "type": "string",
                                  "nullable": true,
                                  "maxLength": 140,
                                  "metadata": {
                                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom DNS configurations."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of IP configurations of the Private Endpoint. This will be used to map to the first-party Service endpoints."
                                  }
                                },
                                "applicationSecurityGroupResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application security groups in which the Private Endpoint IP configuration is included."
                                  }
                                },
                                "customNetworkInterfaceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The custom name of the network interface attached to the Private Endpoint."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to be applied on all resources/Resource Groups in this deployment."
                                  }
                                },
                                "enableTelemetry": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable/Disable usage telemetry for module."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can be assumed (i.e., for services that only have one Private Endpoint type like 'vault' for key vault).",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Name of the Key Vault. Must be globally unique."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "accessPolicies": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/accessPolicyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All access policies to create."
                              }
                            },
                            "secrets": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/secretType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All secrets to create."
                              }
                            },
                            "keys": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/keyType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. All keys to create."
                              }
                            },
                            "enableVaultForDeployment": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute."
                              }
                            },
                            "enableVaultForTemplateDeployment": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the vault is enabled for a template deployment."
                              }
                            },
                            "enableVaultForDiskEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
                              }
                            },
                            "enableSoftDelete": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
                              }
                            },
                            "softDeleteRetentionInDays": {
                              "type": "int",
                              "defaultValue": 90,
                              "metadata": {
                                "description": "Optional. softDelete data retention days. It accepts >=7 and <=<redacted>
                              }
                            },
                            "enableRbacAuthorization": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. Note that management actions are always authorized with RBAC."
                              }
                            },
                            "createMode": {
                              "type": "string",
                              "defaultValue": "default",
                              "metadata": {
                                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
                              }
                            },
                            "enablePurgeProtection": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
                              }
                            },
                            "sku": {
                              "type": "string",
                              "defaultValue": "premium",
                              "allowedValues": [
                                "premium",
                                "standard"
                              ],
                              "metadata": {
                                "description": "Optional. Specifies the SKU for the vault."
                              }
                            },
                            "networkAcls": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Rules governing the accessibility of the resource from specific network locations."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointSingleServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Resource tags."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              },
                              {
                                "name": "formattedAccessPolicies",
                                "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                "input": {
                                  "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'applicationId'), '')]",
                                  "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].objectId]",
                                  "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')].permissions]",
                                  "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('formattedAccessPolicies')], 'tenantId'), tenant().tenantId)]"
                                }
                              }
                            ],
                            "enableReferencedModulesTelemetry": false,
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                              "Key Vault Certificates Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
                              "Key Vault Certificate User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db79e9a7-68ee-4b58-9aeb-b90e7c24fcba')]",
                              "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                              "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                              "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                              "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                              "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                              "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                              "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.keyvault-vault.{0}.{1}', replace('0.12.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "keyVault": {
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2022-07-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                                "createMode": "[parameters('createMode')]",
                                "enablePurgeProtection": "[if(parameters('enablePurgeProtection'), parameters('enablePurgeProtection'), null())]",
                                "tenantId": "[subscription().tenantId]",
                                "accessPolicies": "[variables('formattedAccessPolicies')]",
                                "sku": {
                                  "name": "[parameters('sku')]",
                                  "family": "A"
                                },
                                "networkAcls": "[if(not(empty(coalesce(parameters('networkAcls'), createObject()))), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass'), 'defaultAction', tryGet(parameters('networkAcls'), 'defaultAction'), 'virtualNetworkRules', coalesce(tryGet(parameters('networkAcls'), 'virtualNetworkRules'), createArray()), 'ipRules', coalesce(tryGet(parameters('networkAcls'), 'ipRules'), createArray())), null())]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(coalesce(parameters('privateEndpoints'), createArray()))), empty(coalesce(parameters('networkAcls'), createObject()))), 'Disabled', null()))]"
                              }
                            },
                            "keyVault_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_diagnosticSettings": {
                              "copy": {
                                "name": "keyVault_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  },
                                  {
                                    "name": "logs",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                    "input": {
                                      "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                      "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_roleAssignments": {
                              "copy": {
                                "name": "keyVault_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.KeyVault/vaults/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_accessPolicies": {
                              "condition": "[not(empty(parameters('accessPolicies')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-AccessPolicies', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "accessPolicies": {
                                    "value": "[parameters('accessPolicies')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "6321524620984159084"
                                    },
                                    "name": "Key Vault Access Policies",
                                    "description": "This module deploys a Key Vault Access Policy."
                                  },
                                  "definitions": {
                                    "accessPoliciesType": {
                                      "type": "object",
                                      "properties": {
                                        "tenantId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The tenant ID that is used for authenticating requests to the key vault."
                                          }
                                        },
                                        "objectId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The object ID of a user, service principal or security group in the tenant for the vault."
                                          }
                                        },
                                        "applicationId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Application ID of the client making request on behalf of a principal."
                                          }
                                        },
                                        "permissions": {
                                          "type": "object",
                                          "properties": {
                                            "keys": {
                                              "type": "array",
                                              "allowedValues": [
                                                "all",
                                                "backup",
                                                "create",
                                                "decrypt",
                                                "delete",
                                                "encrypt",
                                                "get",
                                                "getrotationpolicy",
                                                "import",
                                                "list",
                                                "purge",
                                                "recover",
                                                "release",
                                                "restore",
                                                "rotate",
                                                "setrotationpolicy",
                                                "sign",
                                                "unwrapKey",
                                                "update",
                                                "verify",
                                                "wrapKey"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Permissions to keys."
                                              }
                                            },
                                            "secrets": {
                                              "type": "array",
                                              "allowedValues": [
                                                "all",
                                                "backup",
                                                "delete",
                                                "get",
                                                "list",
                                                "purge",
                                                "recover",
                                                "restore",
                                                "set"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Permissions to secrets."
                                              }
                                            },
                                            "certificates": {
                                              "type": "array",
                                              "allowedValues": [
                                                "all",
                                                "backup",
                                                "create",
                                                "delete",
                                                "deleteissuers",
                                                "get",
                                                "getissuers",
                                                "import",
                                                "list",
                                                "listissuers",
                                                "managecontacts",
                                                "manageissuers",
                                                "purge",
                                                "recover",
                                                "restore",
                                                "setissuers",
                                                "update"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Permissions to certificates."
                                              }
                                            },
                                            "storage": {
                                              "type": "array",
                                              "allowedValues": [
                                                "all",
                                                "backup",
                                                "delete",
                                                "deletesas",
                                                "get",
                                                "getsas",
                                                "list",
                                                "listsas",
                                                "purge",
                                                "recover",
                                                "regeneratekey",
                                                "restore",
                                                "set",
                                                "setsas",
                                                "update"
                                              ],
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Permissions to storage accounts."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Permissions the identity has for keys, secrets and certificates."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for an access policy."
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "accessPolicies": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/accessPoliciesType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "policies": {
                                      "type": "Microsoft.KeyVault/vaults/accessPolicies",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "accessPolicies",
                                            "count": "[length(coalesce(parameters('accessPolicies'), createArray()))]",
                                            "input": {
                                              "applicationId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')], 'applicationId'), '')]",
                                              "objectId": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')].objectId]",
                                              "permissions": "[coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')].permissions]",
                                              "tenantId": "[coalesce(tryGet(coalesce(parameters('accessPolicies'), createArray())[copyIndex('accessPolicies')], 'tenantId'), tenant().tenantId)]"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the access policies assignment was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the access policies assignment."
                                      },
                                      "value": "add"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the access policies assignment."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_secrets": {
                              "copy": {
                                "name": "keyVault_secrets",
                                "count": "[length(coalesce(parameters('secrets'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-Secret-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].name]"
                                  },
                                  "value": {
                                    "value": "[coalesce(parameters('secrets'), createArray())[copyIndex()].value]"
                                  },
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "attributesEnabled": {
                                    "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'enabled')]"
                                  },
                                  "attributesExp": {
                                    "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'exp')]"
                                  },
                                  "attributesNbf": {
                                    "value": "[tryGet(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'attributes'), 'nbf')]"
                                  },
                                  "contentType": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'contentType')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('secrets'), createArray())[copyIndex()], 'roleAssignments')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "4741547827723795923"
                                    },
                                    "name": "Key Vault Secrets",
                                    "description": "This module deploys a Key Vault Secret."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the secret."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    },
                                    "attributesEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Determines whether the object is enabled."
                                      }
                                    },
                                    "attributesExp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                                      }
                                    },
                                    "attributesNbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "contentType": {
                                      "type": "securestring",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The content type of the secret."
                                      }
                                    },
                                    "value": {
                                      "type": "securestring",
                                      "metadata": {
                                        "description": "Required. The value of the secret. NOTE: \"value\" will never be returned from the service, as APIs using this model are is intended for internal use in ARM deployments. Users should use the data-plane REST service for interaction with vault secrets."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                                      "Key Vault Secrets Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
                                      "Key Vault Secrets User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4633458b-17de-408a-b874-0445c86b69e6')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "secret": {
                                      "type": "Microsoft.KeyVault/vaults/secrets",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "contentType": "[parameters('contentType')]",
                                        "attributes": {
                                          "enabled": "[parameters('attributesEnabled')]",
                                          "exp": "[parameters('attributesExp')]",
                                          "nbf": "[parameters('attributesNbf')]"
                                        },
                                        "value": "[parameters('value')]"
                                      }
                                    },
                                    "secret_roleAssignments": {
                                      "copy": {
                                        "name": "secret_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/secrets/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "secret"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the secret."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the secret."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('name'))]"
                                    },
                                    "secretUri": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The uri of the secret."
                                      },
                                      "value": "[reference('secret').secretUri]"
                                    },
                                    "secretUriWithVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The uri with version of the secret."
                                      },
                                      "value": "[reference('secret').secretUriWithVersion]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the secret was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_keys": {
                              "copy": {
                                "name": "keyVault_keys",
                                "count": "[length(coalesce(parameters('keys'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-KeyVault-Key-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(parameters('keys'), createArray())[copyIndex()].name]"
                                  },
                                  "keyVaultName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "attributesEnabled": {
                                    "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'enabled')]"
                                  },
                                  "attributesExp": {
                                    "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'exp')]"
                                  },
                                  "attributesNbf": {
                                    "value": "[tryGet(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'attributes'), 'nbf')]"
                                  },
                                  "curveName": "[if(and(not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA')), not(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM'))), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'curveName'), 'P-256')), createObject('value', null()))]",
                                  "keyOps": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keyOps')]"
                                  },
                                  "keySize": "[if(or(equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA'), equals(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'RSA-HSM')), createObject('value', coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'keySize'), 4096)), createObject('value', null()))]",
                                  "releasePolicy": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'releasePolicy'), createObject())]"
                                  },
                                  "kty": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'kty'), 'EC')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "rotationPolicy": {
                                    "value": "[tryGet(coalesce(parameters('keys'), createArray())[copyIndex()], 'rotationPolicy')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "12000970886778046699"
                                    },
                                    "name": "Key Vault Keys",
                                    "description": "This module deploys a Key Vault Key."
                                  },
                                  "definitions": {
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Conditional. The name of the parent key vault. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the key."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Resource tags."
                                      }
                                    },
                                    "attributesEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Determines whether the object is enabled."
                                      }
                                    },
                                    "attributesExp": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Expiry date in seconds since 1970-01-01T00:00:00Z. For security reasons, it is recommended to set an expiration date whenever possible."
                                      }
                                    },
                                    "attributesNbf": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Not before date in seconds since 1970-01-01T00:00:00Z."
                                      }
                                    },
                                    "curveName": {
                                      "type": "string",
                                      "defaultValue": "P-256",
                                      "allowedValues": [
                                        "P-256",
                                        "P-256K",
                                        "P-384",
                                        "P-521"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The elliptic curve name."
                                      }
                                    },
                                    "keyOps": {
                                      "type": "array",
                                      "nullable": true,
                                      "allowedValues": [
                                        "decrypt",
                                        "encrypt",
                                        "import",
                                        "sign",
                                        "unwrapKey",
                                        "verify",
                                        "wrapKey"
                                      ],
                                      "metadata": {
                                        "description": "Optional. Array of JsonWebKeyOperation."
                                      }
                                    },
                                    "keySize": {
                                      "type": "int",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The key size in bits. For example: 2048, 3072, or 4096 for RSA."
                                      }
                                    },
                                    "kty": {
                                      "type": "string",
                                      "defaultValue": "EC",
                                      "allowedValues": [
                                        "EC",
                                        "EC-HSM",
                                        "RSA",
                                        "RSA-HSM"
                                      ],
                                      "metadata": {
                                        "description": "Optional. The type of the key."
                                      }
                                    },
                                    "releasePolicy": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Key release policy."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "rotationPolicy": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Key rotation policy properties object."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "Key Vault Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
                                      "Key Vault Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
                                      "Key Vault Crypto Officer": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
                                      "Key Vault Crypto Service Encryption User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
                                      "Key Vault Crypto User": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '12338af0-0e69-4776-bea7-57ae8d297424')]",
                                      "Key Vault Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '21090545-7ca7-4776-b22c-e363652d74d2')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                      "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "key": {
                                      "type": "Microsoft.KeyVault/vaults/keys",
                                      "apiVersion": "2022-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "tags": "[parameters('tags')]",
                                      "properties": "[shallowMerge(createArray(createObject('attributes', createObject('enabled', parameters('attributesEnabled'), 'exp', parameters('attributesExp'), 'nbf', parameters('attributesNbf')), 'curveName', parameters('curveName'), 'keyOps', parameters('keyOps'), 'keySize', parameters('keySize'), 'kty', parameters('kty'), 'release_policy', coalesce(parameters('releasePolicy'), createObject())), if(not(empty(parameters('rotationPolicy'))), createObject('rotationPolicy', parameters('rotationPolicy')), createObject())))]"
                                    },
                                    "key_roleAssignments": {
                                      "copy": {
                                        "name": "key_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.KeyVault/vaults/{0}/keys/{1}', parameters('keyVaultName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "key"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "keyUri": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The uri of the key."
                                      },
                                      "value": "[reference('key').keyUri]"
                                    },
                                    "keyUriWithVersion": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The uri with version of the key."
                                      },
                                      "value": "[reference('key').keyUriWithVersion]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the key."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the key."
                                      },
                                      "value": "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyVaultName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the resource group the key was created in."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            },
                            "keyVault_privateEndpoints": {
                              "copy": {
                                "name": "keyVault_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-keyVault-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.KeyVault/vaults', parameters('name')), '/')), coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault'), copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.KeyVault/vaults', parameters('name')), 'groupIds', createArray(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'service'), 'vault')), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "15954548978129725136"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "ipConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "privateLinkServiceConnectionType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the private link service connection."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                              }
                                            },
                                            "privateLinkServiceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of private link service."
                                              }
                                            },
                                            "requestMessage": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private link service connection."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "customDnsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ipConfigurationType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.13.18514",
                                              "templateHash": "5440815542537978381"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "keyVault"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the key vault."
                              },
                              "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('name'))]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the key vault was created in."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the key vault."
                              },
                              "value": "[parameters('name')]"
                            },
                            "uri": {
                              "type": "string",
                              "metadata": {
                                "description": "The URI of the key vault."
                              },
                              "value": "[reference('keyVault').vaultUri]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('keyVault', '2022-07-01', 'full').location]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointOutputType"
                              },
                              "metadata": {
                                "description": "The private endpoints of the key vault."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                                "input": {
                                  "name": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[tryGet(tryGet(reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                                  "customDnsConfigs": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                                  "networkInterfaceResourceIds": "[reference(format('keyVault_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                                }
                              }
                            },
                            "secrets": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/credentialOutputType"
                              },
                              "metadata": {
                                "description": "The properties of the created secrets."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('secrets'), createArray()))))]",
                                "input": {
                                  "resourceId": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.resourceId.value]",
                                  "uri": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.secretUri.value]",
                                  "uriWithVersion": "[reference(format('keyVault_secrets[{0}]', range(0, length(coalesce(parameters('secrets'), createArray())))[copyIndex()])).outputs.secretUriWithVersion.value]"
                                }
                              }
                            },
                            "keys": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/credentialOutputType"
                              },
                              "metadata": {
                                "description": "The properties of the created keys."
                              },
                              "copy": {
                                "count": "[length(range(0, length(coalesce(parameters('keys'), createArray()))))]",
                                "input": {
                                  "resourceId": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.resourceId.value]",
                                  "uri": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.keyUri.value]",
                                  "uriWithVersion": "[reference(format('keyVault_keys[{0}]', range(0, length(coalesce(parameters('keys'), createArray())))[copyIndex()])).outputs.keyUriWithVersion.value]"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_KEY_VAULT_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'vault'), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'identity')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "storageAccount",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "abbrs": {
                    "value": "[variables('abbrs')]"
                  },
                  "resourceToken": {
                    "value": "[variables('resourceToken')]"
                  },
                  "elasticSearchFileShareName": {
                    "value": "[variables('elasticSearchFileShareName')]"
                  },
                  "grafanaFileShareName": {
                    "value": "[variables('grafanaFileShareName')]"
                  },
                  "userAssignedIdentityPrincipalId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_PRINCIPAL_ID.value]"
                  },
                  "keyVaultResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault'), '2022-09-01').outputs.AZURE_RESOURCE_KEY_VAULT_ID.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "4513278154848977075"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "abbrs": {
                      "type": "object"
                    },
                    "resourceToken": {
                      "type": "string"
                    },
                    "userAssignedIdentityPrincipalId": {
                      "type": "string"
                    },
                    "elasticSearchFileShareName": {
                      "type": "string"
                    },
                    "grafanaFileShareName": {
                      "type": "string"
                    },
                    "keyVaultResourceId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "accessKey1Name": "storageAccountKey1"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "storageAccount",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[format('{0}{1}', parameters('abbrs').storageAccounts, parameters('resourceToken'))]"
                          },
                          "kind": {
                            "value": "BlobStorage"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "skuName": {
                            "value": "Standard_LRS"
                          },
                          "tags": {
                            "value": "[parameters('tags')]"
                          },
                          "secretsExportConfiguration": {
                            "value": {
                              "keyVaultResourceId": "[parameters('keyVaultResourceId')]",
                              "accessKey1Name": "[variables('accessKey1Name')]"
                            }
                          },
                          "roleAssignments": {
                            "value": [
                              {
                                "principalId": "[parameters('userAssignedIdentityPrincipalId')]",
                                "principalType": "ServicePrincipal",
                                "roleDefinitionIdOrName": "Storage File Data SMB Share Contributor"
                              }
                            ]
                          },
                          "fileServices": {
                            "value": {
                              "shares": [
                                {
                                  "name": "[parameters('elasticSearchFileShareName')]",
                                  "quota": 1024
                                },
                                {
                                  "name": "[parameters('grafanaFileShareName')]",
                                  "quota": 1024
                                }
                              ]
                            }
                          },
                          "largeFileSharesState": {
                            "value": "Enabled"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.33.93.31351",
                              "templateHash": "947778431058342466"
                            },
                            "name": "Storage Accounts",
                            "description": "This module deploys a Storage Account."
                          },
                          "definitions": {
                            "privateEndpointOutputType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The name of the private endpoint."
                                  }
                                },
                                "resourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resource ID of the private endpoint."
                                  }
                                },
                                "groupId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "The group Id for the private endpoint Group."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "fqdn": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "FQDN that resolves to private endpoint IP address."
                                        }
                                      },
                                      "ipAddresses": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "metadata": {
                                          "description": "A list of private IP addresses of the private endpoint."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "The custom DNS configurations of the private endpoint."
                                  }
                                },
                                "networkInterfaceResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "The IDs of the network interfaces associated with the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "networkAclsType": {
                              "type": "object",
                              "properties": {
                                "resourceAccessRules": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "tenantId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The ID of the tenant in which the resource resides in."
                                        }
                                      },
                                      "resourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource ID of the target service. Can also contain a wildcard, if multiple services e.g. in a resource group should be included."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Sets the resource access rules. Array entries must consist of \"tenantId\" and \"resourceId\" fields only."
                                  }
                                },
                                "bypass": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureServices",
                                    "AzureServices, Logging",
                                    "AzureServices, Logging, Metrics",
                                    "AzureServices, Metrics",
                                    "Logging",
                                    "Logging, Metrics",
                                    "Metrics",
                                    "None"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging,Metrics,AzureServices (For example, \"Logging, Metrics\"), or None to bypass none of those traffics."
                                  }
                                },
                                "virtualNetworkRules": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Sets the virtual network rules."
                                  }
                                },
                                "ipRules": {
                                  "type": "array",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Sets the IP ACL rules."
                                  }
                                },
                                "defaultAction": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Allow",
                                    "Deny"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the default action of allow or deny when no other rules match."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "secretsExportConfigurationType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The key vault name where to store the keys and connection strings generated by the modules."
                                  }
                                },
                                "accessKey1Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The accessKey1 secret name to create."
                                  }
                                },
                                "connectionString1Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The connectionString1 secret name to create."
                                  }
                                },
                                "accessKey2Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The accessKey2 secret name to create."
                                  }
                                },
                                "connectionString2Name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The connectionString2 secret name to create."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "localUserType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the local user used for SFTP Authentication."
                                  }
                                },
                                "hasSharedKey": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                                  }
                                },
                                "hasSshKey": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                                  }
                                },
                                "hasSshPassword": {
                                  "type": "bool",
                                  "metadata": {
                                    "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                                  }
                                },
                                "homeDirectory": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The local user home directory."
                                  }
                                },
                                "permissionScopes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/permissionScopeType"
                                  },
                                  "metadata": {
                                    "description": "Required. The permission scopes of the local user."
                                  }
                                },
                                "sshAuthorizedKeys": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/sshAuthorizedKeyType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The local user SSH authorized keys for SFTP."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_export!": true
                              }
                            },
                            "_1.privateEndpointCustomDnsConfigType": {
                              "type": "object",
                              "properties": {
                                "fqdn": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. FQDN that resolves to private endpoint IP address."
                                  }
                                },
                                "ipAddresses": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "metadata": {
                                    "description": "Required. A list of private IP addresses of the private endpoint."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.privateEndpointIpConfigurationType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the resource that is unique within a resource group."
                                  }
                                },
                                "properties": {
                                  "type": "object",
                                  "properties": {
                                    "groupId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "memberName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to."
                                      }
                                    },
                                    "privateIPAddress": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. Properties of private endpoint IP configurations."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.privateEndpointPrivateDnsZoneGroupType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the Private DNS Zone Group."
                                  }
                                },
                                "privateDnsZoneGroupConfigs": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "name": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. The name of the private DNS Zone Group config."
                                        }
                                      },
                                      "privateDnsZoneResourceId": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. The resource id of the private DNS zone."
                                        }
                                      }
                                    }
                                  },
                                  "metadata": {
                                    "description": "Required. The private DNS Zone Groups to associate the Private Endpoint. A DNS Zone Group can support up to 5 DNS zones."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "_1.secretSetOutputType": {
                              "type": "object",
                              "properties": {
                                "secretResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The resourceId of the exported secret."
                                  }
                                },
                                "secretUri": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI of the exported secret."
                                  }
                                },
                                "secretUriWithVersion": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "The secret URI with version of the exported secret."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "customerManagedKeyWithAutoRotateType": {
                              "type": "object",
                              "properties": {
                                "keyVaultResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The resource ID of a key vault to reference a customer managed key for encryption from."
                                  }
                                },
                                "keyName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of the customer managed key to use for encryption."
                                  }
                                },
                                "keyVersion": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The version of the customer managed key to reference for encryption. If not provided, using version as per 'autoRotationEnabled' setting."
                                  }
                                },
                                "autoRotationEnabled": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable or disable auto-rotating to the latest key version. Default is `true`. If set to `false`, the latest key version at the time of the deployment is used."
                                  }
                                },
                                "userAssignedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. User assigned identity to use when fetching the customer managed key. Required if no system assigned identity is available for use."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a customer-managed key. To be used if the resource type supports auto-rotation of the customer-managed key.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "diagnosticSettingFullType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the diagnostic setting."
                                  }
                                },
                                "logCategoriesAndGroups": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                        }
                                      },
                                      "categoryGroup": {
                                        "type": "string",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                  }
                                },
                                "metricCategories": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "category": {
                                        "type": "string",
                                        "metadata": {
                                          "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                        }
                                      },
                                      "enabled": {
                                        "type": "bool",
                                        "nullable": true,
                                        "metadata": {
                                          "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                        }
                                      }
                                    }
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                  }
                                },
                                "logAnalyticsDestinationType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "AzureDiagnostics",
                                    "Dedicated"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                  }
                                },
                                "workspaceResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "storageAccountResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "eventHubAuthorizationRuleResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                  }
                                },
                                "eventHubName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                  }
                                },
                                "marketplacePartnerResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a lock.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "managedIdentityAllType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource. Required if a user assigned identity is used for encryption."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a managed identity configuration. To be used if both a system-assigned & user-assigned identities are supported by the resource provider.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "permissionScopeType": {
                              "type": "object",
                              "properties": {
                                "permissions": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                                  }
                                },
                                "resourceName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The service used by the local user, e.g. blob, file."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "local-user/main.bicep"
                                }
                              }
                            },
                            "privateEndpointMultiServiceType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private endpoint."
                                  }
                                },
                                "location": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The location to deploy the private endpoint to."
                                  }
                                },
                                "privateLinkServiceConnectionName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name of the private link connection to create."
                                  }
                                },
                                "service": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The subresource to deploy the private endpoint for. For example \"blob\", \"table\", \"queue\" or \"file\" for a Storage Account's Private Endpoints."
                                  }
                                },
                                "subnetResourceId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                  }
                                },
                                "resourceGroupResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID of the Resource Group the Private Endpoint will be created in. If not specified, the Resource Group of the provided Virtual Network Subnet is used."
                                  }
                                },
                                "privateDnsZoneGroup": {
                                  "$ref": "#/definitions/_1.privateEndpointPrivateDnsZoneGroupType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                  }
                                },
                                "isManualConnection": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. If Manual Private Link Connection is required."
                                  }
                                },
                                "manualConnectionRequestMessage": {
                                  "type": "string",
                                  "nullable": true,
                                  "maxLength": 140,
                                  "metadata": {
                                    "description": "Optional. A message passed to the owner of the remote resource with the manual connection request."
                                  }
                                },
                                "customDnsConfigs": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointCustomDnsConfigType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom DNS configurations."
                                  }
                                },
                                "ipConfigurations": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/_1.privateEndpointIpConfigurationType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                  }
                                },
                                "applicationSecurityGroupResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                  }
                                },
                                "customNetworkInterfaceName": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                  }
                                },
                                "lock": {
                                  "$ref": "#/definitions/lockType",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                },
                                "roleAssignments": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/roleAssignmentType"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Array of role assignments to create."
                                  }
                                },
                                "tags": {
                                  "type": "object",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                  }
                                },
                                "enableTelemetry": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enable/Disable usage telemetry for module."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a private endpoint. To be used if the private endpoint's default service / groupId can NOT be assumed (i.e., for services that have more than one subresource, like Storage Account with Blob (blob, table, queue, file, ...).",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "roleAssignmentType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                  }
                                },
                                "roleDefinitionIdOrName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                  }
                                },
                                "principalId": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                  }
                                },
                                "principalType": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Device",
                                    "ForeignGroup",
                                    "Group",
                                    "ServicePrincipal",
                                    "User"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The principal type of the assigned principal ID."
                                  }
                                },
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The description of the role assignment."
                                  }
                                },
                                "condition": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                  }
                                },
                                "conditionVersion": {
                                  "type": "string",
                                  "allowedValues": [
                                    "2.0"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Version of the condition."
                                  }
                                },
                                "delegatedManagedIdentityResourceId": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                  }
                                }
                              },
                              "metadata": {
                                "description": "An AVM-aligned type for a role assignment.",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "secretsOutputType": {
                              "type": "object",
                              "properties": {},
                              "additionalProperties": {
                                "$ref": "#/definitions/_1.secretSetOutputType",
                                "metadata": {
                                  "description": "An exported secret's references."
                                }
                              },
                              "metadata": {
                                "description": "A map of the exported secrets",
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                }
                              }
                            },
                            "sshAuthorizedKeyType": {
                              "type": "object",
                              "properties": {
                                "description": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Description used to store the function/usage of the key."
                                  }
                                },
                                "key": {
                                  "type": "securestring",
                                  "metadata": {
                                    "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                  }
                                }
                              },
                              "metadata": {
                                "__bicep_imported_from!": {
                                  "sourceTemplate": "local-user/main.bicep"
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "maxLength": 24,
                              "metadata": {
                                "description": "Required. Name of the Storage Account. Must be lower-case."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all resources."
                              }
                            },
                            "roleAssignments": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/roleAssignmentType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentityAllType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "kind": {
                              "type": "string",
                              "defaultValue": "StorageV2",
                              "allowedValues": [
                                "Storage",
                                "StorageV2",
                                "BlobStorage",
                                "FileStorage",
                                "BlockBlobStorage"
                              ],
                              "metadata": {
                                "description": "Optional. Type of Storage Account to create."
                              }
                            },
                            "skuName": {
                              "type": "string",
                              "defaultValue": "Standard_GRS",
                              "allowedValues": [
                                "Standard_LRS",
                                "Standard_GRS",
                                "Standard_RAGRS",
                                "Standard_ZRS",
                                "Premium_LRS",
                                "Premium_ZRS",
                                "Standard_GZRS",
                                "Standard_RAGZRS"
                              ],
                              "metadata": {
                                "description": "Optional. Storage Account Sku Name."
                              }
                            },
                            "accessTier": {
                              "type": "string",
                              "defaultValue": "Hot",
                              "allowedValues": [
                                "Premium",
                                "Hot",
                                "Cool",
                                "Cold"
                              ],
                              "metadata": {
                                "description": "Conditional. Required if the Storage Account kind is set to BlobStorage. The access tier is used for billing. The \"Premium\" access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type."
                              }
                            },
                            "largeFileSharesState": {
                              "type": "string",
                              "defaultValue": "Disabled",
                              "allowedValues": [
                                "Disabled",
                                "Enabled"
                              ],
                              "metadata": {
                                "description": "Optional. Allow large file shares if sets to 'Enabled'. It cannot be disabled once it is enabled. Only supported on locally redundant and zone redundant file shares. It cannot be set on FileStorage storage accounts (storage accounts for premium file shares)."
                              }
                            },
                            "azureFilesIdentityBasedAuthentication": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Provides the identity based authentication settings for Azure Files."
                              }
                            },
                            "defaultToOAuthAuthentication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. A boolean flag which indicates whether the default authentication is OAuth or not."
                              }
                            },
                            "allowSharedKeyAccess": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true."
                              }
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointMultiServiceType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Configuration details for private endpoints. For security reasons, it is recommended to use private endpoints whenever possible."
                              }
                            },
                            "managementPolicyRules": {
                              "type": "array",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The Storage Account ManagementPolicies Rules."
                              }
                            },
                            "networkAcls": {
                              "$ref": "#/definitions/networkAclsType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Networks ACLs, this value contains IPs to whitelist and/or Subnet information. If in use, bypass needs to be supplied. For security reasons, it is recommended to set the DefaultAction Deny."
                              }
                            },
                            "requireInfrastructureEncryption": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. A Boolean indicating whether or not the service applies a secondary layer of encryption with platform managed keys for data at rest. For security reasons, it is recommended to set it to true."
                              }
                            },
                            "allowCrossTenantReplication": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Allow or disallow cross AAD tenant object replication."
                              }
                            },
                            "customDomainName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Sets the custom domain name assigned to the storage account. Name is the CNAME source."
                              }
                            },
                            "customDomainUseSubDomainName": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether indirect CName validation is enabled. This should only be set on updates."
                              }
                            },
                            "dnsEndpointType": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "AzureDnsZone",
                                "Standard"
                              ],
                              "metadata": {
                                "description": "Optional. Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier."
                              }
                            },
                            "blobServices": {
                              "type": "object",
                              "defaultValue": "[if(not(equals(parameters('kind'), 'FileStorage')), createObject('containerDeleteRetentionPolicyEnabled', true(), 'containerDeleteRetentionPolicyDays', 7, 'deleteRetentionPolicyEnabled', true(), 'deleteRetentionPolicyDays', 6), createObject())]",
                              "metadata": {
                                "description": "Optional. Blob service and containers to deploy."
                              }
                            },
                            "fileServices": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. File service and shares to deploy."
                              }
                            },
                            "queueServices": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Queue service and queues to create."
                              }
                            },
                            "tableServices": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Table service and tables to create."
                              }
                            },
                            "allowBlobPublicAccess": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Indicates whether public access is enabled for all blobs or containers in the storage account. For security reasons, it is recommended to set it to false."
                              }
                            },
                            "minimumTlsVersion": {
                              "type": "string",
                              "defaultValue": "TLS1_2",
                              "allowedValues": [
                                "TLS1_2",
                                "TLS1_3"
                              ],
                              "metadata": {
                                "description": "Optional. Set the minimum TLS version on request to storage. The TLS versions 1.0 and 1.1 are deprecated and not supported anymore."
                              }
                            },
                            "enableHierarchicalNamespace": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Conditional. If true, enables Hierarchical Namespace for the storage account. Required if enableSftp or enableNfsV3 is set to true."
                              }
                            },
                            "enableSftp": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, enables Secure File Transfer Protocol for the storage account. Requires enableHierarchicalNamespace to be true."
                              }
                            },
                            "localUsers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/localUserType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Local users to deploy for SFTP authentication."
                              }
                            },
                            "isLocalUserEnabled": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Enables local users feature, if set to true."
                              }
                            },
                            "enableNfsV3": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. If true, enables NFS 3.0 support for the storage account. Requires enableHierarchicalNamespace to be true."
                              }
                            },
                            "diagnosticSettings": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/diagnosticSettingFullType"
                              },
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The diagnostic settings of the service."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "allowedCopyScope": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "AAD",
                                "PrivateLink"
                              ],
                              "metadata": {
                                "description": "Optional. Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet."
                              }
                            },
                            "publicNetworkAccess": {
                              "type": "string",
                              "defaultValue": "",
                              "allowedValues": [
                                "",
                                "Enabled",
                                "Disabled"
                              ],
                              "metadata": {
                                "description": "Optional. Whether or not public network access is allowed for this resource. For security reasons it should be disabled. If not specified, it will be disabled by default if private endpoints are set and networkAcls are not set."
                              }
                            },
                            "supportsHttpsTrafficOnly": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Allows HTTPS traffic only to storage service if sets to true."
                              }
                            },
                            "customerManagedKey": {
                              "$ref": "#/definitions/customerManagedKeyWithAutoRotateType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. The customer managed key definition."
                              }
                            },
                            "sasExpirationPeriod": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. The SAS expiration period. DD.HH:MM:SS."
                              }
                            },
                            "keyType": {
                              "type": "string",
                              "nullable": true,
                              "allowedValues": [
                                "Account",
                                "Service"
                              ],
                              "metadata": {
                                "description": "Optional. The keyType to use with Queue & Table services."
                              }
                            },
                            "secretsExportConfiguration": {
                              "$ref": "#/definitions/secretsExportConfigurationType",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Key vault reference and secret settings for the module's secrets export."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "enableReferencedModulesTelemetry": false,
                            "supportsBlobService": "[or(or(or(equals(parameters('kind'), 'BlockBlobStorage'), equals(parameters('kind'), 'BlobStorage')), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                            "supportsFileService": "[or(or(equals(parameters('kind'), 'FileStorage'), equals(parameters('kind'), 'StorageV2')), equals(parameters('kind'), 'Storage'))]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                              "Storage File Data Privileged Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '69566ab7-960f-475b-8e7c-b3118f30c6bd')]",
                              "Storage File Data Privileged Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b8eda974-7b85-4f76-af95-65846b26df6d')]",
                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "cMKKeyVault::cMKKey": {
                              "condition": "[and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), and(not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'))), not(empty(tryGet(parameters('customerManagedKey'), 'keyName')))))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults/keys",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                              "name": "[format('{0}/{1}', last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')), tryGet(parameters('customerManagedKey'), 'keyName'))]"
                            },
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.storage-storageaccount.{0}.{1}', replace('0.18.2', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "cMKKeyVault": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.KeyVault/vaults",
                              "apiVersion": "2023-02-01",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/')[4]]",
                              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'keyVaultResourceId'), '/'))]"
                            },
                            "cMKUserAssignedIdentity": {
                              "condition": "[not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
                              "apiVersion": "2023-01-31",
                              "subscriptionId": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]]",
                              "name": "[last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))]"
                            },
                            "storageAccount": {
                              "type": "Microsoft.Storage/storageAccounts",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "kind": "[parameters('kind')]",
                              "sku": {
                                "name": "[parameters('skuName')]"
                              },
                              "identity": "[variables('identity')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "allowSharedKeyAccess": "[parameters('allowSharedKeyAccess')]",
                                "defaultToOAuthAuthentication": "[parameters('defaultToOAuthAuthentication')]",
                                "allowCrossTenantReplication": "[parameters('allowCrossTenantReplication')]",
                                "allowedCopyScope": "[if(not(empty(parameters('allowedCopyScope'))), parameters('allowedCopyScope'), null())]",
                                "customDomain": {
                                  "name": "[parameters('customDomainName')]",
                                  "useSubDomainName": "[parameters('customDomainUseSubDomainName')]"
                                },
                                "dnsEndpointType": "[if(not(empty(parameters('dnsEndpointType'))), parameters('dnsEndpointType'), null())]",
                                "isLocalUserEnabled": "[parameters('isLocalUserEnabled')]",
                                "encryption": "[union(createObject('keySource', if(not(empty(parameters('customerManagedKey'))), 'Microsoft.Keyvault', 'Microsoft.Storage'), 'services', createObject('blob', if(variables('supportsBlobService'), createObject('enabled', true()), null()), 'file', if(variables('supportsFileService'), createObject('enabled', true()), null()), 'table', createObject('enabled', true(), 'keyType', parameters('keyType')), 'queue', createObject('enabled', true(), 'keyType', parameters('keyType'))), 'keyvaultproperties', if(not(empty(parameters('customerManagedKey'))), createObject('keyname', parameters('customerManagedKey').keyName, 'keyvaulturi', reference('cMKKeyVault').vaultUri, 'keyversion', if(not(empty(tryGet(parameters('customerManagedKey'), 'keyVersion'))), parameters('customerManagedKey').keyVersion, if(coalesce(tryGet(parameters('customerManagedKey'), 'autoRotationEnabled'), true()), null(), last(split(reference('cMKKeyVault::cMKKey').keyUriWithVersion, '/'))))), null()), 'identity', createObject('userAssignedIdentity', if(not(empty(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'))), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[2], split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/')[4]), 'Microsoft.ManagedIdentity/userAssignedIdentities', last(split(tryGet(parameters('customerManagedKey'), 'userAssignedIdentityResourceId'), '/'))), null()))), if(parameters('requireInfrastructureEncryption'), createObject('requireInfrastructureEncryption', if(not(equals(parameters('kind'), 'Storage')), parameters('requireInfrastructureEncryption'), null())), createObject()))]",
                                "accessTier": "[if(and(not(equals(parameters('kind'), 'Storage')), not(equals(parameters('kind'), 'BlockBlobStorage'))), parameters('accessTier'), null())]",
                                "sasPolicy": "[if(not(empty(parameters('sasExpirationPeriod'))), createObject('expirationAction', 'Log', 'sasExpirationPeriod', parameters('sasExpirationPeriod')), null())]",
                                "supportsHttpsTrafficOnly": "[parameters('supportsHttpsTrafficOnly')]",
                                "isHnsEnabled": "[parameters('enableHierarchicalNamespace')]",
                                "isSftpEnabled": "[parameters('enableSftp')]",
                                "isNfsV3Enabled": "[if(parameters('enableNfsV3'), parameters('enableNfsV3'), '')]",
                                "largeFileSharesState": "[if(or(equals(parameters('skuName'), 'Standard_LRS'), equals(parameters('skuName'), 'Standard_ZRS')), parameters('largeFileSharesState'), null())]",
                                "minimumTlsVersion": "[parameters('minimumTlsVersion')]",
                                "networkAcls": "[if(not(empty(parameters('networkAcls'))), union(createObject('resourceAccessRules', tryGet(parameters('networkAcls'), 'resourceAccessRules'), 'defaultAction', coalesce(tryGet(parameters('networkAcls'), 'defaultAction'), 'Deny'), 'virtualNetworkRules', tryGet(parameters('networkAcls'), 'virtualNetworkRules'), 'ipRules', tryGet(parameters('networkAcls'), 'ipRules')), if(contains(parameters('networkAcls'), 'bypass'), createObject('bypass', tryGet(parameters('networkAcls'), 'bypass')), createObject())), createObject('bypass', 'AzureServices', 'defaultAction', 'Deny'))]",
                                "allowBlobPublicAccess": "[parameters('allowBlobPublicAccess')]",
                                "publicNetworkAccess": "[if(not(empty(parameters('publicNetworkAccess'))), parameters('publicNetworkAccess'), if(and(not(empty(parameters('privateEndpoints'))), empty(parameters('networkAcls'))), 'Disabled', null()))]",
                                "azureFilesIdentityBasedAuthentication": "[if(not(empty(parameters('azureFilesIdentityBasedAuthentication'))), parameters('azureFilesIdentityBasedAuthentication'), null())]"
                              },
                              "dependsOn": [
                                "cMKKeyVault::cMKKey",
                                "cMKKeyVault"
                              ]
                            },
                            "storageAccount_diagnosticSettings": {
                              "copy": {
                                "name": "storageAccount_diagnosticSettings",
                                "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                              },
                              "type": "Microsoft.Insights/diagnosticSettings",
                              "apiVersion": "2021-05-01-preview",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                              "properties": {
                                "copy": [
                                  {
                                    "name": "metrics",
                                    "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                    "input": {
                                      "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                      "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                      "timeGrain": null
                                    }
                                  }
                                ],
                                "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_roleAssignments": {
                              "copy": {
                                "name": "storageAccount_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_privateEndpoints": {
                              "copy": {
                                "name": "storageAccount_privateEndpoints",
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-storageAccount-PrivateEndpoint-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "subscriptionId": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[2]]",
                              "resourceGroup": "[split(coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'resourceGroupResourceId'), resourceGroup().id), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "name": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'name'), format('pep-{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex()))]"
                                  },
                                  "privateLinkServiceConnections": "[if(not(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true())), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service))))), createObject('value', null()))]",
                                  "manualPrivateLinkServiceConnections": "[if(equals(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'isManualConnection'), true()), createObject('value', createArray(createObject('name', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateLinkServiceConnectionName'), format('{0}-{1}-{2}', last(split(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '/')), coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service, copyIndex())), 'properties', createObject('privateLinkServiceId', resourceId('Microsoft.Storage/storageAccounts', parameters('name')), 'groupIds', createArray(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].service), 'requestMessage', coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'manualConnectionRequestMessage'), 'Manual approval required.'))))), createObject('value', null()))]",
                                  "subnetResourceId": {
                                    "value": "[coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId]"
                                  },
                                  "enableTelemetry": {
                                    "value": "[variables('enableReferencedModulesTelemetry')]"
                                  },
                                  "location": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'location'), reference(split(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()].subnetResourceId, '/subnets/')[0], '2020-06-01', 'Full').location)]"
                                  },
                                  "lock": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'lock'), parameters('lock'))]"
                                  },
                                  "privateDnsZoneGroup": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'privateDnsZoneGroup')]"
                                  },
                                  "roleAssignments": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'roleAssignments')]"
                                  },
                                  "tags": {
                                    "value": "[coalesce(tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'tags'), parameters('tags'))]"
                                  },
                                  "customDnsConfigs": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customDnsConfigs')]"
                                  },
                                  "ipConfigurations": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'ipConfigurations')]"
                                  },
                                  "applicationSecurityGroupResourceIds": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'applicationSecurityGroupResourceIds')]"
                                  },
                                  "customNetworkInterfaceName": {
                                    "value": "[tryGet(coalesce(parameters('privateEndpoints'), createArray())[copyIndex()], 'customNetworkInterfaceName')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.13.18514",
                                      "templateHash": "15954548978129725136"
                                    },
                                    "name": "Private Endpoints",
                                    "description": "This module deploys a Private Endpoint."
                                  },
                                  "definitions": {
                                    "privateDnsZoneGroupType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the Private DNS Zone Group."
                                          }
                                        },
                                        "privateDnsZoneGroupConfigs": {
                                          "type": "array",
                                          "items": {
                                            "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                          },
                                          "metadata": {
                                            "description": "Required. The private DNS zone groups to associate the private endpoint. A DNS zone group can support up to 5 DNS zones."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "ipConfigurationType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the resource that is unique within a resource group."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "memberName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The member name of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string."
                                              }
                                            },
                                            "privateIPAddress": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. A private IP address obtained from the private endpoint's subnet."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private endpoint IP configurations."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "privateLinkServiceConnectionType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the private link service connection."
                                          }
                                        },
                                        "properties": {
                                          "type": "object",
                                          "properties": {
                                            "groupIds": {
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              },
                                              "metadata": {
                                                "description": "Required. The ID of a group obtained from the remote resource that this private endpoint should connect to. If used with private link service connection, this property must be defined as empty string array `[]`."
                                              }
                                            },
                                            "privateLinkServiceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The resource id of private link service."
                                              }
                                            },
                                            "requestMessage": {
                                              "type": "string",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars."
                                              }
                                            }
                                          },
                                          "metadata": {
                                            "description": "Required. Properties of private link service connection."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "customDnsConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "fqdn": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. FQDN that resolves to private endpoint IP address."
                                          }
                                        },
                                        "ipAddresses": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of private IP addresses of the private endpoint."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "lockType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the name of lock."
                                          }
                                        },
                                        "kind": {
                                          "type": "string",
                                          "allowedValues": [
                                            "CanNotDelete",
                                            "None",
                                            "ReadOnly"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Specify the type of lock."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a lock.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "privateDnsZoneGroupConfigType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the private DNS zone group config."
                                          }
                                        },
                                        "privateDnsZoneResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The resource id of the private DNS zone."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "private-dns-zone-group/main.bicep"
                                        }
                                      }
                                    },
                                    "roleAssignmentType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                          }
                                        },
                                        "roleDefinitionIdOrName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                          }
                                        },
                                        "principalId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                          }
                                        },
                                        "principalType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "Device",
                                            "ForeignGroup",
                                            "Group",
                                            "ServicePrincipal",
                                            "User"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The principal type of the assigned principal ID."
                                          }
                                        },
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The description of the role assignment."
                                          }
                                        },
                                        "condition": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                          }
                                        },
                                        "conditionVersion": {
                                          "type": "string",
                                          "allowedValues": [
                                            "2.0"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Version of the condition."
                                          }
                                        },
                                        "delegatedManagedIdentityResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The Resource Id of the delegated managed identity resource."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a role assignment.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Name of the private endpoint resource to create."
                                      }
                                    },
                                    "subnetResourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. Resource ID of the subnet where the endpoint needs to be created."
                                      }
                                    },
                                    "applicationSecurityGroupResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Application security groups in which the private endpoint IP configuration is included."
                                      }
                                    },
                                    "customNetworkInterfaceName": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The custom name of the network interface attached to the private endpoint."
                                      }
                                    },
                                    "ipConfigurations": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/ipConfigurationType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. A list of IP configurations of the private endpoint. This will be used to map to the First Party Service endpoints."
                                      }
                                    },
                                    "privateDnsZoneGroup": {
                                      "$ref": "#/definitions/privateDnsZoneGroupType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The private DNS zone group to configure for the private endpoint."
                                      }
                                    },
                                    "location": {
                                      "type": "string",
                                      "defaultValue": "[resourceGroup().location]",
                                      "metadata": {
                                        "description": "Optional. Location for all Resources."
                                      }
                                    },
                                    "lock": {
                                      "$ref": "#/definitions/lockType",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The lock settings of the service."
                                      }
                                    },
                                    "roleAssignments": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/roleAssignmentType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Array of role assignments to create."
                                      }
                                    },
                                    "tags": {
                                      "type": "object",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Tags to be applied on all resources/resource groups in this deployment."
                                      }
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Custom DNS configurations."
                                      }
                                    },
                                    "manualPrivateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Used when the network admin does not have access to approve connections to the remote resource. Required if `privateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "privateLinkServiceConnections": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/privateLinkServiceConnectionType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Conditional. A grouping of information about the connection to the remote resource. Required if `manualPrivateLinkServiceConnections` is empty."
                                      }
                                    },
                                    "enableTelemetry": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. Enable/Disable usage telemetry for module."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "copy": [
                                      {
                                        "name": "formattedRoleAssignments",
                                        "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                        "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                      }
                                    ],
                                    "builtInRoleNames": {
                                      "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                      "DNS Resolver Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0f2ebee7-ffd4-4fc0-b3b7-664099fdad5d')]",
                                      "DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'befefa01-2a29-4197-83a8-272ff33ce314')]",
                                      "Domain Services Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'eeaeda52-9324-47f6-8069-5d5bade478b2')]",
                                      "Domain Services Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '361898ef-9ed1-48c2-849c-a832951106bb')]",
                                      "Network Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '4d97b98b-1d4f-4787-a291-c67834d212e7')]",
                                      "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                      "Private DNS Zone Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b12aa53e-6015-4669-85d0-8515ebb3ae7f')]",
                                      "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                      "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]"
                                    }
                                  },
                                  "resources": {
                                    "avmTelemetry": {
                                      "condition": "[parameters('enableTelemetry')]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2024-03-01",
                                      "name": "[format('46d3xbcp.res.network-privateendpoint.{0}.{1}', replace('0.10.1', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                                      "properties": {
                                        "mode": "Incremental",
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "contentVersion": "1.0.0.0",
                                          "resources": [],
                                          "outputs": {
                                            "telemetry": {
                                              "type": "String",
                                              "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "privateEndpoint": {
                                      "type": "Microsoft.Network/privateEndpoints",
                                      "apiVersion": "2023-11-01",
                                      "name": "[parameters('name')]",
                                      "location": "[parameters('location')]",
                                      "tags": "[parameters('tags')]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "applicationSecurityGroups",
                                            "count": "[length(coalesce(parameters('applicationSecurityGroupResourceIds'), createArray()))]",
                                            "input": {
                                              "id": "[coalesce(parameters('applicationSecurityGroupResourceIds'), createArray())[copyIndex('applicationSecurityGroups')]]"
                                            }
                                          }
                                        ],
                                        "customDnsConfigs": "[coalesce(parameters('customDnsConfigs'), createArray())]",
                                        "customNetworkInterfaceName": "[coalesce(parameters('customNetworkInterfaceName'), '')]",
                                        "ipConfigurations": "[coalesce(parameters('ipConfigurations'), createArray())]",
                                        "manualPrivateLinkServiceConnections": "[coalesce(parameters('manualPrivateLinkServiceConnections'), createArray())]",
                                        "privateLinkServiceConnections": "[coalesce(parameters('privateLinkServiceConnections'), createArray())]",
                                        "subnet": {
                                          "id": "[parameters('subnetResourceId')]"
                                        }
                                      }
                                    },
                                    "privateEndpoint_lock": {
                                      "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                                      "type": "Microsoft.Authorization/locks",
                                      "apiVersion": "2020-05-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                                      "properties": {
                                        "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                        "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_roleAssignments": {
                                      "copy": {
                                        "name": "privateEndpoint_roleAssignments",
                                        "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                      },
                                      "type": "Microsoft.Authorization/roleAssignments",
                                      "apiVersion": "2022-04-01",
                                      "scope": "[format('Microsoft.Network/privateEndpoints/{0}', parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Network/privateEndpoints', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                      "properties": {
                                        "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                        "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                        "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                        "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                        "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                        "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                        "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    },
                                    "privateEndpoint_privateDnsZoneGroup": {
                                      "condition": "[not(empty(parameters('privateDnsZoneGroup')))]",
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-PrivateEndpoint-PrivateDnsZoneGroup', uniqueString(deployment().name))]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[tryGet(parameters('privateDnsZoneGroup'), 'name')]"
                                          },
                                          "privateEndpointName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "privateDnsZoneConfigs": {
                                            "value": "[parameters('privateDnsZoneGroup').privateDnsZoneGroupConfigs]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.13.18514",
                                              "templateHash": "5440815542537978381"
                                            },
                                            "name": "Private Endpoint Private DNS Zone Groups",
                                            "description": "This module deploys a Private Endpoint Private DNS Zone Group."
                                          },
                                          "definitions": {
                                            "privateDnsZoneGroupConfigType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name of the private DNS zone group config."
                                                  }
                                                },
                                                "privateDnsZoneResourceId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The resource id of the private DNS zone."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "__bicep_export!": true
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "privateEndpointName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent private endpoint. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "privateDnsZoneConfigs": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/privateDnsZoneGroupConfigType"
                                              },
                                              "minLength": 1,
                                              "maxLength": 5,
                                              "metadata": {
                                                "description": "Required. Array of private DNS zone configurations of the private DNS zone group. A DNS zone group can support up to 5 DNS zones."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the private DNS zone group."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "privateDnsZoneConfigsVar",
                                                "count": "[length(parameters('privateDnsZoneConfigs'))]",
                                                "input": {
                                                  "name": "[coalesce(tryGet(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')], 'name'), last(split(parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId, '/')))]",
                                                  "properties": {
                                                    "privateDnsZoneId": "[parameters('privateDnsZoneConfigs')[copyIndex('privateDnsZoneConfigsVar')].privateDnsZoneResourceId]"
                                                  }
                                                }
                                              }
                                            ]
                                          },
                                          "resources": {
                                            "privateEndpoint": {
                                              "existing": true,
                                              "type": "Microsoft.Network/privateEndpoints",
                                              "apiVersion": "2023-11-01",
                                              "name": "[parameters('privateEndpointName')]"
                                            },
                                            "privateDnsZoneGroup": {
                                              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                                              "apiVersion": "2023-11-01",
                                              "name": "[format('{0}/{1}', parameters('privateEndpointName'), parameters('name'))]",
                                              "properties": {
                                                "privateDnsZoneConfigs": "[variables('privateDnsZoneConfigsVar')]"
                                              }
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the private endpoint DNS zone group."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the private endpoint DNS zone group."
                                              },
                                              "value": "[resourceId('Microsoft.Network/privateEndpoints/privateDnsZoneGroups', parameters('privateEndpointName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group the private endpoint DNS zone group was deployed into."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "privateEndpoint"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group the private endpoint was deployed into."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the private endpoint."
                                      },
                                      "value": "[resourceId('Microsoft.Network/privateEndpoints', parameters('name'))]"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the private endpoint."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "location": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The location the resource was deployed into."
                                      },
                                      "value": "[reference('privateEndpoint', '2023-11-01', 'full').location]"
                                    },
                                    "customDnsConfigs": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/customDnsConfigType"
                                      },
                                      "metadata": {
                                        "description": "The custom DNS configurations of the private endpoint."
                                      },
                                      "value": "[reference('privateEndpoint').customDnsConfigs]"
                                    },
                                    "networkInterfaceResourceIds": {
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      },
                                      "metadata": {
                                        "description": "The resource IDs of the network interfaces associated with the private endpoint."
                                      },
                                      "value": "[map(reference('privateEndpoint').networkInterfaces, lambda('nic', lambdaVariables('nic').id))]"
                                    },
                                    "groupId": {
                                      "type": "string",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "The group Id for the private endpoint Group."
                                      },
                                      "value": "[coalesce(tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'manualPrivateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0), tryGet(tryGet(tryGet(tryGet(reference('privateEndpoint'), 'privateLinkServiceConnections'), 0, 'properties'), 'groupIds'), 0))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_managementPolicies": {
                              "condition": "[not(empty(coalesce(parameters('managementPolicyRules'), createArray())))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-ManagementPolicies', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "rules": {
                                    "value": "[coalesce(parameters('managementPolicyRules'), createArray())]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "10504956743360699891"
                                    },
                                    "name": "Storage Account Management Policies",
                                    "description": "This module deploys a Storage Account Management Policy."
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "rules": {
                                      "type": "array",
                                      "metadata": {
                                        "description": "Required. The Storage Account ManagementPolicies Rules."
                                      }
                                    }
                                  },
                                  "resources": [
                                    {
                                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                                      "apiVersion": "2023-01-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]",
                                      "properties": {
                                        "policy": {
                                          "rules": "[parameters('rules')]"
                                        }
                                      }
                                    }
                                  ],
                                  "outputs": {
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed management policy."
                                      },
                                      "value": "default"
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed management policy."
                                      },
                                      "value": "default"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed management policy."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount",
                                "storageAccount_blobServices"
                              ]
                            },
                            "storageAccount_localUsers": {
                              "copy": {
                                "name": "storageAccount_localUsers",
                                "count": "[length(coalesce(parameters('localUsers'), createArray()))]"
                              },
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-LocalUsers-{1}', uniqueString(deployment().name, parameters('location')), copyIndex())]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "name": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].name]"
                                  },
                                  "hasSshKey": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshKey]"
                                  },
                                  "hasSshPassword": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].hasSshPassword]"
                                  },
                                  "permissionScopes": {
                                    "value": "[coalesce(parameters('localUsers'), createArray())[copyIndex()].permissionScopes]"
                                  },
                                  "hasSharedKey": {
                                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'hasSharedKey')]"
                                  },
                                  "homeDirectory": {
                                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'homeDirectory')]"
                                  },
                                  "sshAuthorizedKeys": {
                                    "value": "[tryGet(coalesce(parameters('localUsers'), createArray())[copyIndex()], 'sshAuthorizedKeys')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "5655292159520921149"
                                    },
                                    "name": "Storage Account Local Users",
                                    "description": "This module deploys a Storage Account Local User, which is used for SFTP authentication."
                                  },
                                  "definitions": {
                                    "sshAuthorizedKeyType": {
                                      "type": "object",
                                      "properties": {
                                        "description": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Description used to store the function/usage of the key."
                                          }
                                        },
                                        "key": {
                                          "type": "securestring",
                                          "metadata": {
                                            "description": "Required. SSH public key base64 encoded. The format should be: '{keyType} {keyData}', e.g. ssh-rsa AAAABBBB."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    },
                                    "permissionScopeType": {
                                      "type": "object",
                                      "properties": {
                                        "permissions": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The permissions for the local user. Possible values include: Read (r), Write (w), Delete (d), List (l), and Create (c)."
                                          }
                                        },
                                        "resourceName": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of resource, normally the container name or the file share name, used by the local user."
                                          }
                                        },
                                        "service": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The service used by the local user, e.g. blob, file."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the local user used for SFTP Authentication."
                                      }
                                    },
                                    "hasSharedKey": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Indicates whether shared key exists. Set it to false to remove existing shared key."
                                      }
                                    },
                                    "hasSshKey": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether SSH key exists. Set it to false to remove existing SSH key."
                                      }
                                    },
                                    "hasSshPassword": {
                                      "type": "bool",
                                      "metadata": {
                                        "description": "Required. Indicates whether SSH password exists. Set it to false to remove existing SSH password."
                                      }
                                    },
                                    "homeDirectory": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. The local user home directory."
                                      }
                                    },
                                    "permissionScopes": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/permissionScopeType"
                                      },
                                      "metadata": {
                                        "description": "Required. The permission scopes of the local user."
                                      }
                                    },
                                    "sshAuthorizedKeys": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/sshAuthorizedKeyType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The local user SSH authorized keys for SFTP."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "localUsers": {
                                      "type": "Microsoft.Storage/storageAccounts/localUsers",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                                      "properties": {
                                        "hasSharedKey": "[parameters('hasSharedKey')]",
                                        "hasSshKey": "[parameters('hasSshKey')]",
                                        "hasSshPassword": "[parameters('hasSshPassword')]",
                                        "homeDirectory": "[parameters('homeDirectory')]",
                                        "permissionScopes": "[parameters('permissionScopes')]",
                                        "sshAuthorizedKeys": "[parameters('sshAuthorizedKeys')]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed local user."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed local user."
                                      },
                                      "value": "[resourceGroup().name]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed local user."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/localUsers', parameters('storageAccountName'), parameters('name'))]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_blobServices": {
                              "condition": "[not(empty(parameters('blobServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-BlobServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "containers": {
                                    "value": "[tryGet(parameters('blobServices'), 'containers')]"
                                  },
                                  "automaticSnapshotPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'automaticSnapshotPolicyEnabled')]"
                                  },
                                  "changeFeedEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'changeFeedEnabled')]"
                                  },
                                  "changeFeedRetentionInDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'changeFeedRetentionInDays')]"
                                  },
                                  "containerDeleteRetentionPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyEnabled')]"
                                  },
                                  "containerDeleteRetentionPolicyDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyDays')]"
                                  },
                                  "containerDeleteRetentionPolicyAllowPermanentDelete": {
                                    "value": "[tryGet(parameters('blobServices'), 'containerDeleteRetentionPolicyAllowPermanentDelete')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('blobServices'), 'corsRules')]"
                                  },
                                  "defaultServiceVersion": {
                                    "value": "[tryGet(parameters('blobServices'), 'defaultServiceVersion')]"
                                  },
                                  "deleteRetentionPolicyAllowPermanentDelete": {
                                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyAllowPermanentDelete')]"
                                  },
                                  "deleteRetentionPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyEnabled')]"
                                  },
                                  "deleteRetentionPolicyDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'deleteRetentionPolicyDays')]"
                                  },
                                  "isVersioningEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'isVersioningEnabled')]"
                                  },
                                  "lastAccessTimeTrackingPolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'lastAccessTimeTrackingPolicyEnabled')]"
                                  },
                                  "restorePolicyEnabled": {
                                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyEnabled')]"
                                  },
                                  "restorePolicyDays": {
                                    "value": "[tryGet(parameters('blobServices'), 'restorePolicyDays')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('blobServices'), 'diagnosticSettings')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "11461945096578509088"
                                    },
                                    "name": "Storage Account blob Services",
                                    "description": "This module deploys a Storage Account Blob Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "automaticSnapshotPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Automatic Snapshot is enabled if set to true."
                                      }
                                    },
                                    "changeFeedEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for change feed events. Indicates whether change feed event logging is enabled for the Blob service."
                                      }
                                    },
                                    "changeFeedRetentionInDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 1,
                                      "maxValue": 146000,
                                      "metadata": {
                                        "description": "Optional. Indicates whether change feed event logging is enabled for the Blob service. Indicates the duration of changeFeed retention in days. If left blank, it indicates an infinite retention of the change feed."
                                      }
                                    },
                                    "containerDeleteRetentionPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for container soft delete. Indicates whether DeleteRetentionPolicy is enabled."
                                      }
                                    },
                                    "containerDeleteRetentionPolicyDays": {
                                      "type": "int",
                                      "nullable": true,
                                      "minValue": 1,
                                      "maxValue": 365,
                                      "metadata": {
                                        "description": "Optional. Indicates the number of days that the deleted item should be retained."
                                      }
                                    },
                                    "containerDeleteRetentionPolicyAllowPermanentDelete": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "defaultServiceVersion": {
                                      "type": "string",
                                      "defaultValue": "",
                                      "metadata": {
                                        "description": "Optional. Indicates the default version to use for requests to the Blob service if an incoming request's version is not specified. Possible values include version 2008-10-27 and all more recent versions."
                                      }
                                    },
                                    "deleteRetentionPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": true,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for blob soft delete."
                                      }
                                    },
                                    "deleteRetentionPolicyDays": {
                                      "type": "int",
                                      "defaultValue": 7,
                                      "minValue": 1,
                                      "maxValue": 365,
                                      "metadata": {
                                        "description": "Optional. Indicates the number of days that the deleted blob should be retained."
                                      }
                                    },
                                    "deleteRetentionPolicyAllowPermanentDelete": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. This property when set to true allows deletion of the soft deleted blob versions and snapshots. This property cannot be used with blob restore policy. This property only applies to blob service and does not apply to containers or file share."
                                      }
                                    },
                                    "isVersioningEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. Use versioning to automatically maintain previous versions of your blobs."
                                      }
                                    },
                                    "lastAccessTimeTrackingPolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The blob service property to configure last access time based tracking policy. When set to true last access time based tracking is enabled."
                                      }
                                    },
                                    "restorePolicyEnabled": {
                                      "type": "bool",
                                      "defaultValue": false,
                                      "metadata": {
                                        "description": "Optional. The blob service properties for blob restore policy. If point-in-time restore is enabled, then versioning, change feed, and blob soft delete must also be enabled."
                                      }
                                    },
                                    "restorePolicyDays": {
                                      "type": "int",
                                      "defaultValue": 7,
                                      "minValue": 1,
                                      "metadata": {
                                        "description": "Optional. How long this blob can be restored. It should be less than DeleteRetentionPolicy days."
                                      }
                                    },
                                    "containers": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Blob containers to create."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "name": "default"
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2022-09-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "blobServices": {
                                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "properties": {
                                        "automaticSnapshotPolicyEnabled": "[parameters('automaticSnapshotPolicyEnabled')]",
                                        "changeFeed": "[if(parameters('changeFeedEnabled'), createObject('enabled', true(), 'retentionInDays', parameters('changeFeedRetentionInDays')), null())]",
                                        "containerDeleteRetentionPolicy": {
                                          "enabled": "[parameters('containerDeleteRetentionPolicyEnabled')]",
                                          "days": "[parameters('containerDeleteRetentionPolicyDays')]",
                                          "allowPermanentDelete": "[if(equals(parameters('containerDeleteRetentionPolicyEnabled'), true()), parameters('containerDeleteRetentionPolicyAllowPermanentDelete'), null())]"
                                        },
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                        "defaultServiceVersion": "[if(not(empty(parameters('defaultServiceVersion'))), parameters('defaultServiceVersion'), null())]",
                                        "deleteRetentionPolicy": {
                                          "enabled": "[parameters('deleteRetentionPolicyEnabled')]",
                                          "days": "[parameters('deleteRetentionPolicyDays')]",
                                          "allowPermanentDelete": "[if(and(parameters('deleteRetentionPolicyEnabled'), parameters('deleteRetentionPolicyAllowPermanentDelete')), true(), null())]"
                                        },
                                        "isVersioningEnabled": "[parameters('isVersioningEnabled')]",
                                        "lastAccessTimeTrackingPolicy": "[if(not(equals(reference('storageAccount', '2022-09-01', 'full').kind, 'Storage')), createObject('enable', parameters('lastAccessTimeTrackingPolicyEnabled'), 'name', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 'AccessTimeTracking', null()), 'trackingGranularityInDays', if(equals(parameters('lastAccessTimeTrackingPolicyEnabled'), true()), 1, null())), null())]",
                                        "restorePolicy": "[if(parameters('restorePolicyEnabled'), createObject('enabled', true(), 'days', parameters('restorePolicyDays')), null())]"
                                      },
                                      "dependsOn": [
                                        "storageAccount"
                                      ]
                                    },
                                    "blobServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "blobServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "blobServices"
                                      ]
                                    },
                                    "blobServices_container": {
                                      "copy": {
                                        "name": "blobServices_container",
                                        "count": "[length(coalesce(parameters('containers'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Container-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "blobServiceName": {
                                            "value": "[variables('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('containers'), createArray())[copyIndex()].name]"
                                          },
                                          "defaultEncryptionScope": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'defaultEncryptionScope')]"
                                          },
                                          "denyEncryptionScopeOverride": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'denyEncryptionScopeOverride')]"
                                          },
                                          "enableNfsV3AllSquash": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3AllSquash')]"
                                          },
                                          "enableNfsV3RootSquash": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'enableNfsV3RootSquash')]"
                                          },
                                          "immutableStorageWithVersioningEnabled": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutableStorageWithVersioningEnabled')]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "publicAccess": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'publicAccess')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'roleAssignments')]"
                                          },
                                          "immutabilityPolicyProperties": {
                                            "value": "[tryGet(coalesce(parameters('containers'), createArray())[copyIndex()], 'immutabilityPolicyProperties')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.93.31351",
                                              "templateHash": "11560675453246401508"
                                            },
                                            "name": "Storage Account Blob Containers",
                                            "description": "This module deploys a Storage Account Blob Container."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "blobServiceName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. The name of the parent Blob Service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the storage container to deploy."
                                              }
                                            },
                                            "defaultEncryptionScope": {
                                              "type": "string",
                                              "defaultValue": "",
                                              "metadata": {
                                                "description": "Optional. Default the container to use specified encryption scope for all writes."
                                              }
                                            },
                                            "denyEncryptionScopeOverride": {
                                              "type": "bool",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Block override of encryption scope from the container default."
                                              }
                                            },
                                            "enableNfsV3AllSquash": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Enable NFSv3 all squash on blob container."
                                              }
                                            },
                                            "enableNfsV3RootSquash": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. Enable NFSv3 root squash on blob container."
                                              }
                                            },
                                            "immutableStorageWithVersioningEnabled": {
                                              "type": "bool",
                                              "defaultValue": false,
                                              "metadata": {
                                                "description": "Optional. This is an immutable property, when set to true it enables object level immutability at the container level. The property is immutable and can only be set to true at the container creation time. Existing containers must undergo a migration process."
                                              }
                                            },
                                            "immutabilityPolicyName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Optional. Name of the immutable policy."
                                              }
                                            },
                                            "immutabilityPolicyProperties": {
                                              "type": "object",
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Configure immutability policy."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. A name-value pair to associate with the container as metadata."
                                              }
                                            },
                                            "publicAccess": {
                                              "type": "string",
                                              "defaultValue": "None",
                                              "allowedValues": [
                                                "Container",
                                                "Blob",
                                                "None"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Specifies whether data in the container may be accessed publicly and the level of access."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Blob Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                                              "Storage Blob Data Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                                              "Storage Blob Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '2a2b9908-6ea1-4ae2-8e65-a410df84e7d1')]",
                                              "Storage Blob Delegator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'db58b8e5-c6ad-4a2a-8342-4190687cbf4a')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::blobServices": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/blobServices",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('blobServiceName'))]"
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2022-09-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "container": {
                                              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                              "properties": {
                                                "defaultEncryptionScope": "[if(not(empty(parameters('defaultEncryptionScope'))), parameters('defaultEncryptionScope'), null())]",
                                                "denyEncryptionScopeOverride": "[parameters('denyEncryptionScopeOverride')]",
                                                "enableNfsV3AllSquash": "[if(equals(parameters('enableNfsV3AllSquash'), true()), parameters('enableNfsV3AllSquash'), null())]",
                                                "enableNfsV3RootSquash": "[if(equals(parameters('enableNfsV3RootSquash'), true()), parameters('enableNfsV3RootSquash'), null())]",
                                                "immutableStorageWithVersioning": "[if(equals(parameters('immutableStorageWithVersioningEnabled'), true()), createObject('enabled', parameters('immutableStorageWithVersioningEnabled')), null())]",
                                                "metadata": "[parameters('metadata')]",
                                                "publicAccess": "[parameters('publicAccess')]"
                                              }
                                            },
                                            "container_roleAssignments": {
                                              "copy": {
                                                "name": "container_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "container"
                                              ]
                                            },
                                            "immutabilityPolicy": {
                                              "condition": "[not(empty(coalesce(parameters('immutabilityPolicyProperties'), createObject())))]",
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[parameters('immutabilityPolicyName')]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "storageAccountName": {
                                                    "value": "[parameters('storageAccountName')]"
                                                  },
                                                  "containerName": {
                                                    "value": "[parameters('name')]"
                                                  },
                                                  "immutabilityPeriodSinceCreationInDays": {
                                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'immutabilityPeriodSinceCreationInDays')]"
                                                  },
                                                  "allowProtectedAppendWrites": {
                                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWrites')]"
                                                  },
                                                  "allowProtectedAppendWritesAll": {
                                                    "value": "[tryGet(parameters('immutabilityPolicyProperties'), 'allowProtectedAppendWritesAll')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "metadata": {
                                                    "_generator": {
                                                      "name": "bicep",
                                                      "version": "0.33.93.31351",
                                                      "templateHash": "8061556339565534458"
                                                    },
                                                    "name": "Storage Account Blob Container Immutability Policies",
                                                    "description": "This module deploys a Storage Account Blob Container Immutability Policy."
                                                  },
                                                  "parameters": {
                                                    "storageAccountName": {
                                                      "type": "string",
                                                      "maxLength": 24,
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "containerName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Conditional. The name of the parent container to apply the policy to. Required if the template is used in a standalone deployment."
                                                      }
                                                    },
                                                    "immutabilityPeriodSinceCreationInDays": {
                                                      "type": "int",
                                                      "defaultValue": 365,
                                                      "metadata": {
                                                        "description": "Optional. The immutability period for the blobs in the container since the policy creation, in days."
                                                      }
                                                    },
                                                    "allowProtectedAppendWrites": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API."
                                                      }
                                                    },
                                                    "allowProtectedAppendWritesAll": {
                                                      "type": "bool",
                                                      "defaultValue": true,
                                                      "metadata": {
                                                        "description": "Optional. This property can only be changed for unlocked time-based retention policies. When enabled, new blocks can be written to both \"Append and Block Blobs\" while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted. This property cannot be changed with ExtendImmutabilityPolicy API. The \"allowProtectedAppendWrites\" and \"allowProtectedAppendWritesAll\" properties are mutually exclusive."
                                                      }
                                                    }
                                                  },
                                                  "resources": [
                                                    {
                                                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies",
                                                      "apiVersion": "2022-09-01",
                                                      "name": "[format('{0}/{1}/{2}/{3}', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]",
                                                      "properties": {
                                                        "immutabilityPeriodSinceCreationInDays": "[parameters('immutabilityPeriodSinceCreationInDays')]",
                                                        "allowProtectedAppendWrites": "[parameters('allowProtectedAppendWrites')]",
                                                        "allowProtectedAppendWritesAll": "[parameters('allowProtectedAppendWritesAll')]"
                                                      }
                                                    }
                                                  ],
                                                  "outputs": {
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The name of the deployed immutability policy."
                                                      },
                                                      "value": "default"
                                                    },
                                                    "resourceId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource ID of the deployed immutability policy."
                                                      },
                                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers/immutabilityPolicies', parameters('storageAccountName'), 'default', parameters('containerName'), 'default')]"
                                                    },
                                                    "resourceGroupName": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "The resource group of the deployed immutability policy."
                                                      },
                                                      "value": "[resourceGroup().name]"
                                                    }
                                                  }
                                                }
                                              },
                                              "dependsOn": [
                                                "container"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed container."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed container."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', parameters('storageAccountName'), parameters('blobServiceName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed container."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "blobServices"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed blob service."
                                      },
                                      "value": "[variables('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed blob service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/blobServices', parameters('storageAccountName'), variables('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed blob service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_fileServices": {
                              "condition": "[not(empty(parameters('fileServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-FileServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('fileServices'), 'diagnosticSettings')]"
                                  },
                                  "protocolSettings": {
                                    "value": "[tryGet(parameters('fileServices'), 'protocolSettings')]"
                                  },
                                  "shareDeleteRetentionPolicy": {
                                    "value": "[tryGet(parameters('fileServices'), 'shareDeleteRetentionPolicy')]"
                                  },
                                  "shares": {
                                    "value": "[tryGet(parameters('fileServices'), 'shares')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "3168394810831105529"
                                    },
                                    "name": "Storage Account File Share Services",
                                    "description": "This module deploys a Storage Account File Share Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "name": {
                                      "type": "string",
                                      "defaultValue": "default",
                                      "metadata": {
                                        "description": "Optional. The name of the file service."
                                      }
                                    },
                                    "protocolSettings": {
                                      "type": "object",
                                      "defaultValue": {},
                                      "metadata": {
                                        "description": "Optional. Protocol settings for file service."
                                      }
                                    },
                                    "shareDeleteRetentionPolicy": {
                                      "type": "object",
                                      "defaultValue": {
                                        "enabled": true,
                                        "days": 7
                                      },
                                      "metadata": {
                                        "description": "Optional. The service properties for soft delete."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    },
                                    "shares": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. File shares to create."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "fileServices": {
                                      "type": "Microsoft.Storage/storageAccounts/fileServices",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('name'))]",
                                      "properties": {
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]",
                                        "protocolSettings": "[parameters('protocolSettings')]",
                                        "shareDeleteRetentionPolicy": "[parameters('shareDeleteRetentionPolicy')]"
                                      }
                                    },
                                    "fileServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "fileServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/fileServices/{1}', parameters('storageAccountName'), parameters('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', parameters('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "fileServices"
                                      ]
                                    },
                                    "fileServices_shares": {
                                      "copy": {
                                        "name": "fileServices_shares",
                                        "count": "[length(coalesce(parameters('shares'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-shares-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "fileServicesName": {
                                            "value": "[parameters('name')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('shares'), createArray())[copyIndex()].name]"
                                          },
                                          "accessTier": {
                                            "value": "[coalesce(tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'accessTier'), if(equals(reference('storageAccount', '2023-04-01', 'full').kind, 'FileStorage'), 'Premium', 'TransactionOptimized'))]"
                                          },
                                          "enabledProtocols": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'enabledProtocols')]"
                                          },
                                          "rootSquash": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'rootSquash')]"
                                          },
                                          "shareQuota": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'shareQuota')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('shares'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.93.31351",
                                              "templateHash": "12044655551245282190"
                                            },
                                            "name": "Storage Account File Shares",
                                            "description": "This module deploys a Storage Account File Share."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "fileServicesName": {
                                              "type": "string",
                                              "defaultValue": "default",
                                              "metadata": {
                                                "description": "Conditional. The name of the parent file service. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the file share to create."
                                              }
                                            },
                                            "accessTier": {
                                              "type": "string",
                                              "defaultValue": "TransactionOptimized",
                                              "allowedValues": [
                                                "Premium",
                                                "Hot",
                                                "Cool",
                                                "TransactionOptimized"
                                              ],
                                              "metadata": {
                                                "description": "Conditional. Access tier for specific share. Required if the Storage Account kind is set to FileStorage (should be set to \"Premium\"). GpV2 account can choose between TransactionOptimized (default), Hot, and Cool."
                                              }
                                            },
                                            "shareQuota": {
                                              "type": "int",
                                              "defaultValue": 5120,
                                              "metadata": {
                                                "description": "Optional. The maximum size of the share, in gigabytes. Must be greater than 0, and less than or equal to 5120 (5TB). For Large File Shares, the maximum size is 102400 (100TB)."
                                              }
                                            },
                                            "enabledProtocols": {
                                              "type": "string",
                                              "defaultValue": "SMB",
                                              "allowedValues": [
                                                "NFS",
                                                "SMB"
                                              ],
                                              "metadata": {
                                                "description": "Optional. The authentication protocol that is used for the file share. Can only be specified when creating a share."
                                              }
                                            },
                                            "rootSquash": {
                                              "type": "string",
                                              "defaultValue": "NoRootSquash",
                                              "allowedValues": [
                                                "AllSquash",
                                                "NoRootSquash",
                                                "RootSquash"
                                              ],
                                              "metadata": {
                                                "description": "Optional. Permissions for NFS file shares are enforced by the client OS rather than the Azure Files service. Toggling the root squash behavior reduces the rights of the root user for NFS shares."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage File Data SMB Share Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0c867c2a-1d8c-454a-a3db-ab2ea1bdc8bb')]",
                                              "Storage File Data SMB Share Elevated Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'a7264617-510b-434b-a828-9731dc254ea7')]",
                                              "Storage File Data SMB Share Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'aba4ae5f-2193-4029-9191-0cb91df5e314')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::fileService": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/fileServices",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), parameters('fileServicesName'))]"
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "fileShare": {
                                              "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
                                              "apiVersion": "2023-01-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]",
                                              "properties": {
                                                "accessTier": "[parameters('accessTier')]",
                                                "shareQuota": "[parameters('shareQuota')]",
                                                "rootSquash": "[if(equals(parameters('enabledProtocols'), 'NFS'), parameters('rootSquash'), null())]",
                                                "enabledProtocols": "[parameters('enabledProtocols')]"
                                              }
                                            },
                                            "fileShare_roleAssignments": {
                                              "copy": {
                                                "name": "fileShare_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Resources/deployments",
                                              "apiVersion": "2022-09-01",
                                              "name": "[format('{0}-Share-Rbac-{1}', uniqueString(deployment().name), copyIndex())]",
                                              "properties": {
                                                "expressionEvaluationOptions": {
                                                  "scope": "inner"
                                                },
                                                "mode": "Incremental",
                                                "parameters": {
                                                  "scope": {
                                                    "value": "[replace(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), '/shares/', '/fileshares/')]"
                                                  },
                                                  "name": {
                                                    "value": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]"
                                                  },
                                                  "roleDefinitionId": {
                                                    "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]"
                                                  },
                                                  "principalId": {
                                                    "value": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]"
                                                  },
                                                  "principalType": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]"
                                                  },
                                                  "condition": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]"
                                                  },
                                                  "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), createObject('value', coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0')), createObject('value', null()))]",
                                                  "delegatedManagedIdentityResourceId": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                                  },
                                                  "description": {
                                                    "value": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]"
                                                  }
                                                },
                                                "template": {
                                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                                  "contentVersion": "1.0.0.0",
                                                  "parameters": {
                                                    "scope": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The scope to deploy the role assignment to."
                                                      }
                                                    },
                                                    "name": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The name of the role assignment."
                                                      }
                                                    },
                                                    "roleDefinitionId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The role definition Id to assign."
                                                      }
                                                    },
                                                    "principalId": {
                                                      "type": "string",
                                                      "metadata": {
                                                        "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                      }
                                                    },
                                                    "principalType": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "Device",
                                                        "ForeignGroup",
                                                        "Group",
                                                        "ServicePrincipal",
                                                        "User",
                                                        ""
                                                      ],
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The principal type of the assigned principal ID."
                                                      }
                                                    },
                                                    "description": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The description of the role assignment."
                                                      }
                                                    },
                                                    "condition": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\""
                                                      }
                                                    },
                                                    "conditionVersion": {
                                                      "type": "string",
                                                      "allowedValues": [
                                                        "2.0"
                                                      ],
                                                      "defaultValue": "2.0",
                                                      "metadata": {
                                                        "description": "Optional. Version of the condition."
                                                      }
                                                    },
                                                    "delegatedManagedIdentityResourceId": {
                                                      "type": "string",
                                                      "defaultValue": "",
                                                      "metadata": {
                                                        "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                      }
                                                    }
                                                  },
                                                  "resources": [
                                                    {
                                                      "type": "Microsoft.Authorization/roleAssignments",
                                                      "apiVersion": "2022-04-01",
                                                      "scope": "[parameters('scope')]",
                                                      "name": "[parameters('name')]",
                                                      "properties": {
                                                        "roleDefinitionId": "[parameters('roleDefinitionId')]",
                                                        "principalId": "[parameters('principalId')]",
                                                        "description": "[parameters('description')]",
                                                        "principalType": "[if(not(empty(parameters('principalType'))), parameters('principalType'), null())]",
                                                        "condition": "[if(not(empty(parameters('condition'))), parameters('condition'), null())]",
                                                        "conditionVersion": "[if(and(not(empty(parameters('conditionVersion'))), not(empty(parameters('condition')))), parameters('conditionVersion'), null())]",
                                                        "delegatedManagedIdentityResourceId": "[if(not(empty(parameters('delegatedManagedIdentityResourceId'))), parameters('delegatedManagedIdentityResourceId'), null())]"
                                                      }
                                                    }
                                                  ]
                                                }
                                              },
                                              "dependsOn": [
                                                "fileShare"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed file share."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed file share."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices/shares', parameters('storageAccountName'), parameters('fileServicesName'), parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed file share."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      },
                                      "dependsOn": [
                                        "fileServices",
                                        "storageAccount"
                                      ]
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[parameters('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/fileServices', parameters('storageAccountName'), parameters('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_queueServices": {
                              "condition": "[not(empty(parameters('queueServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-QueueServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('queueServices'), 'diagnosticSettings')]"
                                  },
                                  "queues": {
                                    "value": "[tryGet(parameters('queueServices'), 'queues')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('queueServices'), 'corsRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "1736438454543575457"
                                    },
                                    "name": "Storage Account Queue Services",
                                    "description": "This module deploys a Storage Account Queue Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "queues": {
                                      "type": "array",
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. Queues to create."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "name": "default"
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "queueServices": {
                                      "type": "Microsoft.Storage/storageAccounts/queueServices",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "properties": {
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                                      }
                                    },
                                    "queueServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "queueServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "queueServices"
                                      ]
                                    },
                                    "queueServices_queues": {
                                      "copy": {
                                        "name": "queueServices_queues",
                                        "count": "[length(coalesce(parameters('queues'), createArray()))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Queue-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "name": {
                                            "value": "[coalesce(parameters('queues'), createArray())[copyIndex()].name]"
                                          },
                                          "metadata": {
                                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'metadata')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(coalesce(parameters('queues'), createArray())[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.93.31351",
                                              "templateHash": "6383154227554431205"
                                            },
                                            "name": "Storage Account Queues",
                                            "description": "This module deploys a Storage Account Queue."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. The name of the storage queue to deploy."
                                              }
                                            },
                                            "metadata": {
                                              "type": "object",
                                              "defaultValue": {},
                                              "metadata": {
                                                "description": "Optional. A name-value pair that represents queue metadata."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Queue Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
                                              "Storage Queue Data Message Processor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8a0f0c08-91a1-4084-bc3d-661d67233fed')]",
                                              "Storage Queue Data Message Sender": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c6a89b2d-59bc-44d0-9896-0f6e12d7b80a')]",
                                              "Storage Queue Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '19e7f393-937e-4f77-808e-94535e297925')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::queueServices": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/queueServices",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "queue": {
                                              "type": "Microsoft.Storage/storageAccounts/queueServices/queues",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                              "properties": {
                                                "metadata": "[parameters('metadata')]"
                                              }
                                            },
                                            "queue_roleAssignments": {
                                              "copy": {
                                                "name": "queue_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/queueServices/{1}/queues/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "queue"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed queue."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed queue."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices/queues', parameters('storageAccountName'), 'default', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed queue."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed file share service."
                                      },
                                      "value": "[variables('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed file share service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/queueServices', parameters('storageAccountName'), variables('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed file share service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "storageAccount_tableServices": {
                              "condition": "[not(empty(parameters('tableServices')))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-Storage-TableServices', uniqueString(deployment().name, parameters('location')))]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "storageAccountName": {
                                    "value": "[parameters('name')]"
                                  },
                                  "diagnosticSettings": {
                                    "value": "[tryGet(parameters('tableServices'), 'diagnosticSettings')]"
                                  },
                                  "tables": {
                                    "value": "[tryGet(parameters('tableServices'), 'tables')]"
                                  },
                                  "corsRules": {
                                    "value": "[tryGet(parameters('tableServices'), 'corsRules')]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "12583903411447171294"
                                    },
                                    "name": "Storage Account Table Services",
                                    "description": "This module deploys a Storage Account Table Service."
                                  },
                                  "definitions": {
                                    "corsRuleType": {
                                      "type": "object",
                                      "properties": {
                                        "allowedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of headers allowed to be part of the cross-origin request."
                                          }
                                        },
                                        "allowedMethods": {
                                          "type": "array",
                                          "allowedValues": [
                                            "CONNECT",
                                            "DELETE",
                                            "GET",
                                            "HEAD",
                                            "MERGE",
                                            "OPTIONS",
                                            "PATCH",
                                            "POST",
                                            "PUT",
                                            "TRACE"
                                          ],
                                          "metadata": {
                                            "description": "Required. A list of HTTP methods that are allowed to be executed by the origin."
                                          }
                                        },
                                        "allowedOrigins": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of origin domains that will be allowed via CORS, or \"*\" to allow all domains."
                                          }
                                        },
                                        "exposedHeaders": {
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          },
                                          "metadata": {
                                            "description": "Required. A list of response headers to expose to CORS clients."
                                          }
                                        },
                                        "maxAgeInSeconds": {
                                          "type": "int",
                                          "metadata": {
                                            "description": "Required. The number of seconds that the client/browser should cache a preflight response."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "__bicep_export!": true,
                                        "description": "The type for a cors rule."
                                      }
                                    },
                                    "diagnosticSettingFullType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of the diagnostic setting."
                                          }
                                        },
                                        "logCategoriesAndGroups": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category for a resource type this setting is applied to. Set the specific logs to collect here."
                                                }
                                              },
                                              "categoryGroup": {
                                                "type": "string",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Name of a Diagnostic Log category group for a resource type this setting is applied to. Set to `allLogs` to collect all logs."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of logs that will be streamed. \"allLogs\" includes all possible logs for the resource. Set to `[]` to disable log collection."
                                          }
                                        },
                                        "metricCategories": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "category": {
                                                "type": "string",
                                                "metadata": {
                                                  "description": "Required. Name of a Diagnostic Metric category for a resource type this setting is applied to. Set to `AllMetrics` to collect all metrics."
                                                }
                                              },
                                              "enabled": {
                                                "type": "bool",
                                                "nullable": true,
                                                "metadata": {
                                                  "description": "Optional. Enable or disable the category explicitly. Default is `true`."
                                                }
                                              }
                                            }
                                          },
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The name of metrics that will be streamed. \"allMetrics\" includes all possible metrics for the resource. Set to `[]` to disable metric collection."
                                          }
                                        },
                                        "logAnalyticsDestinationType": {
                                          "type": "string",
                                          "allowedValues": [
                                            "AzureDiagnostics",
                                            "Dedicated"
                                          ],
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type."
                                          }
                                        },
                                        "workspaceResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic log analytics workspace. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "storageAccountResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic storage account. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "eventHubAuthorizationRuleResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Resource ID of the diagnostic event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
                                          }
                                        },
                                        "eventHubName": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. Name of the diagnostic event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category. For security reasons, it is recommended to set diagnostic settings to send data to either storage account, log analytics workspace or event hub."
                                          }
                                        },
                                        "marketplacePartnerResourceId": {
                                          "type": "string",
                                          "nullable": true,
                                          "metadata": {
                                            "description": "Optional. The full ARM resource ID of the Marketplace resource to which you would like to send Diagnostic Logs."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for a diagnostic setting. To be used if both logs & metrics are supported by the resource provider.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "storageAccountName": {
                                      "type": "string",
                                      "maxLength": 24,
                                      "metadata": {
                                        "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                      }
                                    },
                                    "tables": {
                                      "type": "array",
                                      "defaultValue": [],
                                      "metadata": {
                                        "description": "Optional. tables to create."
                                      }
                                    },
                                    "corsRules": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/corsRuleType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The List of CORS rules. You can include up to five CorsRule elements in the request."
                                      }
                                    },
                                    "diagnosticSettings": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/diagnosticSettingFullType"
                                      },
                                      "nullable": true,
                                      "metadata": {
                                        "description": "Optional. The diagnostic settings of the service."
                                      }
                                    }
                                  },
                                  "variables": {
                                    "name": "default"
                                  },
                                  "resources": {
                                    "storageAccount": {
                                      "existing": true,
                                      "type": "Microsoft.Storage/storageAccounts",
                                      "apiVersion": "2023-04-01",
                                      "name": "[parameters('storageAccountName')]"
                                    },
                                    "tableServices": {
                                      "type": "Microsoft.Storage/storageAccounts/tableServices",
                                      "apiVersion": "2023-04-01",
                                      "name": "[format('{0}/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "properties": {
                                        "cors": "[if(not(equals(parameters('corsRules'), null())), createObject('corsRules', parameters('corsRules')), null())]"
                                      }
                                    },
                                    "tableServices_diagnosticSettings": {
                                      "copy": {
                                        "name": "tableServices_diagnosticSettings",
                                        "count": "[length(coalesce(parameters('diagnosticSettings'), createArray()))]"
                                      },
                                      "type": "Microsoft.Insights/diagnosticSettings",
                                      "apiVersion": "2021-05-01-preview",
                                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}', parameters('storageAccountName'), variables('name'))]",
                                      "name": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'name'), format('{0}-diagnosticSettings', variables('name')))]",
                                      "properties": {
                                        "copy": [
                                          {
                                            "name": "metrics",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics'))))]",
                                            "input": {
                                              "category": "[coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')].category]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'metricCategories'), createArray(createObject('category', 'AllMetrics')))[copyIndex('metrics')], 'enabled'), true())]",
                                              "timeGrain": null
                                            }
                                          },
                                          {
                                            "name": "logs",
                                            "count": "[length(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs'))))]",
                                            "input": {
                                              "categoryGroup": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'categoryGroup')]",
                                              "category": "[tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'category')]",
                                              "enabled": "[coalesce(tryGet(coalesce(tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logCategoriesAndGroups'), createArray(createObject('categoryGroup', 'allLogs')))[copyIndex('logs')], 'enabled'), true())]"
                                            }
                                          }
                                        ],
                                        "storageAccountId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'storageAccountResourceId')]",
                                        "workspaceId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'workspaceResourceId')]",
                                        "eventHubAuthorizationRuleId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubAuthorizationRuleResourceId')]",
                                        "eventHubName": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'eventHubName')]",
                                        "marketplacePartnerId": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'marketplacePartnerResourceId')]",
                                        "logAnalyticsDestinationType": "[tryGet(coalesce(parameters('diagnosticSettings'), createArray())[copyIndex()], 'logAnalyticsDestinationType')]"
                                      },
                                      "dependsOn": [
                                        "tableServices"
                                      ]
                                    },
                                    "tableServices_tables": {
                                      "copy": {
                                        "name": "tableServices_tables",
                                        "count": "[length(parameters('tables'))]"
                                      },
                                      "type": "Microsoft.Resources/deployments",
                                      "apiVersion": "2022-09-01",
                                      "name": "[format('{0}-Table-{1}', deployment().name, copyIndex())]",
                                      "properties": {
                                        "expressionEvaluationOptions": {
                                          "scope": "inner"
                                        },
                                        "mode": "Incremental",
                                        "parameters": {
                                          "name": {
                                            "value": "[parameters('tables')[copyIndex()].name]"
                                          },
                                          "storageAccountName": {
                                            "value": "[parameters('storageAccountName')]"
                                          },
                                          "roleAssignments": {
                                            "value": "[tryGet(parameters('tables')[copyIndex()], 'roleAssignments')]"
                                          }
                                        },
                                        "template": {
                                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                          "languageVersion": "2.0",
                                          "contentVersion": "1.0.0.0",
                                          "metadata": {
                                            "_generator": {
                                              "name": "bicep",
                                              "version": "0.33.93.31351",
                                              "templateHash": "1369356397929898951"
                                            },
                                            "name": "Storage Account Table",
                                            "description": "This module deploys a Storage Account Table."
                                          },
                                          "definitions": {
                                            "roleAssignmentType": {
                                              "type": "object",
                                              "properties": {
                                                "name": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                                  }
                                                },
                                                "roleDefinitionIdOrName": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                                  }
                                                },
                                                "principalId": {
                                                  "type": "string",
                                                  "metadata": {
                                                    "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                                  }
                                                },
                                                "principalType": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "Device",
                                                    "ForeignGroup",
                                                    "Group",
                                                    "ServicePrincipal",
                                                    "User"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The principal type of the assigned principal ID."
                                                  }
                                                },
                                                "description": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The description of the role assignment."
                                                  }
                                                },
                                                "condition": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                                  }
                                                },
                                                "conditionVersion": {
                                                  "type": "string",
                                                  "allowedValues": [
                                                    "2.0"
                                                  ],
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. Version of the condition."
                                                  }
                                                },
                                                "delegatedManagedIdentityResourceId": {
                                                  "type": "string",
                                                  "nullable": true,
                                                  "metadata": {
                                                    "description": "Optional. The Resource Id of the delegated managed identity resource."
                                                  }
                                                }
                                              },
                                              "metadata": {
                                                "description": "An AVM-aligned type for a role assignment.",
                                                "__bicep_imported_from!": {
                                                  "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                                }
                                              }
                                            }
                                          },
                                          "parameters": {
                                            "storageAccountName": {
                                              "type": "string",
                                              "maxLength": 24,
                                              "metadata": {
                                                "description": "Conditional. The name of the parent Storage Account. Required if the template is used in a standalone deployment."
                                              }
                                            },
                                            "roleAssignments": {
                                              "type": "array",
                                              "items": {
                                                "$ref": "#/definitions/roleAssignmentType"
                                              },
                                              "nullable": true,
                                              "metadata": {
                                                "description": "Optional. Array of role assignments to create."
                                              }
                                            },
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "Required. Name of the table."
                                              }
                                            }
                                          },
                                          "variables": {
                                            "copy": [
                                              {
                                                "name": "formattedRoleAssignments",
                                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                                              }
                                            ],
                                            "builtInRoleNames": {
                                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                                              "Reader and Data Access": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'c12c1c16-33a1-487b-954d-41c89c60f349')]",
                                              "Role Based Access Control Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                                              "Storage Account Backup Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'e5e2a7ff-d759-4cd2-bb51-3152d37e2eb1')]",
                                              "Storage Account Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '17d1049b-9a84-46fb-8f53-869881c3d3ab')]",
                                              "Storage Account Key Operator Service Role": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '81a9662b-bebf-436f-a333-f67b29880f12')]",
                                              "Storage Table Data Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
                                              "Storage Table Data Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '76199698-9eea-4c19-bc75-cec21354c6b6')]",
                                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                                            }
                                          },
                                          "resources": {
                                            "storageAccount::tableServices": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts/tableServices",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}', parameters('storageAccountName'), 'default')]"
                                            },
                                            "storageAccount": {
                                              "existing": true,
                                              "type": "Microsoft.Storage/storageAccounts",
                                              "apiVersion": "2023-04-01",
                                              "name": "[parameters('storageAccountName')]"
                                            },
                                            "table": {
                                              "type": "Microsoft.Storage/storageAccounts/tableServices/tables",
                                              "apiVersion": "2023-04-01",
                                              "name": "[format('{0}/{1}/{2}', parameters('storageAccountName'), 'default', parameters('name'))]"
                                            },
                                            "table_roleAssignments": {
                                              "copy": {
                                                "name": "table_roleAssignments",
                                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                                              },
                                              "type": "Microsoft.Authorization/roleAssignments",
                                              "apiVersion": "2022-04-01",
                                              "scope": "[format('Microsoft.Storage/storageAccounts/{0}/tableServices/{1}/tables/{2}', parameters('storageAccountName'), 'default', parameters('name'))]",
                                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                                              "properties": {
                                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                                              },
                                              "dependsOn": [
                                                "table"
                                              ]
                                            }
                                          },
                                          "outputs": {
                                            "name": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The name of the deployed file share service."
                                              },
                                              "value": "[parameters('name')]"
                                            },
                                            "resourceId": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource ID of the deployed file share service."
                                              },
                                              "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices/tables', parameters('storageAccountName'), 'default', parameters('name'))]"
                                            },
                                            "resourceGroupName": {
                                              "type": "string",
                                              "metadata": {
                                                "description": "The resource group of the deployed file share service."
                                              },
                                              "value": "[resourceGroup().name]"
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "name": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The name of the deployed table service."
                                      },
                                      "value": "[variables('name')]"
                                    },
                                    "resourceId": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource ID of the deployed table service."
                                      },
                                      "value": "[resourceId('Microsoft.Storage/storageAccounts/tableServices', parameters('storageAccountName'), variables('name'))]"
                                    },
                                    "resourceGroupName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "The resource group of the deployed table service."
                                      },
                                      "value": "[resourceGroup().name]"
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            },
                            "secretsExport": {
                              "condition": "[not(equals(parameters('secretsExportConfiguration'), null()))]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2022-09-01",
                              "name": "[format('{0}-secrets-kv', uniqueString(deployment().name, parameters('location')))]",
                              "subscriptionId": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[2]]",
                              "resourceGroup": "[split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/')[4]]",
                              "properties": {
                                "expressionEvaluationOptions": {
                                  "scope": "inner"
                                },
                                "mode": "Incremental",
                                "parameters": {
                                  "keyVaultName": {
                                    "value": "[last(split(tryGet(parameters('secretsExportConfiguration'), 'keyVaultResourceId'), '/'))]"
                                  },
                                  "secretsToSet": {
                                    "value": "[union(createArray(), if(contains(parameters('secretsExportConfiguration'), 'accessKey1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey1Name'), 'value', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-05-01').keys[0].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString1Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString1Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix={2}', parameters('name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-05-01').keys[0].value, environment().suffixes.storage))), createArray()), if(contains(parameters('secretsExportConfiguration'), 'accessKey2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'accessKey2Name'), 'value', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-05-01').keys[1].value)), createArray()), if(contains(parameters('secretsExportConfiguration'), 'connectionString2Name'), createArray(createObject('name', tryGet(parameters('secretsExportConfiguration'), 'connectionString2Name'), 'value', format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=<redacted> parameters('name'), listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('name')), '2023-05-01').keys[1].value, environment().suffixes.storage))), createArray()))]"
                                  }
                                },
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "languageVersion": "2.0",
                                  "contentVersion": "1.0.0.0",
                                  "metadata": {
                                    "_generator": {
                                      "name": "bicep",
                                      "version": "0.33.93.31351",
                                      "templateHash": "2275047425860597278"
                                    }
                                  },
                                  "definitions": {
                                    "secretSetOutputType": {
                                      "type": "object",
                                      "properties": {
                                        "secretResourceId": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The resourceId of the exported secret."
                                          }
                                        },
                                        "secretUri": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The secret URI of the exported secret."
                                          }
                                        },
                                        "secretUriWithVersion": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "The secret URI with version of the exported secret."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for the output of the secret set via the secrets export feature.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    },
                                    "secretToSetType": {
                                      "type": "object",
                                      "properties": {
                                        "name": {
                                          "type": "string",
                                          "metadata": {
                                            "description": "Required. The name of the secret to set."
                                          }
                                        },
                                        "value": {
                                          "type": "securestring",
                                          "metadata": {
                                            "description": "Required. The value of the secret to set."
                                          }
                                        }
                                      },
                                      "metadata": {
                                        "description": "An AVM-aligned type for the secret to set via the secrets export feature.",
                                        "__bicep_imported_from!": {
                                          "sourceTemplate": "br:mcr.microsoft.com/bicep/avm/utl/types/avm-common-types:0.5.1"
                                        }
                                      }
                                    }
                                  },
                                  "parameters": {
                                    "keyVaultName": {
                                      "type": "string",
                                      "metadata": {
                                        "description": "Required. The name of the Key Vault to set the ecrets in."
                                      }
                                    },
                                    "secretsToSet": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/secretToSetType"
                                      },
                                      "metadata": {
                                        "description": "Required. The secrets to set in the Key Vault."
                                      }
                                    }
                                  },
                                  "resources": {
                                    "keyVault": {
                                      "existing": true,
                                      "type": "Microsoft.KeyVault/vaults",
                                      "apiVersion": "2022-07-01",
                                      "name": "[parameters('keyVaultName')]"
                                    },
                                    "secrets": {
                                      "copy": {
                                        "name": "secrets",
                                        "count": "[length(parameters('secretsToSet'))]"
                                      },
                                      "type": "Microsoft.KeyVault/vaults/secrets",
                                      "apiVersion": "2023-07-01",
                                      "name": "[format('{0}/{1}', parameters('keyVaultName'), parameters('secretsToSet')[copyIndex()].name)]",
                                      "properties": {
                                        "value": "[parameters('secretsToSet')[copyIndex()].value]"
                                      }
                                    }
                                  },
                                  "outputs": {
                                    "secretsSet": {
                                      "type": "array",
                                      "items": {
                                        "$ref": "#/definitions/secretSetOutputType"
                                      },
                                      "metadata": {
                                        "description": "The references to the secrets exported to the provided Key Vault."
                                      },
                                      "copy": {
                                        "count": "[length(range(0, length(coalesce(parameters('secretsToSet'), createArray()))))]",
                                        "input": {
                                          "secretResourceId": "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), parameters('secretsToSet')[range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()]].name)]",
                                          "secretUri": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUri]",
                                          "secretUriWithVersion": "[reference(format('secrets[{0}]', range(0, length(coalesce(parameters('secretsToSet'), createArray())))[copyIndex()])).secretUriWithVersion]"
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "dependsOn": [
                                "storageAccount"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the deployed storage account."
                              },
                              "value": "[resourceId('Microsoft.Storage/storageAccounts', parameters('name'))]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the deployed storage account."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource group of the deployed storage account."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "primaryBlobEndpoint": {
                              "type": "string",
                              "metadata": {
                                "description": "The primary blob endpoint reference if blob services are deployed."
                              },
                              "value": "[if(and(not(empty(parameters('blobServices'))), contains(parameters('blobServices'), 'containers')), reference(format('Microsoft.Storage/storageAccounts/{0}', parameters('name')), '2019-04-01').primaryEndpoints.blob, '')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "nullable": true,
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[tryGet(tryGet(reference('storageAccount', '2023-05-01', 'full'), 'identity'), 'principalId')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('storageAccount', '2023-05-01', 'full').location]"
                            },
                            "serviceEndpoints": {
                              "type": "object",
                              "metadata": {
                                "description": "All service endpoints of the deployed storage account, Note Standard_LRS and Standard_ZRS accounts only have a blob service endpoint."
                              },
                              "value": "[reference('storageAccount').primaryEndpoints]"
                            },
                            "privateEndpoints": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/privateEndpointOutputType"
                              },
                              "metadata": {
                                "description": "The private endpoints of the Storage Account."
                              },
                              "copy": {
                                "count": "[length(coalesce(parameters('privateEndpoints'), createArray()))]",
                                "input": {
                                  "name": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.name.value]",
                                  "resourceId": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.resourceId.value]",
                                  "groupId": "[tryGet(tryGet(reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs, 'groupId'), 'value')]",
                                  "customDnsConfigs": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.customDnsConfigs.value]",
                                  "networkInterfaceResourceIds": "[reference(format('storageAccount_privateEndpoints[{0}]', copyIndex())).outputs.networkInterfaceResourceIds.value]"
                                }
                              }
                            },
                            "exportedSecrets": {
                              "$ref": "#/definitions/secretsOutputType",
                              "metadata": {
                                "description": "A hashtable of references to the secrets exported to the provided Key Vault. The key of each reference is each secret's name."
                              },
                              "value": "[if(not(equals(parameters('secretsExportConfiguration'), null())), toObject(reference('secretsExport').outputs.secretsSet.value, lambda('secret', last(split(lambdaVariables('secret').secretResourceId, '/'))), lambda('secret', lambdaVariables('secret'))), createObject())]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_STORAGE_ACCOUNT_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageAccount'), '2022-09-01').outputs.resourceId.value]"
                    },
                    "AZURE_STORAGE_ACCOUNT_NAME": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageAccount'), '2022-09-01').outputs.name.value]"
                    },
                    "AZURE_STORAGE_ELASTIC_SEARCH_FILE_SHARE_NAME": {
                      "type": "string",
                      "value": "[parameters('elasticSearchFileShareName')]"
                    },
                    "AZURE_STORAGE_GRAFANA_FILE_SHARE_NAME": {
                      "type": "string",
                      "value": "[parameters('grafanaFileShareName')]"
                    },
                    "AZURE_STORAGE_ACCOUNT_KEY_SECRET_NAME": {
                      "type": "string",
                      "value": "[variables('accessKey1Name')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'identity')]",
                "[resourceId('Microsoft.Resources/deployments', 'keyVault')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "containerAppsEnvironment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "abbrs": {
                    "value": "[variables('abbrs')]"
                  },
                  "resourceToken": {
                    "value": "[variables('resourceToken')]"
                  },
                  "logAnalyticsWorkspaceResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.AZURE_RESOURCE_MONITORING_LOG_ANALYTICS_ID.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "12422442616251705721"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "abbrs": {
                      "type": "object"
                    },
                    "resourceToken": {
                      "type": "string"
                    },
                    "logAnalyticsWorkspaceResourceId": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "container-apps-environment",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "logAnalyticsWorkspaceResourceId": {
                            "value": "[parameters('logAnalyticsWorkspaceResourceId')]"
                          },
                          "name": {
                            "value": "[format('{0}{1}', parameters('abbrs').appManagedEnvironments, parameters('resourceToken'))]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "zoneRedundant": {
                            "value": false
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.26.170.59819",
                              "templateHash": "4375265798519003485"
                            },
                            "name": "App ManagedEnvironments",
                            "description": "This module deploys an App Managed Environment (also known as a Container App Environment).",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container Apps Managed Environment."
                              }
                            },
                            "logAnalyticsWorkspaceResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Existing Log Analytics Workspace resource ID. Note: This value is not required as per the resource type. However, not providing it currently causes an issue that is tracked [here](https://github.com/Azure/bicep/issues/9990)."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "logsDestination": {
                              "type": "string",
                              "defaultValue": "log-analytics",
                              "metadata": {
                                "description": "Optional. Logs destination."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "daprAIConnectionString": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Application Insights connection string used by Dapr to export Service to Service communication telemetry."
                              }
                            },
                            "daprAIInstrumentationKey": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry."
                              }
                            },
                            "dockerBridgeCidr": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. CIDR notation IP range assigned to the Docker bridge, network. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "infrastructureSubnetId": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. Resource ID of a subnet for infrastructure components. This is used to deploy the environment into a virtual network. Must not overlap with any other provided IP ranges. Required if \"internal\" is set to true. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "internal": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Conditional. Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. If set to true, then \"infrastructureSubnetId\" must be provided. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "platformReservedCidr": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. It must not overlap with any other provided IP ranges and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true  to make the resource WAF compliant."
                              }
                            },
                            "platformReservedDnsIP": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Conditional. An IP address from the IP range defined by \"platformReservedCidr\" that will be reserved for the internal DNS server. It must not be the first address in the range and can only be used when the environment is deployed into a virtual network. If not provided, it will be set with a default value by the platform. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "zoneRedundant": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Whether or not this Managed Environment is zone-redundant."
                              }
                            },
                            "certificatePassword": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Password of the certificate used by the custom domain."
                              }
                            },
                            "certificateValue": {
                              "type": "securestring",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Certificate to use for the custom domain. PFX or PEM."
                              }
                            },
                            "dnsSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. DNS suffix for the environment domain."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "workloadProfiles": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Conditional. Workload profiles configured for the Managed Environment. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            },
                            "infrastructureResourceGroupName": {
                              "type": "string",
                              "defaultValue": "[take(format('ME_{0}', parameters('name')), 63)]",
                              "metadata": {
                                "description": "Conditional. Name of the infrastructure resource group. If not provided, it will be set with a default value. Required if zoneRedundant is set to true to make the resource WAF compliant."
                              }
                            }
                          },
                          "variables": {
                            "builtInRoleNames": {
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2023-07-01",
                              "name": "[format('46d3xbcp.res.app-managedenvironment.{0}.{1}', replace('0.4.5', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "logAnalyticsWorkspace": {
                              "condition": "[not(empty(parameters('logAnalyticsWorkspaceResourceId')))]",
                              "existing": true,
                              "type": "Microsoft.OperationalInsights/workspaces",
                              "apiVersion": "2021-06-01",
                              "subscriptionId": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2]]",
                              "resourceGroup": "[split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]]",
                              "name": "[last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))]"
                            },
                            "managedEnvironment": {
                              "type": "Microsoft.App/managedEnvironments",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "location": "[parameters('location')]",
                              "tags": "[parameters('tags')]",
                              "properties": {
                                "appLogsConfiguration": {
                                  "destination": "[parameters('logsDestination')]",
                                  "logAnalyticsConfiguration": {
                                    "customerId": "[reference('logAnalyticsWorkspace').customerId]",
                                    "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceResourceId'), '/')[2], split(parameters('logAnalyticsWorkspaceResourceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('logAnalyticsWorkspaceResourceId'), '/'))), '2021-06-01').primarySharedKey]"
                                  }
                                },
                                "daprAIConnectionString": "[parameters('daprAIConnectionString')]",
                                "daprAIInstrumentationKey": "[parameters('daprAIInstrumentationKey')]",
                                "customDomainConfiguration": {
                                  "certificatePassword": "[parameters('certificatePassword')]",
                                  "certificateValue": "[if(not(empty(parameters('certificateValue'))), parameters('certificateValue'), null())]",
                                  "dnsSuffix": "[parameters('dnsSuffix')]"
                                },
                                "vnetConfiguration": {
                                  "internal": "[parameters('internal')]",
                                  "infrastructureSubnetId": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('infrastructureSubnetId'), null())]",
                                  "dockerBridgeCidr": "[if(not(empty(parameters('infrastructureSubnetId'))), parameters('dockerBridgeCidr'), null())]",
                                  "platformReservedCidr": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedCidr'), null())]",
                                  "platformReservedDnsIP": "[if(and(empty(parameters('workloadProfiles')), not(empty(parameters('infrastructureSubnetId')))), parameters('platformReservedDnsIP'), null())]"
                                },
                                "workloadProfiles": "[if(not(empty(parameters('workloadProfiles'))), parameters('workloadProfiles'), null())]",
                                "zoneRedundant": "[parameters('zoneRedundant')]",
                                "infrastructureResourceGroup": "[parameters('infrastructureResourceGroupName')]"
                              },
                              "dependsOn": [
                                "logAnalyticsWorkspace"
                              ]
                            },
                            "managedEnvironment_roleAssignments": {
                              "copy": {
                                "name": "managedEnvironment_roleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                              "name": "[guid(resourceId('Microsoft.App/managedEnvironments', parameters('name')), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId, coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)]",
                              "properties": {
                                "roleDefinitionId": "[if(contains(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName), variables('builtInRoleNames')[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName], if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex()].roleDefinitionIdOrName)))]",
                                "principalId": "[coalesce(parameters('roleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(parameters('roleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "managedEnvironment"
                              ]
                            },
                            "managedEnvironment_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/managedEnvironments/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "managedEnvironment"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Managed Environment was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('managedEnvironment', '2023-05-01', 'full').location]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Managed Environment."
                              },
                              "value": "[parameters('name')]"
                            },
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Managed Environment."
                              },
                              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]"
                            },
                            "defaultDomain": {
                              "type": "string",
                              "metadata": {
                                "description": "The Default domain of the Managed Environment."
                              },
                              "value": "[reference('managedEnvironment').defaultDomain]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_CONTAINER_APPS_ENVIRONMENT_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', 'container-apps-environment'), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'monitoring')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "cpuadUpdater-fetch-image",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('cpuAdUpdaterExists')]"
                  },
                  "name": {
                    "value": "cpuadUpdater"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9643843979796575983"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "cpuadUpdater",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "cpuadUpdater"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerRegistryLoginServer": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER.value]"
                  },
                  "containerAppsEnvironmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerAppsEnvironment'), '2022-09-01').outputs.AZURE_RESOURCE_CONTAINER_APPS_ENVIRONMENT_ID.value]"
                  },
                  "applicationInsightsConnectionString": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.AZURE_RESOURCE_MONITORING_APP_INSIGHTS_CONNECTION_STRING.value]"
                  },
                  "definition": {
                    "value": "[parameters('cpuAdUpdaterDefinition')]"
                  },
                  "fetchLatestImage": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cpuadUpdater-fetch-image'), '2022-09-01')]"
                  },
                  "port": {
                    "value": 80
                  },
                  "userAssignedManagedIdentityResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_ID.value]"
                  },
                  "userAssignedManagedIdentityClientId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_CLIENT_ID.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "cpu": {
                    "value": "1.0"
                  },
                  "memory": {
                    "value": "2.0Gi"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "15189363346424104492"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "definition": {
                      "type": "object"
                    },
                    "fetchLatestImage": {
                      "type": "object"
                    },
                    "applicationInsightsConnectionString": {
                      "type": "string"
                    },
                    "userAssignedManagedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedManagedIdentityResourceId": {
                      "type": "string"
                    },
                    "port": {
                      "type": "int"
                    },
                    "containerRegistryLoginServer": {
                      "type": "string"
                    },
                    "containerAppsEnvironmentResourceId": {
                      "type": "string"
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "cpu": {
                      "type": "string"
                    },
                    "memory": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "appSettingsArray": "[filter(array(parameters('definition').settings), lambda('i', not(equals(lambdaVariables('i').name, ''))))]",
                    "secrets": "[map(filter(variables('appSettingsArray'), lambda('i', not(equals(tryGet(lambdaVariables('i'), 'secret'), null())))), lambda('i', createObject('name', lambdaVariables('i').name, 'value', lambdaVariables('i').value, 'secretRef', coalesce(tryGet(lambdaVariables('i'), 'secretRef'), take(replace(replace(toLower(lambdaVariables('i').name), '_', '-'), '.', '-'), 32)))))]",
                    "srcEnv": "[map(filter(variables('appSettingsArray'), lambda('i', equals(tryGet(lambdaVariables('i'), 'secret'), null()))), lambda('i', createObject('name', lambdaVariables('i').name, 'value', lambdaVariables('i').value)))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "ingressTargetPort": {
                            "value": "[parameters('port')]"
                          },
                          "scaleMinReplicas": {
                            "value": 1
                          },
                          "scaleMaxReplicas": {
                            "value": 10
                          },
                          "secrets": {
                            "value": {
                              "secureList": "[union(createArray(), map(variables('secrets'), lambda('secret', createObject('name', lambdaVariables('secret').secretRef, 'value', lambdaVariables('secret').value))))]"
                            }
                          },
                          "containers": {
                            "value": [
                              {
                                "image": "[coalesce(tryGet(tryGet(tryGet(parameters('fetchLatestImage').outputs, 'containers'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                "name": "main",
                                "resources": {
                                  "cpu": "[json(parameters('cpu'))]",
                                  "memory": "[parameters('memory')]"
                                },
                                "env": "[union(createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', parameters('applicationInsightsConnectionString')), createObject('name', 'AZURE_CLIENT_ID', 'value', parameters('userAssignedManagedIdentityClientId'))), variables('srcEnv'), map(variables('secrets'), lambda('secret', createObject('name', lambdaVariables('secret').name, 'secretRef', lambdaVariables('secret').secretRef))))]"
                              }
                            ]
                          },
                          "managedIdentities": {
                            "value": {
                              "systemAssigned": false,
                              "userAssignedResourceIds": [
                                "[parameters('userAssignedManagedIdentityResourceId')]"
                              ]
                            }
                          },
                          "registries": {
                            "value": [
                              {
                                "server": "[parameters('containerRegistryLoginServer')]",
                                "identity": "[parameters('userAssignedManagedIdentityResourceId')]"
                              }
                            ]
                          },
                          "environmentResourceId": {
                            "value": "[parameters('containerAppsEnvironmentResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('name')))]"
                          },
                          "ingressExternal": {
                            "value": "[parameters('ingressExternal')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6290070069549338411"
                            },
                            "name": "Container Apps",
                            "description": "This module deploys a Container App.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "container": {
                              "type": "object",
                              "properties": {
                                "args": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command arguments."
                                  }
                                },
                                "command": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command."
                                  }
                                },
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/environmentVar"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container environment variables."
                                  }
                                },
                                "image": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Container image tag."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom container name."
                                  }
                                },
                                "probes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbe"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of probes for the container."
                                  }
                                },
                                "resources": {
                                  "type": "object",
                                  "metadata": {
                                    "description": "Required. Container resource requirements."
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/volumeMount"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container volume mounts."
                                  }
                                }
                              }
                            },
                            "environmentVar": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Environment variable name."
                                  }
                                },
                                "secretRef": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Non-secret environment variable value."
                                  }
                                }
                              }
                            },
                            "containerAppProbe": {
                              "type": "object",
                              "properties": {
                                "failureThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                                  }
                                },
                                "httpGet": {
                                  "$ref": "#/definitions/containerAppProbeHttpGet",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTPGet specifies the http request to perform."
                                  }
                                },
                                "initialDelaySeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 60,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                                  }
                                },
                                "periodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                                  }
                                },
                                "successThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                                  }
                                },
                                "tcpSocket": {
                                  "$ref": "#/definitions/containerAppProbeTcpSocket",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                                  }
                                },
                                "terminationGracePeriodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                                  }
                                },
                                "timeoutSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Liveness",
                                    "Readiness",
                                    "Startup"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The type of probe."
                                  }
                                }
                              }
                            },
                            "corsPolicyType": {
                              "type": "object",
                              "properties": {
                                "allowCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Switch to determine whether the resource allows credentials."
                                  }
                                },
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                                  }
                                },
                                "exposeHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                                  }
                                },
                                "maxAge": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-max-age header."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "containerAppProbeHttpGet": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                                  }
                                },
                                "httpHeaders": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTP headers to set in the request."
                                  }
                                },
                                "path": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path to access on the HTTP server."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Name or number of the port to access on the container."
                                  }
                                },
                                "scheme": {
                                  "type": "string",
                                  "allowedValues": [
                                    "HTTP",
                                    "HTTPS"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                                  }
                                }
                              }
                            },
                            "containerAppProbeHttpGetHeadersItem": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the header."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Value of the header."
                                  }
                                }
                              }
                            },
                            "containerAppProbeTcpSocket": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "minValue": 1,
                                  "maxValue": 65535,
                                  "metadata": {
                                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                                  }
                                }
                              }
                            },
                            "volumeMount": {
                              "type": "object",
                              "properties": {
                                "mountPath": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                                  }
                                },
                                "subPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                                  }
                                },
                                "volumeName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. This must match the Name of a Volume."
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container App."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "disableIngress": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Bool to disable all ingress traffic for the container app."
                              }
                            },
                            "ingressExternal": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                              }
                            },
                            "clientCertificateMode": {
                              "type": "string",
                              "defaultValue": "ignore",
                              "allowedValues": [
                                "accept",
                                "ignore",
                                "require"
                              ],
                              "metadata": {
                                "description": "Optional. Client certificate mode for mTLS."
                              }
                            },
                            "corsPolicy": {
                              "$ref": "#/definitions/corsPolicyType",
                              "metadata": {
                                "description": "Optional. Object userd to configure CORS policy."
                              }
                            },
                            "stickySessionsAffinity": {
                              "type": "string",
                              "defaultValue": "none",
                              "allowedValues": [
                                "none",
                                "sticky"
                              ],
                              "metadata": {
                                "description": "Optional. Bool indicating if the Container App should enable session affinity."
                              }
                            },
                            "ingressTransport": {
                              "type": "string",
                              "defaultValue": "auto",
                              "allowedValues": [
                                "auto",
                                "http",
                                "http2",
                                "tcp"
                              ],
                              "metadata": {
                                "description": "Optional. Ingress transport protocol."
                              }
                            },
                            "ingressAllowInsecure": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                              }
                            },
                            "ingressTargetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "Optional. Target Port in containers for traffic from ingress."
                              }
                            },
                            "scaleMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "metadata": {
                                "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                              }
                            },
                            "scaleMinReplicas": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                              }
                            },
                            "scaleRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Scaling rules."
                              }
                            },
                            "activeRevisionsMode": {
                              "type": "string",
                              "defaultValue": "Single",
                              "allowedValues": [
                                "Multiple",
                                "Single"
                              ],
                              "metadata": {
                                "description": "Optional. Controls how active revisions are handled for the Container app."
                              }
                            },
                            "environmentResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of environment."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "registries": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom domain bindings for Container App hostnames."
                              }
                            },
                            "exposedPort": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Rules to restrict incoming IP address."
                              }
                            },
                            "trafficLabel": {
                              "type": "string",
                              "defaultValue": "label-1",
                              "metadata": {
                                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                              }
                            },
                            "trafficLatestRevision": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                              }
                            },
                            "trafficRevisionName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of a revision."
                              }
                            },
                            "trafficWeight": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "Optional. Traffic weight assigned to a revision."
                              }
                            },
                            "dapr": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dapr configuration for the Container App."
                              }
                            },
                            "maxInactiveRevisions": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Max inactive revisions a Container App can have."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/container"
                              },
                              "metadata": {
                                "description": "Required. List of container definitions for the Container App."
                              }
                            },
                            "initContainersTemplate": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of specialized containers that run before app containers."
                              }
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The secrets of the Container App."
                              }
                            },
                            "revisionSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. User friendly suffix that is appended to the revision name."
                              }
                            },
                            "volumes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of volume definitions for the Container App."
                              }
                            },
                            "workloadProfileName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Workload profile name to pin for container app execution."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "containerApp": {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "environmentId": "[parameters('environmentResourceId')]",
                                "configuration": {
                                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                                  "ingress": "[if(parameters('disableIngress'), null(), createObject('allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                                  "secrets": "[variables('secretList')]"
                                },
                                "template": {
                                  "containers": "[parameters('containers')]",
                                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                                  "revisionSuffix": "[parameters('revisionSuffix')]",
                                  "scale": {
                                    "maxReplicas": "[parameters('scaleMaxReplicas')]",
                                    "minReplicas": "[parameters('scaleMinReplicas')]",
                                    "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                                  },
                                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                                },
                                "workloadProfileName": "[parameters('workloadProfileName')]"
                              }
                            },
                            "containerApp_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            },
                            "containerApp_roleAssignments": {
                              "copy": {
                                "name": "containerApp_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Container App."
                              },
                              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                            },
                            "fqdn": {
                              "type": "string",
                              "metadata": {
                                "description": "The configuration of ingress fqdn."
                              },
                              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Container App was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Container App."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('containerApp', '2023-05-01', 'full').location]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_CONTAINER_APP_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'containerAppsEnvironment')]",
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistry')]",
                "[resourceId('Microsoft.Resources/deployments', 'cpuadUpdater-fetch-image')]",
                "[resourceId('Microsoft.Resources/deployments', 'identity')]",
                "[resourceId('Microsoft.Resources/deployments', 'monitoring')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "elasticSearch-fetch-image",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('elasticSearchExists')]"
                  },
                  "name": {
                    "value": "elastic-search"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9643843979796575983"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "elasticSearch",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "elastic-search"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerRegistryLoginServer": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER.value]"
                  },
                  "containerAppsEnvironmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerAppsEnvironment'), '2022-09-01').outputs.AZURE_RESOURCE_CONTAINER_APPS_ENVIRONMENT_ID.value]"
                  },
                  "applicationInsightsConnectionString": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.AZURE_RESOURCE_MONITORING_APP_INSIGHTS_CONNECTION_STRING.value]"
                  },
                  "definition": {
                    "value": "[parameters('elasticSearchDefinition')]"
                  },
                  "fetchLatestImage": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cpuadUpdater-fetch-image'), '2022-09-01')]"
                  },
                  "port": {
                    "value": 9200
                  },
                  "userAssignedManagedIdentityResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_ID.value]"
                  },
                  "userAssignedManagedIdentityClientId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_CLIENT_ID.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "cpu": {
                    "value": "1.0"
                  },
                  "memory": {
                    "value": "2.0Gi"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "15189363346424104492"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "definition": {
                      "type": "object"
                    },
                    "fetchLatestImage": {
                      "type": "object"
                    },
                    "applicationInsightsConnectionString": {
                      "type": "string"
                    },
                    "userAssignedManagedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedManagedIdentityResourceId": {
                      "type": "string"
                    },
                    "port": {
                      "type": "int"
                    },
                    "containerRegistryLoginServer": {
                      "type": "string"
                    },
                    "containerAppsEnvironmentResourceId": {
                      "type": "string"
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "cpu": {
                      "type": "string"
                    },
                    "memory": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "appSettingsArray": "[filter(array(parameters('definition').settings), lambda('i', not(equals(lambdaVariables('i').name, ''))))]",
                    "secrets": "[map(filter(variables('appSettingsArray'), lambda('i', not(equals(tryGet(lambdaVariables('i'), 'secret'), null())))), lambda('i', createObject('name', lambdaVariables('i').name, 'value', lambdaVariables('i').value, 'secretRef', coalesce(tryGet(lambdaVariables('i'), 'secretRef'), take(replace(replace(toLower(lambdaVariables('i').name), '_', '-'), '.', '-'), 32)))))]",
                    "srcEnv": "[map(filter(variables('appSettingsArray'), lambda('i', equals(tryGet(lambdaVariables('i'), 'secret'), null()))), lambda('i', createObject('name', lambdaVariables('i').name, 'value', lambdaVariables('i').value)))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "ingressTargetPort": {
                            "value": "[parameters('port')]"
                          },
                          "scaleMinReplicas": {
                            "value": 1
                          },
                          "scaleMaxReplicas": {
                            "value": 10
                          },
                          "secrets": {
                            "value": {
                              "secureList": "[union(createArray(), map(variables('secrets'), lambda('secret', createObject('name', lambdaVariables('secret').secretRef, 'value', lambdaVariables('secret').value))))]"
                            }
                          },
                          "containers": {
                            "value": [
                              {
                                "image": "[coalesce(tryGet(tryGet(tryGet(parameters('fetchLatestImage').outputs, 'containers'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                "name": "main",
                                "resources": {
                                  "cpu": "[json(parameters('cpu'))]",
                                  "memory": "[parameters('memory')]"
                                },
                                "env": "[union(createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', parameters('applicationInsightsConnectionString')), createObject('name', 'AZURE_CLIENT_ID', 'value', parameters('userAssignedManagedIdentityClientId'))), variables('srcEnv'), map(variables('secrets'), lambda('secret', createObject('name', lambdaVariables('secret').name, 'secretRef', lambdaVariables('secret').secretRef))))]"
                              }
                            ]
                          },
                          "managedIdentities": {
                            "value": {
                              "systemAssigned": false,
                              "userAssignedResourceIds": [
                                "[parameters('userAssignedManagedIdentityResourceId')]"
                              ]
                            }
                          },
                          "registries": {
                            "value": [
                              {
                                "server": "[parameters('containerRegistryLoginServer')]",
                                "identity": "[parameters('userAssignedManagedIdentityResourceId')]"
                              }
                            ]
                          },
                          "environmentResourceId": {
                            "value": "[parameters('containerAppsEnvironmentResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('name')))]"
                          },
                          "ingressExternal": {
                            "value": "[parameters('ingressExternal')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6290070069549338411"
                            },
                            "name": "Container Apps",
                            "description": "This module deploys a Container App.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "container": {
                              "type": "object",
                              "properties": {
                                "args": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command arguments."
                                  }
                                },
                                "command": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command."
                                  }
                                },
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/environmentVar"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container environment variables."
                                  }
                                },
                                "image": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Container image tag."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom container name."
                                  }
                                },
                                "probes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbe"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of probes for the container."
                                  }
                                },
                                "resources": {
                                  "type": "object",
                                  "metadata": {
                                    "description": "Required. Container resource requirements."
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/volumeMount"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container volume mounts."
                                  }
                                }
                              }
                            },
                            "environmentVar": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Environment variable name."
                                  }
                                },
                                "secretRef": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Non-secret environment variable value."
                                  }
                                }
                              }
                            },
                            "containerAppProbe": {
                              "type": "object",
                              "properties": {
                                "failureThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                                  }
                                },
                                "httpGet": {
                                  "$ref": "#/definitions/containerAppProbeHttpGet",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTPGet specifies the http request to perform."
                                  }
                                },
                                "initialDelaySeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 60,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                                  }
                                },
                                "periodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                                  }
                                },
                                "successThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                                  }
                                },
                                "tcpSocket": {
                                  "$ref": "#/definitions/containerAppProbeTcpSocket",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                                  }
                                },
                                "terminationGracePeriodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                                  }
                                },
                                "timeoutSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Liveness",
                                    "Readiness",
                                    "Startup"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The type of probe."
                                  }
                                }
                              }
                            },
                            "corsPolicyType": {
                              "type": "object",
                              "properties": {
                                "allowCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Switch to determine whether the resource allows credentials."
                                  }
                                },
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                                  }
                                },
                                "exposeHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                                  }
                                },
                                "maxAge": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-max-age header."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "containerAppProbeHttpGet": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                                  }
                                },
                                "httpHeaders": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTP headers to set in the request."
                                  }
                                },
                                "path": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path to access on the HTTP server."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Name or number of the port to access on the container."
                                  }
                                },
                                "scheme": {
                                  "type": "string",
                                  "allowedValues": [
                                    "HTTP",
                                    "HTTPS"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                                  }
                                }
                              }
                            },
                            "containerAppProbeHttpGetHeadersItem": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the header."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Value of the header."
                                  }
                                }
                              }
                            },
                            "containerAppProbeTcpSocket": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "minValue": 1,
                                  "maxValue": 65535,
                                  "metadata": {
                                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                                  }
                                }
                              }
                            },
                            "volumeMount": {
                              "type": "object",
                              "properties": {
                                "mountPath": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                                  }
                                },
                                "subPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                                  }
                                },
                                "volumeName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. This must match the Name of a Volume."
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container App."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "disableIngress": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Bool to disable all ingress traffic for the container app."
                              }
                            },
                            "ingressExternal": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                              }
                            },
                            "clientCertificateMode": {
                              "type": "string",
                              "defaultValue": "ignore",
                              "allowedValues": [
                                "accept",
                                "ignore",
                                "require"
                              ],
                              "metadata": {
                                "description": "Optional. Client certificate mode for mTLS."
                              }
                            },
                            "corsPolicy": {
                              "$ref": "#/definitions/corsPolicyType",
                              "metadata": {
                                "description": "Optional. Object userd to configure CORS policy."
                              }
                            },
                            "stickySessionsAffinity": {
                              "type": "string",
                              "defaultValue": "none",
                              "allowedValues": [
                                "none",
                                "sticky"
                              ],
                              "metadata": {
                                "description": "Optional. Bool indicating if the Container App should enable session affinity."
                              }
                            },
                            "ingressTransport": {
                              "type": "string",
                              "defaultValue": "auto",
                              "allowedValues": [
                                "auto",
                                "http",
                                "http2",
                                "tcp"
                              ],
                              "metadata": {
                                "description": "Optional. Ingress transport protocol."
                              }
                            },
                            "ingressAllowInsecure": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                              }
                            },
                            "ingressTargetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "Optional. Target Port in containers for traffic from ingress."
                              }
                            },
                            "scaleMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "metadata": {
                                "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                              }
                            },
                            "scaleMinReplicas": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                              }
                            },
                            "scaleRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Scaling rules."
                              }
                            },
                            "activeRevisionsMode": {
                              "type": "string",
                              "defaultValue": "Single",
                              "allowedValues": [
                                "Multiple",
                                "Single"
                              ],
                              "metadata": {
                                "description": "Optional. Controls how active revisions are handled for the Container app."
                              }
                            },
                            "environmentResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of environment."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "registries": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom domain bindings for Container App hostnames."
                              }
                            },
                            "exposedPort": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Rules to restrict incoming IP address."
                              }
                            },
                            "trafficLabel": {
                              "type": "string",
                              "defaultValue": "label-1",
                              "metadata": {
                                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                              }
                            },
                            "trafficLatestRevision": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                              }
                            },
                            "trafficRevisionName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of a revision."
                              }
                            },
                            "trafficWeight": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "Optional. Traffic weight assigned to a revision."
                              }
                            },
                            "dapr": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dapr configuration for the Container App."
                              }
                            },
                            "maxInactiveRevisions": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Max inactive revisions a Container App can have."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/container"
                              },
                              "metadata": {
                                "description": "Required. List of container definitions for the Container App."
                              }
                            },
                            "initContainersTemplate": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of specialized containers that run before app containers."
                              }
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The secrets of the Container App."
                              }
                            },
                            "revisionSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. User friendly suffix that is appended to the revision name."
                              }
                            },
                            "volumes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of volume definitions for the Container App."
                              }
                            },
                            "workloadProfileName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Workload profile name to pin for container app execution."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "containerApp": {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "environmentId": "[parameters('environmentResourceId')]",
                                "configuration": {
                                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                                  "ingress": "[if(parameters('disableIngress'), null(), createObject('allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                                  "secrets": "[variables('secretList')]"
                                },
                                "template": {
                                  "containers": "[parameters('containers')]",
                                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                                  "revisionSuffix": "[parameters('revisionSuffix')]",
                                  "scale": {
                                    "maxReplicas": "[parameters('scaleMaxReplicas')]",
                                    "minReplicas": "[parameters('scaleMinReplicas')]",
                                    "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                                  },
                                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                                },
                                "workloadProfileName": "[parameters('workloadProfileName')]"
                              }
                            },
                            "containerApp_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            },
                            "containerApp_roleAssignments": {
                              "copy": {
                                "name": "containerApp_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Container App."
                              },
                              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                            },
                            "fqdn": {
                              "type": "string",
                              "metadata": {
                                "description": "The configuration of ingress fqdn."
                              },
                              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Container App was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Container App."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('containerApp', '2023-05-01', 'full').location]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_CONTAINER_APP_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'containerAppsEnvironment')]",
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistry')]",
                "[resourceId('Microsoft.Resources/deployments', 'cpuadUpdater-fetch-image')]",
                "[resourceId('Microsoft.Resources/deployments', 'identity')]",
                "[resourceId('Microsoft.Resources/deployments', 'monitoring')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "grafana-fetch-image",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "exists": {
                    "value": "[parameters('grafanaExists')]"
                  },
                  "name": {
                    "value": "grafana"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "9643843979796575983"
                    }
                  },
                  "parameters": {
                    "exists": {
                      "type": "bool"
                    },
                    "name": {
                      "type": "string"
                    }
                  },
                  "resources": [],
                  "outputs": {
                    "containers": {
                      "type": "array",
                      "value": "[if(parameters('exists'), reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-02-preview').template.containers, createArray())]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "grafana",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "grafana"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "containerRegistryLoginServer": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER.value]"
                  },
                  "containerAppsEnvironmentResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerAppsEnvironment'), '2022-09-01').outputs.AZURE_RESOURCE_CONTAINER_APPS_ENVIRONMENT_ID.value]"
                  },
                  "applicationInsightsConnectionString": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'monitoring'), '2022-09-01').outputs.AZURE_RESOURCE_MONITORING_APP_INSIGHTS_CONNECTION_STRING.value]"
                  },
                  "definition": {
                    "value": "[parameters('grafanaDefinition')]"
                  },
                  "fetchLatestImage": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cpuadUpdater-fetch-image'), '2022-09-01')]"
                  },
                  "port": {
                    "value": 3000
                  },
                  "userAssignedManagedIdentityResourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_ID.value]"
                  },
                  "userAssignedManagedIdentityClientId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'identity'), '2022-09-01').outputs.AZURE_RESOURCE_USER_ASSIGNED_IDENTITY_CLIENT_ID.value]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "ingressExternal": {
                    "value": true
                  },
                  "cpu": {
                    "value": "1.0"
                  },
                  "memory": {
                    "value": "2.0Gi"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.33.93.31351",
                      "templateHash": "15189363346424104492"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "name": {
                      "type": "string"
                    },
                    "definition": {
                      "type": "object"
                    },
                    "fetchLatestImage": {
                      "type": "object"
                    },
                    "applicationInsightsConnectionString": {
                      "type": "string"
                    },
                    "userAssignedManagedIdentityClientId": {
                      "type": "string"
                    },
                    "userAssignedManagedIdentityResourceId": {
                      "type": "string"
                    },
                    "port": {
                      "type": "int"
                    },
                    "containerRegistryLoginServer": {
                      "type": "string"
                    },
                    "containerAppsEnvironmentResourceId": {
                      "type": "string"
                    },
                    "ingressExternal": {
                      "type": "bool",
                      "defaultValue": false
                    },
                    "cpu": {
                      "type": "string"
                    },
                    "memory": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "appSettingsArray": "[filter(array(parameters('definition').settings), lambda('i', not(equals(lambdaVariables('i').name, ''))))]",
                    "secrets": "[map(filter(variables('appSettingsArray'), lambda('i', not(equals(tryGet(lambdaVariables('i'), 'secret'), null())))), lambda('i', createObject('name', lambdaVariables('i').name, 'value', lambdaVariables('i').value, 'secretRef', coalesce(tryGet(lambdaVariables('i'), 'secretRef'), take(replace(replace(toLower(lambdaVariables('i').name), '_', '-'), '.', '-'), 32)))))]",
                    "srcEnv": "[map(filter(variables('appSettingsArray'), lambda('i', equals(tryGet(lambdaVariables('i'), 'secret'), null()))), lambda('i', createObject('name', lambdaVariables('i').name, 'value', lambdaVariables('i').value)))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[parameters('name')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "name": {
                            "value": "[parameters('name')]"
                          },
                          "ingressTargetPort": {
                            "value": "[parameters('port')]"
                          },
                          "scaleMinReplicas": {
                            "value": 1
                          },
                          "scaleMaxReplicas": {
                            "value": 10
                          },
                          "secrets": {
                            "value": {
                              "secureList": "[union(createArray(), map(variables('secrets'), lambda('secret', createObject('name', lambdaVariables('secret').secretRef, 'value', lambdaVariables('secret').value))))]"
                            }
                          },
                          "containers": {
                            "value": [
                              {
                                "image": "[coalesce(tryGet(tryGet(tryGet(parameters('fetchLatestImage').outputs, 'containers'), 0), 'image'), 'mcr.microsoft.com/azuredocs/containerapps-helloworld:latest')]",
                                "name": "main",
                                "resources": {
                                  "cpu": "[json(parameters('cpu'))]",
                                  "memory": "[parameters('memory')]"
                                },
                                "env": "[union(createArray(createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', parameters('applicationInsightsConnectionString')), createObject('name', 'AZURE_CLIENT_ID', 'value', parameters('userAssignedManagedIdentityClientId'))), variables('srcEnv'), map(variables('secrets'), lambda('secret', createObject('name', lambdaVariables('secret').name, 'secretRef', lambdaVariables('secret').secretRef))))]"
                              }
                            ]
                          },
                          "managedIdentities": {
                            "value": {
                              "systemAssigned": false,
                              "userAssignedResourceIds": [
                                "[parameters('userAssignedManagedIdentityResourceId')]"
                              ]
                            }
                          },
                          "registries": {
                            "value": [
                              {
                                "server": "[parameters('containerRegistryLoginServer')]",
                                "identity": "[parameters('userAssignedManagedIdentityResourceId')]"
                              }
                            ]
                          },
                          "environmentResourceId": {
                            "value": "[parameters('containerAppsEnvironmentResourceId')]"
                          },
                          "location": {
                            "value": "[parameters('location')]"
                          },
                          "tags": {
                            "value": "[union(parameters('tags'), createObject('azd-service-name', parameters('name')))]"
                          },
                          "ingressExternal": {
                            "value": "[parameters('ingressExternal')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "languageVersion": "2.0",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.29.47.4906",
                              "templateHash": "6290070069549338411"
                            },
                            "name": "Container Apps",
                            "description": "This module deploys a Container App.",
                            "owner": "Azure/module-maintainers"
                          },
                          "definitions": {
                            "managedIdentitiesType": {
                              "type": "object",
                              "properties": {
                                "systemAssigned": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Enables system assigned managed identity on the resource."
                                  }
                                },
                                "userAssignedResourceIds": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The resource ID(s) to assign to the resource."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "lockType": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the name of lock."
                                  }
                                },
                                "kind": {
                                  "type": "string",
                                  "allowedValues": [
                                    "CanNotDelete",
                                    "None",
                                    "ReadOnly"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specify the type of lock."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "roleAssignmentType": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The name (as GUID) of the role assignment. If not provided, a GUID will be generated."
                                    }
                                  },
                                  "roleDefinitionIdOrName": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The role to assign. You can provide either the display name of the role definition, the role definition GUID, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'."
                                    }
                                  },
                                  "principalId": {
                                    "type": "string",
                                    "metadata": {
                                      "description": "Required. The principal ID of the principal (user/group/identity) to assign the role to."
                                    }
                                  },
                                  "principalType": {
                                    "type": "string",
                                    "allowedValues": [
                                      "Device",
                                      "ForeignGroup",
                                      "Group",
                                      "ServicePrincipal",
                                      "User"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The principal type of the assigned principal ID."
                                    }
                                  },
                                  "description": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The description of the role assignment."
                                    }
                                  },
                                  "condition": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The conditions on the role assignment. This limits the resources it can be assigned to. e.g.: @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:ContainerName] StringEqualsIgnoreCase \"foo_storage_container\"."
                                    }
                                  },
                                  "conditionVersion": {
                                    "type": "string",
                                    "allowedValues": [
                                      "2.0"
                                    ],
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. Version of the condition."
                                    }
                                  },
                                  "delegatedManagedIdentityResourceId": {
                                    "type": "string",
                                    "nullable": true,
                                    "metadata": {
                                      "description": "Optional. The Resource Id of the delegated managed identity resource."
                                    }
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "container": {
                              "type": "object",
                              "properties": {
                                "args": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command arguments."
                                  }
                                },
                                "command": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container start command."
                                  }
                                },
                                "env": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/environmentVar"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container environment variables."
                                  }
                                },
                                "image": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Container image tag."
                                  }
                                },
                                "name": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Custom container name."
                                  }
                                },
                                "probes": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbe"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. List of probes for the container."
                                  }
                                },
                                "resources": {
                                  "type": "object",
                                  "metadata": {
                                    "description": "Required. Container resource requirements."
                                  }
                                },
                                "volumeMounts": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/volumeMount"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Container volume mounts."
                                  }
                                }
                              }
                            },
                            "environmentVar": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Environment variable name."
                                  }
                                },
                                "secretRef": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Name of the Container App secret from which to pull the environment variable value."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Non-secret environment variable value."
                                  }
                                }
                              }
                            },
                            "containerAppProbe": {
                              "type": "object",
                              "properties": {
                                "failureThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3."
                                  }
                                },
                                "httpGet": {
                                  "$ref": "#/definitions/containerAppProbeHttpGet",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTPGet specifies the http request to perform."
                                  }
                                },
                                "initialDelaySeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 60,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after the container has started before liveness probes are initiated."
                                  }
                                },
                                "periodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. How often (in seconds) to perform the probe. Default to 10 seconds."
                                  }
                                },
                                "successThreshold": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 10,
                                  "metadata": {
                                    "description": "Optional. Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup."
                                  }
                                },
                                "tcpSocket": {
                                  "$ref": "#/definitions/containerAppProbeTcpSocket",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported."
                                  }
                                },
                                "terminationGracePeriodSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is an alpha field and requires enabling ProbeTerminationGracePeriod feature gate. Maximum value is 3600 seconds (1 hour)."
                                  }
                                },
                                "timeoutSeconds": {
                                  "type": "int",
                                  "nullable": true,
                                  "minValue": 1,
                                  "maxValue": 240,
                                  "metadata": {
                                    "description": "Optional. Number of seconds after which the probe times out. Defaults to 1 second."
                                  }
                                },
                                "type": {
                                  "type": "string",
                                  "allowedValues": [
                                    "Liveness",
                                    "Readiness",
                                    "Startup"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. The type of probe."
                                  }
                                }
                              }
                            },
                            "corsPolicyType": {
                              "type": "object",
                              "properties": {
                                "allowCredentials": {
                                  "type": "bool",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Switch to determine whether the resource allows credentials."
                                  }
                                },
                                "allowedHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-headers header."
                                  }
                                },
                                "allowedMethods": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-methods header."
                                  }
                                },
                                "allowedOrigins": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-allow-origins header."
                                  }
                                },
                                "exposeHeaders": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-expose-headers header."
                                  }
                                },
                                "maxAge": {
                                  "type": "int",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Specifies the content for the access-control-max-age header."
                                  }
                                }
                              },
                              "nullable": true
                            },
                            "containerAppProbeHttpGet": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to. Defaults to the pod IP."
                                  }
                                },
                                "httpHeaders": {
                                  "type": "array",
                                  "items": {
                                    "$ref": "#/definitions/containerAppProbeHttpGetHeadersItem"
                                  },
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. HTTP headers to set in the request."
                                  }
                                },
                                "path": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path to access on the HTTP server."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "metadata": {
                                    "description": "Required. Name or number of the port to access on the container."
                                  }
                                },
                                "scheme": {
                                  "type": "string",
                                  "allowedValues": [
                                    "HTTP",
                                    "HTTPS"
                                  ],
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Scheme to use for connecting to the host. Defaults to HTTP."
                                  }
                                }
                              }
                            },
                            "containerAppProbeHttpGetHeadersItem": {
                              "type": "object",
                              "properties": {
                                "name": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Name of the header."
                                  }
                                },
                                "value": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Value of the header."
                                  }
                                }
                              }
                            },
                            "containerAppProbeTcpSocket": {
                              "type": "object",
                              "properties": {
                                "host": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Host name to connect to, defaults to the pod IP."
                                  }
                                },
                                "port": {
                                  "type": "int",
                                  "minValue": 1,
                                  "maxValue": 65535,
                                  "metadata": {
                                    "description": "Required. Number of the port to access on the container. Name must be an IANA_SVC_NAME."
                                  }
                                }
                              }
                            },
                            "volumeMount": {
                              "type": "object",
                              "properties": {
                                "mountPath": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. Path within the container at which the volume should be mounted.Must not contain ':'."
                                  }
                                },
                                "subPath": {
                                  "type": "string",
                                  "nullable": true,
                                  "metadata": {
                                    "description": "Optional. Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root)."
                                  }
                                },
                                "volumeName": {
                                  "type": "string",
                                  "metadata": {
                                    "description": "Required. This must match the Name of a Volume."
                                  }
                                }
                              }
                            }
                          },
                          "parameters": {
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Name of the Container App."
                              }
                            },
                            "location": {
                              "type": "string",
                              "defaultValue": "[resourceGroup().location]",
                              "metadata": {
                                "description": "Optional. Location for all Resources."
                              }
                            },
                            "disableIngress": {
                              "type": "bool",
                              "defaultValue": false,
                              "metadata": {
                                "description": "Optional. Bool to disable all ingress traffic for the container app."
                              }
                            },
                            "ingressExternal": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if the App exposes an external HTTP endpoint."
                              }
                            },
                            "clientCertificateMode": {
                              "type": "string",
                              "defaultValue": "ignore",
                              "allowedValues": [
                                "accept",
                                "ignore",
                                "require"
                              ],
                              "metadata": {
                                "description": "Optional. Client certificate mode for mTLS."
                              }
                            },
                            "corsPolicy": {
                              "$ref": "#/definitions/corsPolicyType",
                              "metadata": {
                                "description": "Optional. Object userd to configure CORS policy."
                              }
                            },
                            "stickySessionsAffinity": {
                              "type": "string",
                              "defaultValue": "none",
                              "allowedValues": [
                                "none",
                                "sticky"
                              ],
                              "metadata": {
                                "description": "Optional. Bool indicating if the Container App should enable session affinity."
                              }
                            },
                            "ingressTransport": {
                              "type": "string",
                              "defaultValue": "auto",
                              "allowedValues": [
                                "auto",
                                "http",
                                "http2",
                                "tcp"
                              ],
                              "metadata": {
                                "description": "Optional. Ingress transport protocol."
                              }
                            },
                            "ingressAllowInsecure": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Bool indicating if HTTP connections to is allowed. If set to false HTTP connections are automatically redirected to HTTPS connections."
                              }
                            },
                            "ingressTargetPort": {
                              "type": "int",
                              "defaultValue": 80,
                              "metadata": {
                                "description": "Optional. Target Port in containers for traffic from ingress."
                              }
                            },
                            "scaleMaxReplicas": {
                              "type": "int",
                              "defaultValue": 10,
                              "metadata": {
                                "description": "Optional. Maximum number of container replicas. Defaults to 10 if not set."
                              }
                            },
                            "scaleMinReplicas": {
                              "type": "int",
                              "defaultValue": 3,
                              "metadata": {
                                "description": "Optional. Minimum number of container replicas. Defaults to 3 if not set."
                              }
                            },
                            "scaleRules": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Scaling rules."
                              }
                            },
                            "activeRevisionsMode": {
                              "type": "string",
                              "defaultValue": "Single",
                              "allowedValues": [
                                "Multiple",
                                "Single"
                              ],
                              "metadata": {
                                "description": "Optional. Controls how active revisions are handled for the Container app."
                              }
                            },
                            "environmentResourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "Required. Resource ID of environment."
                              }
                            },
                            "lock": {
                              "$ref": "#/definitions/lockType",
                              "metadata": {
                                "description": "Optional. The lock settings of the service."
                              }
                            },
                            "tags": {
                              "type": "object",
                              "nullable": true,
                              "metadata": {
                                "description": "Optional. Tags of the resource."
                              }
                            },
                            "registries": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Collection of private container registry credentials for containers used by the Container app."
                              }
                            },
                            "managedIdentities": {
                              "$ref": "#/definitions/managedIdentitiesType",
                              "metadata": {
                                "description": "Optional. The managed identity definition for this resource."
                              }
                            },
                            "roleAssignments": {
                              "$ref": "#/definitions/roleAssignmentType",
                              "metadata": {
                                "description": "Optional. Array of role assignments to create."
                              }
                            },
                            "enableTelemetry": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Enable/Disable usage telemetry for module."
                              }
                            },
                            "customDomains": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Custom domain bindings for Container App hostnames."
                              }
                            },
                            "exposedPort": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Exposed Port in containers for TCP traffic from ingress."
                              }
                            },
                            "ipSecurityRestrictions": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. Rules to restrict incoming IP address."
                              }
                            },
                            "trafficLabel": {
                              "type": "string",
                              "defaultValue": "label-1",
                              "metadata": {
                                "description": "Optional. Associates a traffic label with a revision. Label name should be consist of lower case alphanumeric characters or dashes."
                              }
                            },
                            "trafficLatestRevision": {
                              "type": "bool",
                              "defaultValue": true,
                              "metadata": {
                                "description": "Optional. Indicates that the traffic weight belongs to a latest stable revision."
                              }
                            },
                            "trafficRevisionName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Name of a revision."
                              }
                            },
                            "trafficWeight": {
                              "type": "int",
                              "defaultValue": 100,
                              "metadata": {
                                "description": "Optional. Traffic weight assigned to a revision."
                              }
                            },
                            "dapr": {
                              "type": "object",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. Dapr configuration for the Container App."
                              }
                            },
                            "maxInactiveRevisions": {
                              "type": "int",
                              "defaultValue": 0,
                              "metadata": {
                                "description": "Optional. Max inactive revisions a Container App can have."
                              }
                            },
                            "containers": {
                              "type": "array",
                              "items": {
                                "$ref": "#/definitions/container"
                              },
                              "metadata": {
                                "description": "Required. List of container definitions for the Container App."
                              }
                            },
                            "initContainersTemplate": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of specialized containers that run before app containers."
                              }
                            },
                            "secrets": {
                              "type": "secureObject",
                              "defaultValue": {},
                              "metadata": {
                                "description": "Optional. The secrets of the Container App."
                              }
                            },
                            "revisionSuffix": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. User friendly suffix that is appended to the revision name."
                              }
                            },
                            "volumes": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Optional. List of volume definitions for the Container App."
                              }
                            },
                            "workloadProfileName": {
                              "type": "string",
                              "defaultValue": "",
                              "metadata": {
                                "description": "Optional. Workload profile name to pin for container app execution."
                              }
                            }
                          },
                          "variables": {
                            "copy": [
                              {
                                "name": "formattedRoleAssignments",
                                "count": "[length(coalesce(parameters('roleAssignments'), createArray()))]",
                                "input": "[union(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')], createObject('roleDefinitionId', coalesce(tryGet(variables('builtInRoleNames'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName), if(contains(coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, '/providers/Microsoft.Authorization/roleDefinitions/'), coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName, subscriptionResourceId('Microsoft.Authorization/roleDefinitions', coalesce(parameters('roleAssignments'), createArray())[copyIndex('formattedRoleAssignments')].roleDefinitionIdOrName)))))]"
                              }
                            ],
                            "secretList": "[if(not(empty(parameters('secrets'))), parameters('secrets').secureList, createArray())]",
                            "formattedUserAssignedIdentities": "[reduce(map(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createArray()), lambda('id', createObject(format('{0}', lambdaVariables('id')), createObject()))), createObject(), lambda('cur', 'next', union(lambdaVariables('cur'), lambdaVariables('next'))))]",
                            "identity": "[if(not(empty(parameters('managedIdentities'))), createObject('type', if(coalesce(tryGet(parameters('managedIdentities'), 'systemAssigned'), false()), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'SystemAssigned,UserAssigned', 'SystemAssigned'), if(not(empty(coalesce(tryGet(parameters('managedIdentities'), 'userAssignedResourceIds'), createObject()))), 'UserAssigned', 'None')), 'userAssignedIdentities', if(not(empty(variables('formattedUserAssignedIdentities'))), variables('formattedUserAssignedIdentities'), null())), null())]",
                            "builtInRoleNames": {
                              "ContainerApp Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'ad2dd5fb-cd4b-4fd4-a9b6-4fed3630980b')]",
                              "Contributor": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                              "Owner": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
                              "Reader": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
                              "Role Based Access Control Administrator (Preview)": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'f58310d9-a9f6-439a-9e8d-f62e7b41a168')]",
                              "User Access Administrator": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]"
                            }
                          },
                          "resources": {
                            "avmTelemetry": {
                              "condition": "[parameters('enableTelemetry')]",
                              "type": "Microsoft.Resources/deployments",
                              "apiVersion": "2024-03-01",
                              "name": "[format('46d3xbcp.res.app-containerapp.{0}.{1}', replace('0.8.0', '.', '-'), substring(uniqueString(deployment().name, parameters('location')), 0, 4))]",
                              "properties": {
                                "mode": "Incremental",
                                "template": {
                                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                  "contentVersion": "1.0.0.0",
                                  "resources": [],
                                  "outputs": {
                                    "telemetry": {
                                      "type": "String",
                                      "value": "For more information, see https://aka.ms/avm/TelemetryInfo"
                                    }
                                  }
                                }
                              }
                            },
                            "containerApp": {
                              "type": "Microsoft.App/containerApps",
                              "apiVersion": "2023-05-01",
                              "name": "[parameters('name')]",
                              "tags": "[parameters('tags')]",
                              "location": "[parameters('location')]",
                              "identity": "[variables('identity')]",
                              "properties": {
                                "environmentId": "[parameters('environmentResourceId')]",
                                "configuration": {
                                  "activeRevisionsMode": "[parameters('activeRevisionsMode')]",
                                  "dapr": "[if(not(empty(parameters('dapr'))), parameters('dapr'), null())]",
                                  "ingress": "[if(parameters('disableIngress'), null(), createObject('allowInsecure', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('ingressAllowInsecure'), false()), 'customDomains', if(not(empty(parameters('customDomains'))), parameters('customDomains'), null()), 'corsPolicy', if(and(not(equals(parameters('corsPolicy'), null())), not(equals(parameters('ingressTransport'), 'tcp'))), createObject('allowCredentials', coalesce(tryGet(parameters('corsPolicy'), 'allowCredentials'), false()), 'allowedHeaders', coalesce(tryGet(parameters('corsPolicy'), 'allowedHeaders'), createArray()), 'allowedMethods', coalesce(tryGet(parameters('corsPolicy'), 'allowedMethods'), createArray()), 'allowedOrigins', coalesce(tryGet(parameters('corsPolicy'), 'allowedOrigins'), createArray()), 'exposeHeaders', coalesce(tryGet(parameters('corsPolicy'), 'exposeHeaders'), createArray()), 'maxAge', tryGet(parameters('corsPolicy'), 'maxAge')), null()), 'clientCertificateMode', if(not(equals(parameters('ingressTransport'), 'tcp')), parameters('clientCertificateMode'), null()), 'exposedPort', parameters('exposedPort'), 'external', parameters('ingressExternal'), 'ipSecurityRestrictions', if(not(empty(parameters('ipSecurityRestrictions'))), parameters('ipSecurityRestrictions'), null()), 'targetPort', parameters('ingressTargetPort'), 'stickySessions', createObject('affinity', parameters('stickySessionsAffinity')), 'traffic', if(not(equals(parameters('ingressTransport'), 'tcp')), createArray(createObject('label', parameters('trafficLabel'), 'latestRevision', parameters('trafficLatestRevision'), 'revisionName', parameters('trafficRevisionName'), 'weight', parameters('trafficWeight'))), null()), 'transport', parameters('ingressTransport')))]",
                                  "maxInactiveRevisions": "[parameters('maxInactiveRevisions')]",
                                  "registries": "[if(not(empty(parameters('registries'))), parameters('registries'), null())]",
                                  "secrets": "[variables('secretList')]"
                                },
                                "template": {
                                  "containers": "[parameters('containers')]",
                                  "initContainers": "[if(not(empty(parameters('initContainersTemplate'))), parameters('initContainersTemplate'), null())]",
                                  "revisionSuffix": "[parameters('revisionSuffix')]",
                                  "scale": {
                                    "maxReplicas": "[parameters('scaleMaxReplicas')]",
                                    "minReplicas": "[parameters('scaleMinReplicas')]",
                                    "rules": "[if(not(empty(parameters('scaleRules'))), parameters('scaleRules'), null())]"
                                  },
                                  "volumes": "[if(not(empty(parameters('volumes'))), parameters('volumes'), null())]"
                                },
                                "workloadProfileName": "[parameters('workloadProfileName')]"
                              }
                            },
                            "containerApp_lock": {
                              "condition": "[and(not(empty(coalesce(parameters('lock'), createObject()))), not(equals(tryGet(parameters('lock'), 'kind'), 'None')))]",
                              "type": "Microsoft.Authorization/locks",
                              "apiVersion": "2020-05-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(parameters('lock'), 'name'), format('lock-{0}', parameters('name')))]",
                              "properties": {
                                "level": "[coalesce(tryGet(parameters('lock'), 'kind'), '')]",
                                "notes": "[if(equals(tryGet(parameters('lock'), 'kind'), 'CanNotDelete'), 'Cannot delete resource or child resources.', 'Cannot delete or modify the resource or child resources.')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            },
                            "containerApp_roleAssignments": {
                              "copy": {
                                "name": "containerApp_roleAssignments",
                                "count": "[length(coalesce(variables('formattedRoleAssignments'), createArray()))]"
                              },
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2022-04-01",
                              "scope": "[format('Microsoft.App/containerApps/{0}', parameters('name'))]",
                              "name": "[coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'name'), guid(resourceId('Microsoft.App/containerApps', parameters('name')), coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId, coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId))]",
                              "properties": {
                                "roleDefinitionId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].roleDefinitionId]",
                                "principalId": "[coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()].principalId]",
                                "description": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'description')]",
                                "principalType": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'principalType')]",
                                "condition": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition')]",
                                "conditionVersion": "[if(not(empty(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'condition'))), coalesce(tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'conditionVersion'), '2.0'), null())]",
                                "delegatedManagedIdentityResourceId": "[tryGet(coalesce(variables('formattedRoleAssignments'), createArray())[copyIndex()], 'delegatedManagedIdentityResourceId')]"
                              },
                              "dependsOn": [
                                "containerApp"
                              ]
                            }
                          },
                          "outputs": {
                            "resourceId": {
                              "type": "string",
                              "metadata": {
                                "description": "The resource ID of the Container App."
                              },
                              "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
                            },
                            "fqdn": {
                              "type": "string",
                              "metadata": {
                                "description": "The configuration of ingress fqdn."
                              },
                              "value": "[if(parameters('disableIngress'), 'IngressDisabled', reference('containerApp').configuration.ingress.fqdn)]"
                            },
                            "resourceGroupName": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the resource group the Container App was deployed into."
                              },
                              "value": "[resourceGroup().name]"
                            },
                            "name": {
                              "type": "string",
                              "metadata": {
                                "description": "The name of the Container App."
                              },
                              "value": "[parameters('name')]"
                            },
                            "systemAssignedMIPrincipalId": {
                              "type": "string",
                              "metadata": {
                                "description": "The principal ID of the system assigned identity."
                              },
                              "value": "[coalesce(tryGet(tryGet(reference('containerApp', '2023-05-01', 'full'), 'identity'), 'principalId'), '')]"
                            },
                            "location": {
                              "type": "string",
                              "metadata": {
                                "description": "The location the resource was deployed into."
                              },
                              "value": "[reference('containerApp', '2023-05-01', 'full').location]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "AZURE_RESOURCE_CONTAINER_APP_ID": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Resources/deployments', parameters('name')), '2022-09-01').outputs.resourceId.value]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'containerAppsEnvironment')]",
                "[resourceId('Microsoft.Resources/deployments', 'containerRegistry')]",
                "[resourceId('Microsoft.Resources/deployments', 'cpuadUpdater-fetch-image')]",
                "[resourceId('Microsoft.Resources/deployments', 'identity')]",
                "[resourceId('Microsoft.Resources/deployments', 'monitoring')]"
              ]
            }
          ],
          "outputs": {
            "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'containerRegistry'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_LOGIN_SERVER.value]"
            },
            "AZURE_RESOURCE_CPUAD_UPDATER_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'cpuadUpdater'), '2022-09-01').outputs.AZURE_RESOURCE_CONTAINER_APP_ID.value]"
            },
            "AZURE_RESOURCE_ELASTIC_SEARCH_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'elasticSearch'), '2022-09-01').outputs.AZURE_RESOURCE_CONTAINER_APP_ID.value]"
            },
            "AZURE_RESOURCE_GRAFANA_ID": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'grafana'), '2022-09-01').outputs.AZURE_RESOURCE_CONTAINER_APP_ID.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('rg-{0}', parameters('environmentName')))]"
      ]
    }
  ],
  "outputs": {
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_CONTAINER_REGISTRY_ENDPOINT.value]"
    },
    "AZURE_RESOURCE_CPUAD_UPDATER_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_RESOURCE_CPUAD_UPDATER_ID.value]"
    },
    "AZURE_RESOURCE_ELASTIC_SEARCH_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_RESOURCE_ELASTIC_SEARCH_ID.value]"
    },
    "AZURE_RESOURCE_GRAFANA_ID": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('rg-{0}', parameters('environmentName'))), 'Microsoft.Resources/deployments', 'resources'), '2022-09-01').outputs.AZURE_RESOURCE_GRAFANA_ID.value]"
    }
  }
}